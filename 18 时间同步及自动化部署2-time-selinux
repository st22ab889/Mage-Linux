2 时间同步服务和SELinux安全管理
  加密和安全当前都离不开时间的同步，否则各种网络服务可能不能正常运行
  工作中，每个服务器的时间要求一致，并且和互联网时间的服务器同步，不一致会造成很多问题，比如证书是有有效期的
	
公共NTP(Network Time Protocol)服务：
	pool.ntp.org：项目是一个提供可靠易用的NTP服务的虚拟集群cn.pool.ntp.org，0-3.cn.pool.ntp.org
	
	阿里云公共NTP服务器
		Unix/linux类：ntp.aliyun.com，ntp[1-7].aliyun.com
		windows类： time.pool.aliyun.com
	
	腾讯公共NTP
		time1-5.cloud.tencent.com
	
	大学ntp服务
		s1a.time.edu.cn 北京邮电大学
		s1b.time.edu.cn 清华大学
		s1c.time.edu.cn 北京大学
	
	国家授时中心服务器：
		210.72.145.44
	
	美国标准技术院: 
		time.nist.gov
	
	
一次性同步时间：ntpdate 和 rdate
	ntpdate
		[root@localhost ~]#rpm -qf `which ntpdate`
		ntpdate-4.2.6p5-29.el7.centos.2.x86_64
		
		[root@localhost ~]#yum -y install ntpdate
		
		[root@localhost ~]#date -s '1 year'
		Fri Dec  1 00:23:27 CST 2023
		
		[root@localhost ~]#date
		Fri Dec  1 00:23:31 CST 2023
		
		// 同步时间
		[root@localhost ~]#ntpdate ntp.aliyun.com
		 1 Dec 00:28:10 ntpdate[1667]: step time server 203.107.6.88 offset -31535990.162639 sec
		
		[root@localhost ~]#date
		Thu Dec  1 00:28:12 CST 2022
		
		// ntpdate 同时时间失败
		[root@localhost ~]#ntpdate 192.32.168.101					# 根据指定的NTP服务提供时间
		1 Dec 01:52:53 ntpdate[1842]: no server suitable for synchronization found
	
	rdate
		[root@centos7 ~]#yum -y install rdate		
		
		[root@centos7 ~]#date -s '1 year'
		Tue Jan 18 21:33:13 CST 2022
		
		[root@centos7 ~]#rdate -s -u time.nist.gov
		
		[root@centos7 ~]#date
		Mon Jan 18 21:33:22 CST 2021

	说明：
		ntpdate 命令在centos上已经不提供，rdate 命令用的非常少


企业里面同步时间的方式：
	方式1：使用命令定时同步时间，缺陷是每次都要连互联网，如果互联网上的ntp服务器出现问题，就会同步失败，银行等金融机构不允许连接互联网
	方式2：企业内部搭建时间服务器，专门提供时间同步，效率高，不依赖互联网


2.1 时间同步服务
	
	基本架构：实现跨网络时间同步
		公司里面的服务器 ----> 公司内部 NTP Server(2台) ----> 国内互联网NTP服务器 ----> 原子钟

	时间同步服务：
		多主机协作工作时，各个主机的时间同步很重要，时间不一致会造成很多重要应用的故障，如：加密协议，日志，集群等！
		利用NTP（Network Time Protocol） 协议使网络中的各个计算机时间达到同步。目前NTP协议属于运维基础架构中必备的基本服务之一
	
	时间同步软件实现：
		ntp：同步效率比较慢、同步时间精度相对差一些，一般情况够用；centos6及之前的版本使用！
		chrony：同步更快，精度更高；centos7及之后的版本使用！
	
	ntp(了解)：
		将系统时钟和世界协调时UTC同步，精度在局域网内可达0.1ms，在互联网上绝大多数的地方精度可以达到1-50ms
		项目官网：http://www.ntp.org
		
	chrony：
		实现NTP协议的的自由软件。可使系统时钟与NTP服务器，参考时钟（例如GPS接收器）以及使用手表和键盘的手动输入进行同步。
		还可以作为NTPv4（RFC 5905）服务器和对等体运行，为网络中的计算机提供时间服务。
		设计用于在各种条件下良好运行，包括间歇性和高度拥挤的网络连接，温度变化（计算机时钟对温度敏感），以及不能连续运行或在虚拟机上运行的系统。
		通过Internet同步的两台机器之间的典型精度在几毫秒之内，在LAN上，精度通常为几十微秒。利用硬件时间戳或硬件参考时钟，可实现亚微秒的精度。
		chrony可以慢慢同步时间，比如通过调整系统时钟频率让时间快一点和慢一点直到标准时间。好处是，比如日志，如果直接把时间矫正，就会出现在一个时间段内没有日志！
	
	说明: 
		ntp 和 chrony 既是客户端也是服务端,而且是常驻内存,以service的方式来运行,保证时间的同步!
		同步时间用的协议是NTP协议!
		

2.2 chrony
	
	[root@localhost ~]#yum info chrony
	......省略
	Name        : chrony
	Arch        : x86_64
	Version     : 3.4
	Release     : 1.el7
	Size        : 491 k
	Repo        : installed
	From repo   : anaconda
	......省略
	
	
	// Centos7、8系统安装时已自带
	[root@localhost ~]#rpm -qi chrony
	Name        : chrony
	Version     : 3.4
	Release     : 1.el7
	Architecture: x86_64
	......省略
	
	
	[root@localhost ~]#rpm -ql chrony
	/etc/chrony.conf								# 配置文件
	/usr/bin/chronyc								# 客户端测试工具
	/usr/lib/systemd/system/chronyd.service			# 服务
	/usr/sbin/chronyd								# 服务器主程序,实际上也是客户端,因为它要和其它NTP服务器同步
	
	
	// 默认就已经设为开机启动，系统时间准确就是因为这个服务自动启动并且自动同步时间
	[root@localhost ~]#systemctl status chronyd
	● chronyd.service - NTP client/server
	   Loaded: loaded (/usr/lib/systemd/system/chronyd.service; enabled; vendor preset: enabled)
	   Active: active (running) since Thu 2022-12-01 00:18:26 CST; 53min ago
		 Docs: man:chronyd(8)
	......省略
	
	
	// 默认装好的 chrony 的时间同步是由"/etc/chrony.conf"定义
	[root@localhost ~]#cat /etc/chrony.conf
	# Use public servers from the pool.ntp.org project.
	# Please consider joining the pool (http://www.pool.ntp.org/join.html).		# pool指定NTP服务器池而不是单个NTP服务器, server指定单个NTP服务器
	server 0.centos.pool.ntp.org iburst
	server 1.centos.pool.ntp.org iburst		# server后面就是时间同步服务, iburst 表示让同步快一点,开启多个并行任务来同步,不加iburst关键字会稍微慢一点
	server 2.centos.pool.ntp.org iburst		 
	server 3.centos.pool.ntp.org iburst	
	......省略
	
	[root@localhost ~]#ping 0.centos.pool.ntp.org
	PING 0.centos.pool.ntp.org (116.203.151.74) 56(84) bytes of data.
	64 bytes from a.chl.la (116.203.151.74): icmp_seq=1 ttl=128 time=415 ms		#415毫秒就是延时,所以要找一个相对近点的NTP服务器来同步时间更加靠谱
	......省略
	

2.3 搭建公司内部的NTP服务器


	用"192.168.32.100"作为NTP服务器
	
		[root@localhost ~]#cat /etc/chrony.conf
		# Use public servers from the pool.ntp.org project.
		# Please consider joining the pool (http://www.pool.ntp.org/join.html).
		#server 0.centos.pool.ntp.org iburst
		#server 1.centos.pool.ntp.org iburst
		#server 2.centos.pool.ntp.org iburst
		#server 3.centos.pool.ntp.org iburst
		server ntp.aliyun.com iburst			# 配置为阿里云的NTP服务器
		server ntp1.aliyun.com iburst
		server ntp2.aliyun.com iburst
		
		# Allow NTP client access from local network.
		#allow 192.168.0.0/16
		allow 0.0.0.0/0							# 允许任何网段的任何主机同步时间

		# Serve time even if not synchronized to a time source.		# 这项很重要,表示即使不能连到互联网ntp服务,也允许其它主机通过本机ntp服务同步时间 
		local stratum 10						# ntp层, 比如原子钟在第一层、互联网ntp服务在第二层 .... 经过很多层到达内网的ntp服务
												# 这里也不用关心具体中间经过了多少层,直接设为默认值10,表示是内网的ntp服务
		......省略								
		
		
		// 重启服务
		[root@localhost ~]#systemctl restart chronyd
		
		
		[root@localhost ~]#ss -ntlu
		Netid  State      Recv-Q Send-Q        Local Address:Port        Peer Address:Port
		udp    UNCONN     0      0                         *:123                    *:*			# 123端口只是提供了服务端端口
		udp    UNCONN     0      0                 127.0.0.1:323                    *:*			# 323端口只是提供了客户端端口
		udp    UNCONN     0      0                     [::1]:323                 [::]:*	
		......省略
		
		
	用"192.168.32.101"作为同步时间的客户端:
	
		[root@localhost ~]#date
		Thu Dec  1 01:49:52 CST 2022
		
		[root@localhost ~]#cat /etc/chrony.conf
		# Use public servers from the pool.ntp.org project.
		# Please consider joining the pool (http://www.pool.ntp.org/join.html).
		#server 0.centos.pool.ntp.org iburst
		#server 1.centos.pool.ntp.org iburst
		#server 2.centos.pool.ntp.org iburst
		#server 3.centos.pool.ntp.org iburst
		server 192.168.32.100 iburst				# NTP服务器指向 192.168.32.100
		......省略
		
		// 把时间设置为1年后
		[root@localhost ~]#date -s '1 year'
		Fri Dec  1 02:24:24 CST 2023
		
		// 同步时间
		[root@localhost ~]#ntpdate 192.168.32.100
		 1 Dec 02:26:37 ntpdate[1918]: step time server 192.168.32.100 offset -31536000.096555 sec
		[root@localhost ~]#date
		Thu Dec  1 02:26:40 CST 2022			# 同步时间成功
		
		
		// 把时间设置为3年前
		[root@localhost ~]#date -s '-3 year'
		Sun Dec  1 02:27:36 CST 2019
		
		// 直接使用 chronyc, 会出现交互式界面 
		[root@localhost ~]#chronyc
		chrony version 3.4
		Copyright (C) 1997-2003, 2007, 2009-2018 Richard P. Curnow and others
		chrony comes with ABSOLUTELY NO WARRANTY.  This is free software, and
		you are welcome to redistribute it under certain conditions.  See the
		GNU General Public License version 2 for details.

		chronyc> sources -v
		210 Number of sources = 4

		  .-- Source mode  '^' = server, '=' = peer, '#' = local clock.						// ^ 表示server
		 / .- Source state '*' = current synced, '+' = combined , '-' = not combined,		// * 表示成功	
		| /   '?' = unreachable, 'x' = time may be in error, '~' = time too variable.		// ? 表示不可达
		||                                                 .- xxxx [ yyyy ] +/- zzzz
		||      Reachability register (octal) -.           |  xxxx = adjusted offset,
		||      Log2(Polling interval) --.      |          |  yyyy = measured offset,
		||                                \     |          |  zzzz = estimated error.
		||                                 |    |           \
		MS Name/IP address         Stratum Poll Reach LastRx Last sample
		===============================================================================
		^? electrode.felixc.at           0   6   377     -     +0ns[   +0ns] +/-    0ns
		^? tick.ntp.infomaniak.ch        0   6   377     -     +0ns[   +0ns] +/-    0ns
		^? time.cloudflare.com           0   6   377     -     +0ns[   +0ns] +/-    0ns
		^? time.neu.edu.cn               0   6   377     -     +0ns[   +0ns] +/-    0ns
		chronyc> exit
		
		// 上面的交互式操作命令等价于这个命令,查看时间同步情况
		[root@localhost ~]#chronyc sources -v  
		
		// 看到时间没有同步, 可以重启 chronyd 服务, 或者等一段时间会自动同步. 如果等不及可以使用 ntpdate 命令立马同步!	
		[root@localhost ~]#date
		Sun Dec  1 02:30:02 CST 2019
		
		// 注意：为了确保时间一定能同步，最好重新启动 chronyd 服务！
		[root@localhost ~]#systemctl restart chronyd
		
		[root@localhost ~]#chronyc sources -v
		......省略
		^* 192.168.32.100                 0   8     0     -     +0ns[   +0ns] +/-    0ns		# 出现"*"号,说明时间同步成功
		
		[root@localhost ~]#date
		Thu Dec  1 02:40:33 CST 2022		
		
		// 把时间设置为1年前
		[root@localhost ~]#date -s '-1 year'			
		Wed Dec  1 02:41:52 CST 2021
		// 立马同步
		[root@localhost ~]#ntpdate 192.168.32.100		
		 1 Dec 02:41:59 ntpdate[2005]: step time server 192.168.32.100 offset 31535995.737297 sec
		[root@localhost ~]#date
		Thu Dec  1 02:42:00 CST 2022
		[root@localhost ~]#
	
		
	总结:
		工作中也不用专门拿两台(至少两台)服务器作为ntp服务,可以和其它提供资源服务器公用,比如yum服务器
		在系统装好后就可以设置ntp服务,作为一项正式使用服务器前的准备工作, 以后之后再设置


2.4 (了解)SELinux(Security-Enhanced Linux)：和安全相关的技术
	SELinux是美国国家安全局(NSA=The National Security Agency)和SCC(Secure Computing Corporation)开发的 Linux的一个强制访问控制的安全模块。
	2000年以GNU GPL发布，Linux内核2.6版本后集成在内核中. 红帽和Centos默认安装SELinux，其它系统默认不安装SELinux，比如ubuntu。
	
	关闭SELinux用的是DAC技术，开启SELinux用的是MAC技术：
		DAC：Discretionary Access Control 自由访问控制，所有进程不受约束，进程无束缚
		MAC：Mandatory Access Control 强制访问控制
			MAC环境下策略的规则决定控制的严格程度，策略被用来定义被限制的进程能够使用那些资源(文件和端口)。默认情况下，没有被明确允许的行为将被拒绝
			MAC环境下进程可以被限制的
			
	DAC和MAC具体区别：
		例如系统中安装nginx，niginx可以访问特定目录下的文件，比如自身的配置文件、网页文件，在没有开启SELinux的情况下，niginx可以访问所有文件，
		假如nginx有漏洞，黑客利用漏洞控制了nginx这个进程，就可以利用这个进程访问和nginx无关的文件，比如访问"/etc/passwd"等关键文件，不受访问限制，
		如果用了SELinux，应用程序和它需要访问的文件、目录、使用的端口等绑定在一起，只能访问限定的这些资源！任何用户，包括root都会收到限制！
	

启用和禁用SELinux:

	[root@localhost ~]#touch test.txt
	
	[root@localhost ~]#ll
	total 4
	-rw-------. 1 root root 1414 Aug 20  2021 anaconda-ks.cfg  # 权限后面的"."表示SELinux标签
	-rw-r--r--  1 root root    0 Dec  1 12:32 test.txt		
	
	// 为什么新建的文件没有SELinux标签?
	// 因为装系统时SELinux策略默认启用，所以装系统时生成的文件有SELinux标签。系统装好后禁用了SELinux，所以新建文件就没有SELinux标签，就算贴标签也没有用处！
	// SELinux标签的功能就是说明文件的用途，如果将来文件的用途和文件的标签不匹配，就会禁止使用这个文件
	
	// 加 -Z 可以看到具体标签的内容
	[root@localhost ~]#ll -Z
	-rw-------. root root system_u:object_r:admin_home_t:s0 anaconda-ks.cfg
	-rw-r--r--  root root ?                                test.txt


	[root@localhost ~]#cat /etc/selinux/config

	# This file controls the state of SELinux on the system.
	# SELINUX= can take one of these three values:
	#     enforcing - SELinux security policy is enforced.					# 强制
	#     permissive - SELinux prints warnings instead of enforcing.		# 允许，每个受限的进程违规操作不会被禁止，但会被记录于审计日志
	#     disabled - No SELinux policy is loaded.							# 禁用
	SELINUX=enforcing
	# SELINUXTYPE= can take one of three values:
	#     targeted - Targeted processes are protected,
	#     minimum - Modification of targeted policy. Only selected processes are protected.
	#     mls - Multi Level Security protection.
	SELINUXTYPE=targeted
	
	[root@localhost ~]#reboot				# 开启关闭SELinux后都要重启才会生效
	
	
	把策略改为enforcing后，在重启的时候会自动扫描硬盘上所有的文件，发现没有标签的文件会自动贴上标签，所以在重启的时候会出现等待的过程。
	每个文件贴了SELinux标签后，就说明每个文件的用途，就能被SELinux策略管理
	

实践：开启SELinux策略后，修改httpd端口
	
	[root@localhost ~]#cat /etc/selinux/config
	......省略
	SELINUX=enforcing								# 开启SELinux
	......省略
	
	[root@localhost ~]#reboot	
	
	[root@localhost ~]#yum -y install httpd
	
	[root@localhost ~]#systemctl enable --now httpd
	
	[root@localhost ~]#ss -ntl
	State      Recv-Q Send-Q        Local Address:Port          Peer Address:Port
	LISTEN     0      128                    [::]:80                    [::]:*			# 80 端口已打开
	......省略	
	
	[root@localhost ~]#curl 127.0.0.1:80			# 成功访问 httpd 服务
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html><head>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	......省略
	
	
	// 修改 httpd 的端口为 8899
	[root@localhost ~]#cat /etc/httpd/conf/httpd.conf 
	......省略
	#Listen 80
	Listen 8899		# 端口改为8899，不符合SELinux策略要求，SELinux策略已经预先定义了一些规范，比如只能使用一些固定端口，不允许使用其它端口
	......省略
	
	// 启动报错，提示使用"systemctl status httpd.service"或"journalctl -xe"查看详情
	[root@localhost ~]#systemctl restart httpd
	Job for httpd.service failed because the control process exited with error code. See "systemctl status httpd.service" and "journalctl -xe" for details.
	
	// 可以看到启动失败，没有启动SElinux前，端口想改就改，启动后，SELinux策略不允许使用其它端口
	[root@localhost ~]#journalctl -xe
	......省略
	-- The result is failed.
	Dec 01 13:04:14 localhost.localdomain systemd[1]: Unit httpd.service entered failed state.
	Dec 01 13:04:14 localhost.localdomain systemd[1]: httpd.service failed.
	Dec 01 13:04:14 localhost.localdomain polkitd[679]: Unregistered Authentication Agent for unix-process:1839:102185 ......省略
	
	// "messages"记录了启动失败的日志，启动失败的原因就是因为在设置的时候违反了SELinux的要求
	[root@localhost ~]#tail -f /var/log/messages
	......省略
	Dec  1 13:04:14 localhost systemd: httpd.service: main process exited, code=exited, status=1/FAILURE
	Dec  1 13:04:14 localhost systemd: Failed to start The Apache HTTP Server.
	Dec  1 13:04:14 localhost systemd: Unit httpd.service entered failed state.
	Dec  1 13:04:14 localhost systemd: httpd.service failed.
	
	
	在不重启的情况下启动/禁用SELinux:
		
		// 查看当前SELinux启动策略
		[root@localhost ~]#getenforce
		Enforcing
		
		// 临时修改SELinux启动策略，马上生效，不用重启
		[root@localhost ~]#setenforce 0			      # 0 表示 permissive，表示切换为 permissive，permissive表示只报警不阻止
		[root@localhost ~]#getenforce
		Permissive
	
		[root@localhost ~]#systemctl restart httpd
		
		[root@localhost ~]#ss -ntl
		State      Recv-Q Send-Q       Local Address:Port           Peer Address:Port
		LISTEN     0      128                   [::]:8899                   [::]:*				# 8899 已经端口已经打开
		......省略
		
		//"secure"日志中出现了警告信息
		[root@localhost ~]#tail -f /var/log/secure
		Dec  1 13:50:56 localhost polkitd[679]: Registered Authentication Agent for unix-process:2188:382425 (system bus name :1.33 [/usr/bin/pkttyagent --notify-fd 5 --fallback], object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8)
		Dec  1 13:50:56 localhost polkitd[679]: Unregistered Authentication Agent for unix-process:2188:382425 (system bus name :1.33, object path /org/freedesktop/PolicyKit1/AuthenticationAgent, locale en_US.UTF-8) (disconnected from bus)		
		
		// 成功访问httpd服务
		[root@localhost ~]#curl 127.0.0.1:8899
		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html><head>
		......省略

		// 临时切换为 enforcing
		[root@localhost ~]#setenforce 1			# 1 表示 enforcing，
		[root@localhost ~]#getenforce 1
		Enforcing
		
		[root@localhost ~]#curl 127.0.0.1:8899	# 访问httpd服务正常
		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html><head>
		......省略
		
		// 重启报错
		[root@localhost ~]#systemctl restart httpd
		ob for httpd.service failed because the control process exited with error code. See "systemctl status httpd.service" and "journalctl -xe" for details.
	
		// 8899 端口没有被打开，说明SELinux策略生效
		[root@localhost ~]#ss -ntl
		State      Recv-Q Send-Q       Local Address:Port         Peer Address:Port


总结：
	SELinux启用/禁用SELinux，临时生效，不用重启：
		setenforce 0		// 0表示permissive，只报警，但是不限制使用，相当于禁用 SELinux
		setenforce 1		// 1表示enforcing，启动SELinux，强制限制 
	
	SELinux启用/禁用SELinux，永久生效，需要重启：
		修改"/etc/selinux/config"配置文件
		
	SELinux启动后，设置就比较麻烦。比如不能随便换端口，需要改SELinux的端口标签，这就是为什么SELinux没有普遍使用的原因
	
	禁用SELinux策略的方法：
		(1) 将配置文件"/etc/selinux/config"中的 SELINUX 设置为 disabled
		(2) 重启系统。如果修改配置文件后不想重启系统，可以使用"setenforce 0"的方式让禁用SELinux临时生效。
			一般来讲，在服务器装好后，到线上生产环境之前都要习惯性重启一下，上线后就不再重启，将持续运行很长时间！
		
	在国内的生产环境中会习惯性禁用 SELinux，一般作为系统初始化工作之一，因为SELinux策略很麻烦。注意：并不是每个公司都禁用 SELinux ！
		
	SELinux策略并不是很通用，ubuntu就不用!
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


扩展：
	同步时间时，不会同步时区！
	
	// 显示utc时间
	date -u  



