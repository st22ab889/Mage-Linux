
3 ssh服务工作原理和ssh客户端使用
	
	ssh: secure shell protocol, 22/tcp, 安全的远程登录，实现加密通信，代替传统的 telnet 协议
	
	具体的软件实现：
		OpenSSH：ssh协议的开源实现，CentOS 默认安装
		dropbear：另一个ssh协议的开源项目的实现
	SSH 协议版本
		v1：基于CRC-32做MAC，不安全；man-in-middle
		v2：双方主机协议选择安全的MAC方式，基于DH算法做密钥交换，基于RSA或DSA实现身份认证
	
	
3.1 ssh 公钥交换原理
	1)客户端发起链接请求
	2)服务端返回自己的公钥，以及一个会话ID（这一步客户端得到服务端公钥）。 # 这个过程有风险，要确保服务器的公钥是真实的，这里没有使用到证书机制，只能人为确保！
	3)客户端生成密钥对(客户端临时生成)
	4)客户端用自己的公钥异或会话ID，计算出一个值Res，并用服务端的公钥加密
	5)客户端发送加密后的值到服务端，服务端用私钥解密，得到Res
	6)服务端用解密后的值Res异或会话ID，计算出客户端的公钥（这一步服务端得到客户端公钥）
	7)最终：双方各自持有三个秘钥，分别为自己的一对公、私钥，以及对方的公钥，之后的所有通讯都会被加密
	
	
	// 每个安装ssh的主机都自带了公钥和密钥
	[root@localhost ~]#ll /etc/ssh
	total 604
	-rw-r--r--. 1 root root     581843 Aug  9  2019 moduli
	-rw-r--r--. 1 root root       2276 Aug  9  2019 ssh_config
	-rw-------. 1 root root       3907 Aug 21  2021 sshd_config
	-rw-r-----. 1 root ssh_keys    227 Aug 20  2021 ssh_host_ecdsa_key			# ECDSA 算法的私钥,经过了base64编码
	-rw-r--r--. 1 root root        162 Aug 20  2021 ssh_host_ecdsa_key.pub		# ECDSA 算法的公钥,经过了base64编码
	-rw-r-----. 1 root ssh_keys    387 Aug 20  2021 ssh_host_ed25519_key		# ed25519 算法的私钥,经过了base64编码
	-rw-r--r--. 1 root root         82 Aug 20  2021 ssh_host_ed25519_key.pub	# ed25519 算法的公钥,经过了base64编码	
	-rw-r-----. 1 root ssh_keys   1679 Aug 20  2021 ssh_host_rsa_key			# rsa 算法的私钥,经过了base64编码
	-rw-r--r--. 1 root root        382 Aug 20  2021 ssh_host_rsa_key.pub		# rsa 算法的公钥,经过了base64编码
	
	
	[root@localhost ~]#ssh 192.168.32.101
	The authenticity of host '192.168.32.101 (192.168.32.101)' can't be established.
	ECDSA key fingerprint is SHA256:TcIIiLI+VCMoPspFCqRZHywv50EB/CMwDoIk6RxTB50.	# 对方公钥的sha256算法哈希值，并经过了base64编码，需要自己确认
	ECDSA key fingerprint is MD5:43:cb:24:f0:02:26:58:6c:cf:1b:56:67:e5:50:be:30.	# 对方公钥的MD5算法的哈希值，需要自己确认
	Are you sure you want to continue connecting (yes/no)?
	......省略


	如果确认ssh服务器公钥的身份？
		方式1：从登录信息可以得出，对方使用的是 ECDSA 这种算法的公钥，并且经过哈希SHA256算法得到摘要(指纹)，再把(指纹)进行base64编码！
			(1).登录远程主机，找到ecdsa算法的公钥，这个公钥经过了base64编码，所以首先要经过base64解码得到公钥本身，
				然后使用哈希SHA256算法得到公钥的摘要(指纹)，再把(指纹)进行base64编码
			(2).将得到的结果和登录时出现的"ECDSA key fingerprint is SHA256"进行对比，如果值一样，说明远程主机身份真实
			
		方式2：远程主机自己登录自己，出现的提示信息和远程登录时出现的提示信息一样，说明主机身份真实
			
			
SSH的known_hosts文件：
	哪个用户使用SSH登录，known_hosts文件就在这个用户家目录下的".ssh"目录中,比如root用户登录，这个文件的位置就在"/root/.ssh/known_hosts"
	known_hosts文件在用户第一次登录主机的时候自动生成
	
	当使用SSH登录时，如果第一次登录某个远程主机，第一次登录主机时会出现提示信息，显示对方公钥的摘要的信息。登录成功后会保存远程主机公钥到这个文件！
	如果第二次重复登录，不再提示，直接提示输入密码！这样的好处是，后面再连接的时候，能识别出假冒主机
	
	// 直接提示输入密码，说明之前已经用ssh登录过
	[root@localhost ~]#ssh 192.168.32.101
	root@192.168.32.101's password:
	
	// 如果删除known_hosts这个文件，或删除这个文件中对应的远程主机公钥，再次连接对应的远程主机的时候又会显示远程主机的公钥的摘要的信息
	[root@localhost ~]#ls /root/.ssh/known_hosts
	/root/.ssh/known_hosts	


如何冒充远程主机：
	方式1：拿到目标主机的公钥放在冒充的主机上
	方式2：拿到目标主机的私钥放在冒充的主机上，然后使用命令"systemctl restart sshd"重新开启SSH服务
	
	
3.2 openssh 服务
	OpenSSH是SSH （Secure SHell） 协议的免费开源实现，一般在各种Linux版本中会默认安装，基于C/S结构
	Openssh软件相关包：
		openssh
		openssh-clients
		openssh-server
	
	
	[root@localhost ~]#rpm -ql openssh-server
	/etc/pam.d/sshd
	/etc/ssh/sshd_config			# SSH服务端的配置文件
	......省略
	
	[root@localhost ~]#rpm -ql openssh-clients
	/etc/ssh/ssh_config				# SSH客户端的配置文件
	......省略


3.3 客户端 ssh
	ssh命令是ssh客户端，允许实现对远程系统经验证地加密安全访问
	当用户远程连接ssh服务器时，会复制ssh服务器/etc/ssh/ssh_host*key.pub文件中的公钥到客户机的~/.ssh/know_hosts中。下次连接时会自动匹配相对应的私钥，不能匹配将拒绝连接
	ssh客户端配置文件： /etc/ssh/ssh_config
	
	
	客户端配置文件解析：
		// 配置文件中的选项可以在命令中使用"-o"选项指定
		[root@centos8 ~]#cat /etc/ssh/ssh_config
		......省略
		#   StrictHostKeyChecking ask			 // 该值默认为 ask，如果设置为no，则在首次登录时不显示"检查远程主机公钥的摘要"提示
		#   Port 22								 // 指定远程主机端口，默认端口为22
		Include /etc/ssh/ssh_config.d/*.conf	 // 这项centos8上才有, 只要把配置文件放到"/etc/ssh/ssh_config.d/"目录下，并且以".conf"结尾，配置一样生效
		......省略
		
		
	客户端命令格式：	
		ssh [user@]host [COMMAND]
		ssh [-l user] host [COMMAND]
		
		常见选项：
			-p port #远程服务器监听的端口
				ssh -p 9999 192.168.32.100
			-b #指定连接的源IP
			-v #调试模式
			-C #压缩方式，作用是压缩数据，节约带宽		
			-X #支持x11转发，把远程机器的图形界面在本地机器上显示(比较重要的选项)
			-t #强制伪tty分配，如：ssh -t remoteserver1 ssh -t remoteserver2 ssh remoteserver3
			-o option # 如：-o StrictHostKeyChecking=no
				ssh -o StrictHostKeyChecking=no 192.168.32.100
			-i <file> #指定私钥文件路径，实现基于key验证，默认使用文件： ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519，~/.ssh/id_rsa等	
		
		
实践1：
	假如有A(10.10.0.1)、B(10.10.0.2)、C(10.10.0.3)、D(10.10.0.4)四台机器，D机器只能通过C连，C机器只能通过B连，B只能通过A连，A如何连接到B？
	
	方式1：下面命令都是在A机器上操作
		ssh 10.10.0.2	// 登录到B
		ssh 10.10.0.3	// 登录到C
		ssh 10.10.0.4	// 登录到D，B和C机器相当于跳板机
		
	方式2：使用 -t 选项，一条命令登录到 D 机器
		ssh -t 10.10.0.2 ssh -t 10.10.0.3  ssh 10.10.0.4
		
		
实践2：在登录时就运行命令，运行完成后会自动退出SSH登录
	
	// -o 指定选项；-p 指定远程主机端口，不指定默认为22；后面跟上要运行的命令，实现登录就运行该命令，但是运行完后就退出远程登录
	[root@localhost ~]#ssh -o StrictHostKeyChecking=no -p 22 192.168.32.101 hostname -I
	Warning: Permanently added '192.168.32.101' (ECDSA) to the list of known hosts.
	root@192.168.32.101's password:
	192.168.32.101
	[[root@localhost ~]# hostname -I
	192.168.32.100


实践3：在远程主机运行本地shell脚本，运行完成后会自动退出SSH登录

	[root@localhost ~]#cat systeminfo.sh
	#!/bin/bash
	RED="\E[1;31m"
	GREEN="\E[1;32m"
	END="\E[0m"
	echo -e "$GREEN----------------------Host systeminfo--------------------$END"
	echo -e "HOSTNAME: $RED`hostname`$END"
	echo -e "IPADDR: $RED` ifconfig eth0|grep -Eo '([0-9]{1,3}\.){3}[0-9]
	{1,3}' |head -n1`$END"
	echo -e "OSVERSION: $RED`cat /etc/redhat-release`$END"
	echo -e "KERNEL: $RED`uname -r`$END"
	echo -e "CPU: $RED`lscpu|grep 'Model name'|tr -s ' '|cut -d : -f2`$END"
	echo -e "MEMORY: $RED`free -h|grep Mem|tr -s ' ' : |cut -d : -f2`$END"
	echo -e "DISK: $RED`lsblk |grep '^sd' |tr -s ' ' |cut -d " " -f4`$END"
	echo -e "$GREEN---------------------------------------------------------$END"	
	
	
	[root@localhost ~]#ssh 192.168.32.101 /bin/bash < systeminfo.sh
	root@192.168.32.101's password:
	----------------------Host systeminfo--------------------
	HOSTNAME: localhost.localdomain
	IPADDR: 192.168.32.1
	OSVERSION: CentOS Linux release 7.9.2009 (Core)
	KERNEL: 3.10.0-1160.el7.x86_64
	CPU:  Intel(R) Xeon(R) CPU E3-1231 v3 @ 3.40GHz
	MEMORY: 3.7G
	DISK: 40G
	---------------------------------------------------------
	[root@localhost ~]#hostname -I
	192.168.32.100


实践4：利用windows 显示 Linux 的图形工具
	在windows中，图形界面和操作系统是绑定在一起的，在linux里，图形界面并不属于操作系统的固定组件，只是一个软件而已！
	
	在linux里要实现图形界面，需要装 X server 组件，X server 组件使用的是 X protocol，X server 组件需要配合 X client，X client 就是平时用的图形化客户端，比如 firefox。
	X client 其实其实利用 X protocol 把指令和数据传递给 X server，X server再连接显卡，然后显示把图形渲染出来。
	
	X protocol 可以基于tcp/ip协议，也就是说 X server 和 X client 可以分别属于不同的主机！当前使用的 X protocol 版本是 X11！
	X server 并不是在linux上独有，X server也有window版本，也就是说在linux上运行 X client，利用 X protocol 发给windows上的 X server，就可以在windows上显示linux的图形界面！
	windows上都可以实现 X server 有 XManager、MobaXterm等！
	
	使用场景：Linux中有些工具安装的时候本身就是图形界面安装，比如 oracle 数据库
	
	操作步骤：
		// linux上安装 firefox 以及x11组件
		[root@centos8 ~]#yum install xorg-x11-xauth xorg-x11-fonts-* xorg-x11-font-utils xorg-x11-fonts-Type1 firefox -y
		
		// 在windows上使用mobaXtrem的X server 显示 Linux 的图形工具，详见PDF！
		
		// 在windows上使用xshell的X server 显示 Linux 的图形工具，详见PDF！
			export DISPLAY=Windows的IP:0.0	# 例如：export DISPLAY=10.0.0.1:0.0 表示将图形界面发送到IP为"10.0.0.1"的这个主机！"0.0"表示Xmanager的窗口标号，是什么就写什么
		
	
3.4 其它ssh客户端工具	
	
scp命令：
	scp [options] SRC... DEST/
	
	常用选项：
		-C 压缩数据流
		-r 递归复制
		-p 保持原文件的属性信息
		-q 静默模式
		-P PORT 指明remote host的监听的端口
	
	// 将 test 目录拷贝到目标主机的data目录下，-r 拷贝文件见
	scp  -r test/ 10.0.0.10:/data 

	
rsync命令：此工具来自于rsync包
	rsync工具可以基于ssh和rsync协议实现高效率的远程系统之间复制文件，使用安全的shell连接做为传输方式，比scp更快，基于增量数据同步，即只复制两方不同的文件，
	如果数据一样，不再重传，适合更新数据库，同步数据，效率高！建议使用rsync替代scp！
	
	// 注意：目录后面是否跟"/"有区别
	rsync -av /etc ServerIP:/tmp 			# 复制目录和目录下文件
	rsync -av /etc/ ServerIP:/tmp 			# 只复制目录下文件
	
	常用选项：
		-n 模拟复制过程
		-v 显示详细过程
		-r 递归复制目录树
		-p 保留权限
		-t 保留修改时间戳
		-g 保留组信息
		-o 保留所有者信息
		-l 将软链接文件本身进行复制（默认）
		-L 将软链接文件指向的文件复制
		-u 如果接收者的文件比发送者的文件较新，将忽略同步
		-z 压缩，节约网络带宽
		-a 存档，相当于-rlptgoD，但不保留ACL（-A）和SELinux属性（-X）
		--delete 源数据删除，目标数据也自动同步删除		
	
	// 示例
	rsync -auv --delete /data/test 10.0.0.7:/data
	
	
sftp命令：
	交互式文件传输工具，用法和传统的ftp工具相似，利用ssh服务实现安全的文件上传和下载使用ls cd mkdir rmdir pwd get put等指令，可用？或help获取帮助信息
	sftp 是交互式命令工作，用的不多，了解！
	
	[root@localhost ~]#sftp 192.168.32.101
	root@192.168.32.101's password:
	Connected to 192.168.32.101.
	sftp> ls													# 命令在远程主机运行
	a.txt              
	sftp> !ls													# 命令前加"!"号表示在本机运行
	copy_file_script
	sftp> put copy_file_script									# put 表示上传文件
	Uploading copy_file_script to /root/copy_file_script
	copy_file_script                                                                      100%  164     4.0KB/s   00:00
	sftp> ls
	a.txt              copy_file_script      
	sftp> get a.txt												# get 表示下载文件
	Fetching /root/a.txt to a.txt
	/root/a.txt                                                                           100%    2     1.3KB/s   00:00
	sftp> !ls
	a.txt             copy_file_script   
	sftp> exit
	[root@localhost ~]#
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

4 ssh基于key验证
	ssh服务登录的常用验证方式
		用户/口令
		基于密钥，不用再输入密码，批量操作主机方便
	
	基于用户和口令登录验证
		(1). 客户端发起ssh请求，服务器会把自己的公钥发送给用户
		(2). 用户会根据服务器发来的公钥对密码进行加密
		(3). 加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功
	
	基于密钥的登录方式
		(1). 首先在客户端生成一对密钥（ssh-keygen）
		(2). 并将客户端的公钥ssh-copy-id 拷贝到服务端
		(3). 当客户端再次发送一个连接请求，包括ip、用户名
		(4). 服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串
		(5). 服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端
		(6). 得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串(用服务器的公钥加密)发送给服务端
		(7). 服务端接受到客户端发来的字符串后(用私钥解密)，跟之前的字符串进行对比，如果一致，就允许免密码登录
	
	
4.1 基于密钥的登录方式（重要：必须掌握）

	// 在客户端生成密钥对
	[root@localhost ~]#ssh-keygen
	Generating public/private rsa key pair.
	Enter file in which to save the key (/root/.ssh/id_rsa):		# 生成的密钥对默认保存在 "/用户家目录/.ssh/"
	Enter passphrase (empty for no passphrase):						# 给私钥加密的口令，不输入任何字符表示不添加口令
	Enter same passphrase again:									# 确认口令
	Your identification has been saved in /root/.ssh/id_rsa.
	Your public key has been saved in /root/.ssh/id_rsa.pub.
	The key fingerprint is:
	SHA256:pmasdF4EG0XiCuhHTldXGUQhdKF7BBcT/lXd3MtRtTM root@localhost.localdomain
	The key's randomart image is:
	+---[RSA 2048]----+
	|      .o+=+&B  .X|
	| .   ..o. B..  .B|
	|. .o .+  . o  .Eo|
	|. +... +  o . .oo|
	| . o. . S. . .   |
	|  .  . +  .      |
	|    . * .        |
	|   . * .         |
	|    . .          |
	+----[SHA256]-----+
	[root@localhost ~]#ll /root/.ssh/
	total 12
	-rw------- 1 root root 1679 Nov 28 15:51 id_rsa					# 生成的私钥
	-rw-r--r-- 1 root root  408 Nov 28 15:51 id_rsa.pub				# 生成的公钥
	-rw-r--r-- 1 root root  176 Nov 28 12:13 known_hosts
	
	// 将公钥拷贝到目标主机，默认拷贝"/用户家目录/.ssh/"目录下的公钥，也可以使用 -i 指定公钥文件路径
	[root@localhost ~]#ssh-copy-id root@192.168.32.101
	/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"
	/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
	/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
	root@192.168.32.101's password:

	Number of key(s) added: 1

	Now try logging into the machine, with:   "ssh 'root@192.168.32.101'"
	and check to make sure that only the key(s) you wanted were added.

	// 实现无密码登录远程主机
	[root@localhost ~]#ssh 192.168.32.101
	Last login: Sun Nov 27 22:59:43 2022 from 192.168.32.100
	
	// 远程主机的"authorized_keys"文件中保存了客户端的公钥
	[root@localhost ~]#ll /root/.ssh/authorized_keys
	-rw------- 1 root root 408 Nov 28 15:57 /root/.ssh/authorized_keys
	
	// 退出远程主机登录
	[root@localhost ~]#exit
	logout
	Connection to 192.168.32.101 closed.


实践1：就像运行本机命令一样，运行远程主机的命令
	
	
	// 只运行命令，不登录
	[root@localhost ~]#ssh 192.168.32.101 hostname -I
	192.168.32.101
	
	// 复制 systeminfo.sh 文件到远程主机的根目录下
	[root@localhost ~]#scp systeminfo.sh 192.168.32.101:/
	systeminfo.sh                                                                         100%  982   268.1KB/s   00:00	
	
	说明：
		只要是基于ssh验证，都可以通过这种方式 远程运行命令 和 传输文件到远程主机，安全又方便
		企业中有大量服务器，都会把基于key的验证配置号！
	
	
实践2：假如有100台机器，如何把客户端的公钥拷贝到100台机器上？
	方案1：直接使用"ssh-copy-id"命令会提示输入密码，虽然可以使用expect，但不仅要安装expect，还要写expect格式脚本
	方案2：可以使用 sshpass 解决，sshpass是自动登录ssh工具，由EPEL源提供，ssh登陆不能在命令行中指定密码。sshpass的出现，解决了这一问题。
		   sshpass用于非交互SSH的密码验证，一般用在sh脚本中，无须再次输入密码（本机known_hosts文件中有的主机才能生效）。
		   sshpass支持 -p 参数指定明文密码，然后直接登录远程服务器，它支持密码从命令行、文件、环境变量中读取。
	
	sshpass 格式：
		sshpass [option] command parameters
		常见选项：
			-p password #后跟密码它允许你用 -p 参数指定明文密码，然后直接登录远程服务器
			-f filename #后跟保存密码的文件名，密码是文件内容的第一行
			-e 			#将环境变量SSHPASS作为密码
	
	// 安装 sshpass
	yum -y install sshpass
	
	// 直接登录到远程主机，不用提示输入密码，没有询问过程
	sshpass -p admin000 ssh -o StrictHostKeyChecking=no root@192.168.32.102
	
	// 如果不指定用户默认root用户身份登录并运行命令，命令运行完成后自动退出
	sshpass -p admin000 ssh -o StrictHostKeyChecking=no 192.168.32.103 hostname -I
	
	// 拷贝文件
	sshpass -p admin000 scp systeminfo.sh 192.168.32.104:/
	
	// 拷贝公钥到远程主机，不用输密码，交互式变为非交互式，这样就可以把命令写到脚本中，实现自动化
	sshpass -p admin000 ssh-copy-id -o StrictHostKeyChecking=no root@192.168.32.101
	
	
	总结：
		sshpass 功能是把ssh的交互式提交口令变成非交互式
		sshpass 只能做到提交口令，做不到回答yes/no，需要提前把对方主机的公钥加到 known_hosts 文件中。或者使用"-o StrictHostKeyChecking=no"来设置不要询问
		
	
实践3：
	基于key验证是单向验证，但是在一个集群服务中，往往机器间都要实现基于key验证，比如redis集群，如果集群中有三台机器，就要做6次基于key验证的工作
	
	假如现在有三台机器192.168.32.110、192.168.32.111、192.168.32.112，三台机器的密码都为 admin123，实现过程如下：
		ssh-keygen										// 在 192.168.32.110 主机上生成key
		ssh-copy-id 127.0.0.1							// 把公钥放在 192.168.32.110 自己这台机器上
		rsync -av /root/.ssh 192.168.32.111:/root		// 把这个目录同步到 192.168.32.111 主机
		rsync -av /root/.ssh 192.168.32.112:/root		// 把这个目录同步到 192.168.32.112 主机
		
	原理：
		所有主机都公用一个公钥私钥对，并且自己信任自己，这样就实现了多台主机之间的彼此互通！	
		缺点是有些不安全，一旦有人拿到root密码，就可以操作集群中的任何主机
		
	解决不安全的问题：
		ssh-keygen -p				// 给私钥设口令
		ssh 192.168.32.111			// 每次登录集群中的主机的时候就需要输入私钥密码
		
	验证代理(authentication agent):保密解密后的密钥，口令就只需要输入一次，在GNOME中，代理被自动提供给root用户
		ssh-agent bash				// 启用代理,这个代理能记住密码，就不用再输入私钥密码
		ps aux						// ssh-agent 实际上是一个后台运行的程序
		// 钥匙通过命令添加给代理，也就是说把私钥的密码托管给这个代理。
		ssh-add						// 注意这是临时保存，对本次会话有效。退出登录再重新登录，登录集群中的主机还是需要私钥密码或者再次把密码托管给代理
		ssh 192.168.32.111			// 不用输入密码就能登录

	总结：
		只要保证私钥文件的安全，就破解不了。
		如果私钥丢失而且私钥又没有加密码，那就能登录集群内的主机了！
		工作中会把各个服务器的基于key验证的配置做好，远程管理不用输密码，特别方便，适用于将来批量管理，实现自动化运维！
	
实践4：在xshell中也能做基于key的验证
	
	(1) 工具 --> 新建用户密钥生成向导  --> 下一步 --> 完成。	注意：这个过程可以给私钥加密，也可以把公钥导出来保存
	(2) 把公钥保存到目标主机的"/root/.ssh/authorized_keys"文件中(如果没有的化，可以新建一个)
	(3) xshell中新建会话，填上目标主机的ip和端口，在"用户身份验证"输入用户名(登录远程主机使用的用户名)， 方法中选择"Public Key"，点设置，选择刚刚生成的私钥。
	    如果私钥有密码，还要输入私钥的密码！
	(4) 如果希望在其它机器上也使用这个key登录主机，可以把私钥导出来，如果要用其它主机登录远程主机，就把私钥拷贝到这几主机上就能连到远程主机。
		导出私钥方式：工具 --> 用户密钥管理者
	
	总结：
		只要私钥不丢就能连接到远程主机
		银行的U盾里面实际上保存的就是私钥，舒勇U盾需要输入密码，这个密码就是私钥的密码
		
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5 ssh高级用法及自动运维工具(非重点)

5.1 ssh 高级应用
	SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据。此外，SSH 还能够将其他 TCP 端口的网络数据通过 SSH 连接来转发，并且自动提供了相应的加密及解密服务。
	这一过程也被叫做“隧道”（tunneling），这是因为 SSH 为其他 TCP 链接提供了一个安全的通道来进行传输而得名。
	例如，Telnet，SMTP，LDAP 这些 TCP 应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果工作环境中的防火墙限制了一些网络端口的使用，
	但是允许 SSH 的连接，也能够通过将 TCP 端口转发来使用 SSH 进行通讯

	SSH 端口转发能够提供两大功能：
		加密 SSH Client 端至 SSH Server 端之间的通讯数据
		突破防火墙的限制完成一些之前无法建立的 TCP 连接


SSH 本地端口转发
	命令格式:
		ssh -L localport:remotehost:remotehostport sshserver
		选项：
			-f 后台启用
			-N 不打开远程shell，处于等待状态
			-g 启用网关功能
		    -L 打开一个本地端口。您发送到该端口的所有内容均通过ssh连接放置，并通过服务器保留。相当于 正向代理！
			   例如，ssh -L 4444:google.com:80如果http://localhost:4444在浏览器中打开，则实际上会看到Google的页面。
			-R 表示 反向代理
			-D 表示 socks5 代理
	
	场景：
		-------------------                                        --------------------------------------------
		| SSH Client      |                                        |                    公司内网              |         
		| port:9527	      | <======> Internet <======> 防火墙 <====|====>SSH Server <======> http Server      |
		| 126.182.120.99  |										   |	192.168.32.101		 192.168.32.102   |
		-------------------										   --------------------------------------------

	把http协议用ssh封装，传到中间的ssh服务器，中间的服务器再把SSH协议解开，解开后还原成http协议再发送给目标主机。
	目标主机的数据通过http协议发送到中间的SSH服务器，SSH服务器将http协议封装，发送给客户端！
		
		// 当访问本机的9527的端口时，被加密后转发到SSHServer的ssh服务，再解密被转发到HttpServer:80
		ssh -fNL 9527:192.168.32.102:80 192.168.32.101				# 这里9527端口可以自由指定，要指定一个没有服务用的端口，运行这个命令后将会打开这个端口
		curl 127.0.0.1:9527
	
	理论上任何一种协议都可以用SSH封装，但一般是用来封装不安全的协议，比如https
	这种场景有一个缺陷，公司的防火墙规则，SSH可能不能直接连接到公司内网，这种方案有局限性！
	
	
SSH远程端口转发
	场景：这个场景中，SSH Client 和 SSH Server 对换了位置
		-------------------                                        --------------------------------------------
		| SSH Server      |                                        |                    公司内网              |         
		| port:9527	      | <======> Internet <======> 防火墙 <====|====> SSH Client <======> http Server     |
		| 126.182.120.99  |										   |	192.168.32.101		 192.168.32.102   |
		-------------------										   --------------------------------------------
				 \
				  \
				   \
	              个人PC
				  
	原理：从外网连接到公司内网，防火墙会拦截。但是从公司内网连接外网，防火墙不会拦截！
	要求：有一台外网的服务器专门用来做 SSH Server，要在公司内网的 SSH Client 运行命令！
	命令：
		ssh -R SSHServerPort:RemoteHost:RemoteHostPort SSHServer				
		说明：
			-R 表示 反向代理
	场景：如果在外面出差的人有连接需求，就可以使用 SSH Client 连接到 SSH Server，然后出差的人连接到 SSH Server
	示例：
		// 注意：这个命令是在内网中的"SSH Client"上运行
		ssh -R 9527:192.168.32.102:80 -Nf 126.182.120.99		# 这里9527端口可以自由指定，要指定一个没有服务用的端口，运行这个命令后将会打开这个端口
		
		// 用户访问 SSH Server
		curl 126.182.120.99:9527
		

SSH动态端口转发	

	方法1：
		场景
			-----------------------------------------------
			|	-------------------                       |							 ------------------	         -----------------
			|	| SSH Client      |                       |                          | 自己购买的VPS  |          |  			 |          
			|	| port:9527	      | <======> Internet <===|===> GFW(防火墙) <======> | SSH Server     |  <======>|    其它网络   |      
			|	| 192.168.1.10    |						  |			            	 | 126.182.120.99 |          | 				 |
			|	-------------------						  |			       		     ------------------          -----------------
			|			/ \                               |                          
			|		   /   \                              |
			|		  /     \                             |
			|        PC1    PC2                           |
			-----------------------------------------------
		
		实现：
			// 在"192.168.1.10" 这台主机上运行以下命令， -D 表示 socks5 代理
			ssh -fND 9527 126.182.120.99	# 这里9527端口可以自由指定，要指定一个没有服务用的端口，运行这个命令后将会打开这个端口
			
			// 在"192.168.1.10" 这台主机上打开浏览器，配置代理，代理IP为127.0.0.1，代理端口为 9527 即可
			
			// 对于PC1和PC2来说，打开浏览器，配置代理，代理IP为 192.168.1.10，代理端口为 9527 即可。前提是"192.168.1.10"和 PC1、PC2在同一网段中     
		
		
	方法2：
		场景：
			----------------------							------------------	        -----------------
			|                    |                          | 自己购买的VPS  |          |  				|          
			|       Internet <===|===> GFW(防火墙) <======> | SSH Server     |  <======>|    其它网络  	|      
			|    	 /  \        |                          | 126.182.120.99 |			|     			|
			|       /    \       |							------------------			-----------------
			|      /      \      |
			|     PC1     PC2    |
			| 10.0.0.8  10.0.0.9 |
			----------------------			      	           
		实现：
			// 在PC1和PC2上运行
			ssh -gfND 9527 126.182.120.99
			
			// 在浏览器中配置代理，代理IP为 126.182.120.99，代理端口为 9527 即可！
	
	
5.2 ssh服务器配置
	服务器端：sshd
	服务器端的配置文件: /etc/ssh/sshd_config
	服务器端的配置文件帮助：man 5 sshd_config
	
常用参数：
	Port 							#生产建议修改，连外网一定要改，不改的话很容易受到攻击
	ListenAddress ip				#有些服务器有多个IP，有些IP从外网可以访问，有些IP从内网访问，为了安全可以把SSH服务绑定在内网IP上，这样只能通过内网IP连接SSH
	LoginGraceTime 2m
	PermitRootLogin yes 			#ubuntu默认不允许root远程ssh登录
	StrictModes yes 				#检查.ssh/文件的所有者，权限等
	MaxAuthTries 6 					#pecifies the maximum number of authentication
	attempts permitted per connection. Once the number of failures reaches half this
	value, additional failures are logged. The default is 6.
	MaxSessions 10 					#同一个连接最大会话
	PubkeyAuthentication yes 		#基于key验证，比密码更安全
	PermitEmptyPasswords no 		#空密码连接
	PasswordAuthentication yes 		#基于用户名和密码连接，关掉就不支持用户名和密码登录，只能基于key验证，这样更安全
	GatewayPorts no
	ClientAliveInterval 10 			#单位:秒
	ClientAliveCountMax 3 			#默认3
	UseDNS yes 						#提高速度可改为no，可以让连接速度加快
	GSSAPIAuthentication yes 		#提高速度可改为no，可以让连接速度加快
	MaxStartups 					#未认证连接最大值，默认值10，意思是限制并行认证ssh客户端数量.注意是认证的数量,不是登录的数量
	Banner /path/file
	#以下可以限制可登录用户的办法：
	AllowUsers user1 user2 user3	#允许哪些用户登录
	DenyUsers user1 user2 user3		#不允许哪些用户登录
	AllowGroups g1 g2				#允许哪些组登录
	DenyGroups g1 g2				#不允许哪些组登录


范例1：设置 ssh 空闲60s 自动注销
	Vim /etc/ssh/sshd_config
	ClientAliveInterval 60
	ClientAliveCountMax 0
	
	// 修改后重新启动SSH服务
	Service sshd restart
	
	#注意：新开一个连接才有效
	
范例2：解决ssh登录缓慢的问题	
	vim /etc/ssh/sshd_config
	UseDNS no
	GSSAPIAuthentication no
	
	systemctl restart sshd
	
范例3：在 ubuntu 上启用 root 远程ssh登录	
	#修改sshd服务配置文件
	vim /etc/ssh/sshd_config
	#PermitRootLogin prohibit-password 注释掉此行
	PermitRootLogin yes 修改为下面形式
	
	systemctl restart sshd

ssh服务的最佳实践
	建议使用非默认端口
	禁止使用protocol version 1
	限制可登录用户
	设定空闲会话超时时长
	利用防火墙设置ssh访问策略
	仅监听特定的IP地址
	基于口令认证时，使用强密码策略，比如：tr -dc A-Za-z0-9_ < /dev/urandom | head -c 12|
	xargs
	使用基于密钥的认证
	禁止使用空密码
	禁止root用户直接登录
	限制ssh的访问频度和并发在线数
	经常分析日志

5.3 ssh 其它相关工具

挂载远程ssh目录 sshfs：由EPEL源提供，目前CentOS8 还没有提供，可以利用ssh协议挂载远程目录

	[root@centos7 ~]#yum install fuse-sshfs
	// 利用SSH协议进行挂载
	[root@centos7 ~]#sshfs 10.0.0.8:/data /mnt				# 表示把"10.0.0.8"这个主机的"/data"目录挂载到当前主机的"/mnt"目录上
	[root@centos7 ~]#df /mnt
	Filesystem 1K-blocks Used Available Use% Mounted on
	10.0.0.8:/data 52403200 398576 52004624 1% /mnt


轻量级自动化运维工具 pssh
	轻量级自动化运维意思就是管理少量主机(比如几十台)，批量操作主机，比如改口令、禁用linux、装软件等
	
	EPEL源中提供了多个自动化运维工具：
		pssh：基于python编写，可在多台服务器上执行命令的工具，也可实现文件复制，提供了基于ssh和scp的多个并行工具
		pdsh：Parallel remote shell program，是一个多线程远程shell客户端，可以并行执行多个远程主机上的命令。 
			  可使用几种不同的远程shell服务，包括rsh，Kerberos IV和ssh
		mussh：Multihost SSH wrapper，是一个shell脚本，允许使用命令在多个主机上通过ssh执行命令。
			  可使用ssh-agent和RSA/DSA密钥，以减少输入密码  
	
	pssh 命令批量管理主机的前提是：先把基于key的验证做好！
	pssh 命令选项如下：
		-H：主机字符串，内容格式”[user@]host[:port]”
		-h file：主机列表文件，内容格式”[user@]host[:port]”
		-A：手动输入密码模式
		-i：每个服务器内部处理信息输出
		-l：登录使用的用户名
		-p：并发的线程数【可选】
		-o：输出的文件目录【可选】
		-e：错误输出文件【可选】
		-t：TIMEOUT 超时时间设置，0无限制【可选】
		-O：SSH的选项
		-P：打印出服务器返回信息
		-v：详细模式
		--version：查看版本
	
	示例：
		// -H 主机IP， -i 返回远程主机运行命令后的结果，"hostname -i"远程主机需要运行的命令
		pssh -H 192.168.32.101 -i hostname -i
		
		// 如果有多台主机，要用双引号把多台主机的IP引起来
		pssh -H "192.168.32.101 192.168.32.102 192.168.32.103" -i hostname -i
		
		// 批量在主机上创建文件
		pssh -H "192.168.32.101 192.168.32.102 192.168.32.103" touch /data/abc.txt
		pssh -H "192.168.32.101 192.168.32.102 192.168.32.103" -i ls -l /data/abc.txt
		
		
		// 可以把要管理的主机的IP列在一个文件中
		cat host.txt
		192.168.32.101
		192.168.32.102 
		192.168.32.103
		
		// -h 从文件中获取主机的IP
		pssh -h host.txt -i hostname -i
		
		
		
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>





