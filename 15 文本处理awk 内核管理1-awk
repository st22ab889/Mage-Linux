
1 文本处理三剑客之awk基本用法
	
	awk 主要用来格式输出，基本功能就是把文件内容取列处理，取列处理的逻辑和grep、sed很像，也是逐处理！
	awk 有一个特性，把读入一行按照一定的条件或指定的规范分割为列，分割列的时候可以指定分隔符！分割开以后，就可以用program(awk语言)取出需要的数据！
	
1.1 awk 工作原理和基本用法说明
	awk：Aho, Weinberger, Kernighan，报告生成器，格式化文本输出，GNU/Linux发布的AWK目前由自由软件基金会（FSF）进行开发和维护，通常也称它为 GNU AWK
	
	有多种版本：
		AWK：原先来源于 AT & T 实验室的的AWK
		NAWK：New awk，AT & T 实验室的AWK的升级版
		GAWK：即GNU AWK。所有的GNU/Linux发布版都自带GAWK，它与AWK和NAWK完全兼容
	
	GNU AWK 用户手册文档：https://www.gnu.org/software/gawk/manual/gawk.html
	
	gawk：模式扫描和处理语言，可以实现下面功能
		文本处理
		输出格式化的文本报表
		执行算数运算
		执行字符串操作
		
	格式：
		awk [options] 'program' var=value file…
		awk [options] -f programfile var=value file…

		说明：program通常是被放在单引号中，并可以由三种部分组成
			BEGIN语句块
			模式匹配的通用语句块
			END语句块
		常见选项：
			-F “分隔符” 指明输入时用到的字段分隔符，默认的分隔符是若干个连续空白符
			-v var=value 变量赋值
		Program格式：
			pattern{action statements;..}
			说明：
				pattern：决定动作语句何时触发及触发事件，比如：BEGIN,END,正则表达式等，pattern其实就是过滤特定行的条件！
				action statements：对数据进行处理，放在{}内指明，常见：print, printf
	
	
	分割符、域和记录
		由分隔符分隔的字段（列column,域field）标记$1,$2...$n称为域标识，$0为所有域，注意：和shell中变量$符含义不同
		文件的每一行称为记录record
		如果省略action，则默认执行 print $0 的操作
		
	常用的action分类
		output statements：print,printf
		Expressions：算术，比较表达式等
		Compound statements：组合语句
		Control statements：if, while等
		input statements
	
	awk控制语句
		{ statements;… } 组合语句
		if(condition) {statements;…}
		if(condition) {statements;…} else {statements;…}
		while(conditon) {statments;…}
		do {statements;…} while(condition)
		for(expr1;expr2;expr3) {statements;…}
		break
		continue
		exit

	[root@localhost ~]#which awk
	/usr/bin/awk	
	[root@localhost ~]#ll /usr/bin/awk
	lrwxrwxrwx. 1 root root 4 Aug 20  2021 /usr/bin/awk -> gawk			# 现在用的awk实际上是gawk
	

1.2 awk 入门

	[root@localhost ~]#awk '{}'							# 运行后等待输入，说明awk支持标准输入
	hello											 
	
	[root@localhost ~]#awk '{print "hello,awk"}'		# 字符串一定要用双引号引起来，不引起来，会当成变量。数字不用加双引号！
	a																	
	hello,awk											# 输入什么都打印"hello,awk", 因为 program 里面是处理数据内容的动作，这里的动作是固定打印
	b
	hello,awk
	c
	hello,awk	
	
	[root@localhost ~]#awk '{print "hello,awk"}' < /etc/fstab		# 标准输入重定向
	hello,awk
	hello,awk
	hello,awk
	
	[root@localhost ~]#ls | awk '{print "hello,awk"}'				# 标准输入重定向
	hello,awk
	hello,awk
	hello,awk
	
	
	// BEGIN是特殊的pattern,处理数据内容之前会先运行BEGIN。begin使用场景，比如打印表头
	[root@localhost ~]#awk 'BEGIN{print "hello,awk"}'
	hello,awk
	
	
	// END也是特殊的pattern,处理数据内容之后才会运行BEGIN。END使用场景，汇总，统计
	
	[root@localhost ~]#awk 'BEGIN{print 100}'			# 数字不用加双引号！
	100
	[root@localhost ~]#awk 'BEGIN{print 100+200}'		# 支持算术运算
	300
	
	
1.3 awk 入门
	
	[root@localhost ~]#echo {a..d}							
	a b c d
	[root@localhost ~]#echo {a..d} | awk '{print $1 $3}'		# 默认以空格为分割符，awk 会把连续的空格当成1个分隔符
	ac
	[root@localhost ~]#echo {a..d} | awk '{print $1,$3}'
	a c
	[root@localhost ~]#echo {a..d} | awk '{print $0}'
	a b c d
	
	// 取分区利用率
	[root@localhost ~]#df | awk '{print $5}'
	Use%
	0%
	0%
	1%
	0%
	9%
	19%
	0%
	
	// -F 指定分割符
	[root@localhost ~]#awk -F: '{print $1, $3}' /etc/passwd		 
	root 0															
	bin 1
	daemon 2
	......省略
	
	// 处理出的数据结果以@隔开显示
	[root@localhost ~]#awk -F: '{print $1 "@" $3}' /etc/passwd
	root@0
	bin@1
	daemon@2
	......省略
	
	// 处理出的数据结果以制表符隔开显示
	[root@localhost ~]#awk -F: '{print $1 "\t" $3}' /etc/passwd
	root    0
	bin     1
	daemon  2
	......省略
	
	// 分隔符还支持正则表达式，"[[:space:]]+|%"表示1个或多个空格 或 % 
	[root@localhost ~]#df | awk -F"[[:space:]]+|%" '{print $5}'
	Use
	0
	0
	......省略
	
	
	[root@localhost ~]#df | awk -F"[ %]+" '{print $5}'		# "[ %]+"表示1个或多个空格，或 1个%，或多个% 
	Use
	0
	0
	......省略
	
	
	// 取ip地址
	[root@localhost ~]#ifconfig eth0 | sed -n '2p' | awk '{print $2}'
	192.168.32.100
	
	// 注意：hostname取出来的IP地址后面带空格，如果用在脚本中可能会出现问题。另外如果有多块网卡，会列出所有网卡的IP
	[root@localhost ~]#hostname -I | cat -A				# 显示IP列表 "hostname -I"
	192.168.32.100 $									# $是结束符
	
	// 去除ip后面的空格
	[root@localhost ~]#hostname -I | awk '{print $1}' | cat -A
	192.168.32.100$
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2 文本处理三剑客之awk基本用法
	
	awk变量分为：内置和自定义变量
	
2.1 常见的内置变量
	FS：输入字段分隔符，默认为空白字符,功能相当于 -F
	OFS：输出字段分隔符，默认为空白字符
	RS：输入记录record分隔符，指定输入时的换行符
	ORS：输出记录分隔符，输出时用指定符号代替换行符
	NF：字段数量
	NR：记录的编号
	FNR：各文件分别计数，记录的编号
	FILENAME：当前文件名
	ARGC：命令行参数的个数
	ARGV：数组，保存的是命令行所给定的各参数，每一个参数：ARGV[0]，......
	
	
变量 FS	的用法：
	
	[root@localhost ~]#awk -v FS=':' '{print $1,$3}' /etc/passwd
	root 0
	bin 1		
	......省略
	
	[root@localhost ~]#awk -v FS=':' '{print $1,FS,$3}' /etc/passwd
	root : 0
	bin : 1
	......省略
	
	[root@localhost ~]#awk -v FS=':' '{print $1FS$3}' /etc/passwd
	root:0
	bin:1
	......省略
	
	// 把shell变量传递给内置变量FS
	[root@localhost ~]#flag=":"; awk -v FS=$flag '{print $1,FS,$3}' /etc/passwd
	root : 0
	bin : 1
	......省略
	
	注意：
		-F 和 FS变量功能一样，同时使用会冲突
		-F 和 FS变量功能一样，同时使用会 -F 优先级高
	
	
变量 OFS 的用法（很少用）：
	
	[root@localhost ~]#awk -v FS=':' '{print $1,$3}' /etc/passwd
	root 0																# 输出默认使用空格作为输出符
	bin 1		
	......省略
	
	[root@localhost ~]#awk -v FS=':' -v OFS="$" '{print $1,$3}' /etc/passwd
	root$0
	bin$1
	......省略

	
变量 RS 和 ORS 的用法（很少用）：
	
	[root@localhost ~]#echo {a..c}
	a b c								
	
	[root@localhost ~]#echo {a..c} | awk -v RS=' ' '{print $0}'   		# RS指的是"a b c"之间的空格，分割后每个记录都换行。其实就是行转列 ！
	a
	b
	c

	[root@localhost ~]#echo {a..c} | awk -v RS=' ' -v ORS="@" '{print $0}'	# 输出默认是以换行为分隔符显示，但是ORS可以指定输出分隔符
	a@b@c
	@[root@localhost ~]#	
	
	
变量 NF 的用法：
	记录、列、属性、域 都是一个意思
	记录、行都是一个意思
	
	[root@localhost ~]# awk -v FS=':' '{print NF}' /etc/passwd
	7																	# 表示一行7列
	7
	......省略
	
	[root@localhost ~]# awk -v FS=':' '{print $NF}' /etc/passwd			# $NF 表示取最后一列， 
	/bin/bash
	/sbin/nologin
	......省略	
	
	[root@localhost ~]#df | awk -F'[ %]+' '{print $(NF-1)}'				# $(NF-1) 表示倒数第二列
	Mounted
	0
	0
	1
	......省略
	
	
变量 NR 的用法：	
	[root@localhost ~]#awk '{print NR, $1}' /etc/passwd					# NR 表示行号
	1 root:x:0:0:root:/root:/bin/bash
	2 bin:x:1:1:bin:/bin:/sbin/nologin
	......省略
	
	//获取IP地址
	[root@localhost ~]#ifconfig eth0 | awk 'NR==2{print $2}'
	192.168.32.100


变量 FNR 的用法：多个文件分别计数，记录的编号
	[root@localhost ~]#wc -l  /etc/issue
	3 /etc/issue
	[root@localhost ~]#wc -l  /etc/os-release
	16 /etc/os-release

	[root@localhost ~]#awk '{print FNR}' /etc/issue /etc/os-release
	1
	2
	3
	1
	2
	......省略
	
	
变量 FILENAME 的用法：	
	[root@localhost ~]#awk '{print FNR,FILENAME}' /etc/issue /etc/os-release
	1 /etc/issue
	2 /etc/issue
	3 /etc/issue
	1 /etc/os-release
	2 /etc/os-release
	......省略


变量 ARGC 和 ARGV 的用法：	

	// ARGC 参数的个数；ARGV 数组，保存的是命令行所给定的参数
	[root@localhost ~]#awk '{print ARGC, ARGV[0],ARGV[1],ARGV[2]}' /etc/issue /etc/os-release
	3 awk /etc/issue /etc/os-release
	3 awk /etc/issue /etc/os-release
	3 awk /etc/issue /etc/os-release
	
	
2.2 自定义变量
	自定义变量是区分字符大小写的,使用下面方式进行赋值
		-v var=value
		在program中直接定义	
	
	[root@localhost ~]#awk -v test1=test2="hello awk" 'BEGIN{print test1,test2}'
	test2=hello awk

	[root@localhost ~]#awk -v test1=test2="hello awk" 'BEGIN{print test1}'			# 在{}外面不支持 test1=test2="hello awk" 这种写法 
	test2=hello awk
	
	[root@localhost ~]#awk 'BEGIN {test1=test2="hello awk"; print test1, test2}'	# 在{}里面支持 test1=test2="hello awk" 这种写法 
	hello awk hello awk	
	

2.3 动作 printf, 可以实现格式化输出
	格式：printf “FORMAT”, item1, item2, ...
	说明：
		必须指定FORMAT
		不会自动换行，需要显式给出换行控制符 \n
		FORMAT中需要分别为后面每个item指定格式符
	
	格式符：与item一一对应
		%s：显示字符串
		%d, %i：显示十进制整数
		%f：显示为浮点数
		%e, %E：显示科学计数法数值
		%c：显示字符的ASCII码
		%g, %G：以科学计数法或浮点形式显示数值
		%u：无符号整数
		%%：显示%自身
		
	修饰符：
		#[.#] 第一个数字控制显示的宽度；第二个#表示小数点后精度，如：%3.1f
		- 左对齐（默认右对齐） 如：%-15s
		+ 显示数值的正负符号 如：%+d
	
	[root@localhost ~]#awk -F: '{printf "%-20s %-10d\n",$1,$3}' /etc/passwd		# "%-20s" 对应 $1，20表示显示宽度，"-"表示左对齐；"%-10d"对应$3
	root                 0
	bin                  1
	daemon               2
	......省略
	
	// 打印表格
	[root@localhost ~]#awk -F: 'BEGIN{printf"---------------------------\n%-15s|%10s|\n---------------------------\n","username","uid"}{printf"%-15s|%10d|\n---------------------------\n",$1,$3}END{print "finished"}' /etc/passwd
	---------------------------
	username       |       uid|
	---------------------------
	root           |         0|
	---------------------------
	bin            |         1|
	---------------------------
	......省略
	finished
	[root@localhost ~]#
	
	
2.4 操作符
	
	
	[root@localhost ~]#awk 'BEGIN{i=0;print i++,i}'
	0 1
	[root@localhost ~]#awk 'BEGIN{i=0;print ++i,i}'
	1 1	

2.5 模式PATTERN
	PATTERN:根据pattern条件，过滤匹配的行，再做处理
		如果未指定：空模式，匹配每一行
		
		/regular expression/：仅处理能够模式匹配到的行，需要用/ /括起来
		
		relational expression: 关系表达式，结果为“真”才会被处理
			真：结果为非0值，非空字符串
			假：结果为空字符串或0值
		
		line ranges：行范围
			不支持直接用行号，但可以使用变量NR间接指定行号
			/pat1/,/pat2/ 不支持直接给出数字格式
	
		BEGIN/END模式
			BEGIN{}：仅在开始处理文件中的文本之前执行一次
			END{}：仅在文本处理完成之后执行一次
	
正则表达式匹配
	[root@localhost ~]#awk '/^r/' /etc/passwd		# 过滤出以r开头的行，"/ /"里面是正则表达式
	root:x:0:0:root:/root:/bin/bash
	
	[root@localhost ~]#awk '/^r/{print $0}' /etc/passwd		# 等价于 "awk '/^r/' /etc/passwd"
	root:x:0:0:root:/root:/bin/bash
	
	[root@localhost ~]#ifconfig eth0 | awk '/netmask/{print $2}'
	192.168.32.100
	
	// ~ 左边是否和右边匹配，包含关系, !~ 是否不匹配
	[root@localhost ~]#awk -F: '$1 ~ /root/' /etc/passwd			# 取出第一列包含root的数据。 等价于：awk -F: '$1 ~ /root/ {print $0}' /etc/passwd
	root:x:0:0:root:/root:/bin/bash
	
	// 打印出以root开头的行
	[root@localhost ~]#awk '$0 ~ /^root/' /etc/passwd				# 等价于 awk '/^root/' /etc/passwd
	root:x:0:0:root:/root:/bin/bash
	
	// 打印第一列包含ra的行
	[root@localhost ~]#awk -F: '$1 ~ /ra/' /etc/passwd
	operator:x:11:0:operator:/root:/sbin/nologin
	
	// 打印包含"Network"的行
	[root@localhost ~]#awk -F: '/Network/' /etc/passwd
	systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
	
	
关系表达式
	[root@localhost ~]#seq 2 | awk '0{print $0}'		# 0是假所以不打印
	[root@localhost ~]#seq 2 | awk '1{print $0}'
	1
	2
	[root@localhost ~]#seq 2 | awk '""{print $0}'		# 空字符串是假所以不打印
	[root@localhost ~]#seq 2 | awk '" "{print $0}'
	1
	2
	
	
	[root@localhost ~]#seq 2 | awk -v n=0 'n'			# 为0不打印
	[root@localhost ~]#seq 2 | awk -v str='' 'str'		# str为空字符串，不打印
	
	[root@localhost ~]#seq 2 | awk -v n=1 'n'			# 等价于：seq 2 | awk -v n=1 'n{print $0}'
	1
	2
	[root@localhost ~]#seq 2 | awk -v str=' ' 'str'		# 等价于：seq 2 | awk -v str=' ' 'str{print $0}'
	1
	2
	
	[root@localhost ~]#seq 3 | awk 'n++'		# n是没有定义的变量，所以默认值为0， seq 3 | awk 'n++'  是  seq 3 | awk -v n=0 'n++{print $0}'  的缩写
	2
	3
	
	[root@localhost ~]#seq 3 | awk -v n=0 '!n++'			# "!"表示取反
	1
	
	// 条件中同样支持三目表达式
	[root@localhost ~]# awk -F: '{$3>=1000?usertype="Common User":usertype="SysUser";printf "%-20s:%12s\n",$1,usertype}' /etc/passwd
	root                :     SysUser
	bin                 :     SysUser
	......省略
	
	// 取奇数行
	[root@localhost ~]#seq 5 | awk 'i=!i'
	1
	3
	5
	
	// 取偶数行
	[root@localhost ~]#seq 5 | awk '!(i=!i)'
	2
	4
	
	// 取偶数行
	[root@localhost ~]#seq 5 | awk -v i=1 'i=!i'
	2
	4
	
	
line ranges：行范围	
	[root@localhost ~]#seq 100 | awk 'NR==99'
	99
	[root@localhost ~]#seq 10 | awk 'NR>=9'
	9
	10
	[root@localhost ~]#seq 10 | awk 'NR>=9 && NR<=10'
	9
	10
	// 取以b开头的行到以s开头的行
	[root@localhost ~]#awk '/^b/,/^s/' /etc/passwd			# "/ /"里面是正则表达式
	bin:x:1:1:bin:/bin:/sbin/nologin
	daemon:x:2:2:daemon:/sbin:/sbin/nologin
	adm:x:3:4:adm:/var/adm:/sbin/nologin
	lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
	sync:x:5:0:sync:/sbin:/bin/sync
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3 文本处理三剑客之awk高级用法

3.1 条件判断 if-else

	语法：
		if(condition){statement;…}[else statement]
		if(condition1){statement1}else if(condition2){statement2}else if(condition3){statement3}...... else {statementN}
	
	使用场景：对awk取得的整行或某个字段做条件判断
	

	// 等价于 awk -F: '{if($3>=1000){print $1,$3}}' /etc/passwd ， 如果只有一个指令，可以不加花括号
	[root@localhost ~]#awk -F: '{if($3>=1000)print $1,$3}' /etc/passwd		
	aaron 1000
	xiaoming 1001
	xiaohong 1002
	
	[root@localhost ~]#awk -F: '{if($3<=100){print "<=100",$3}else if ($3<=1000) {print "<=1000",$3}else{print ">=1000",$3}}' /etc/passwd
	<=100 0
	<=100 1
	<=100 2
	......省略


3.1 条件判断 switch
	
	语法：
		switch(expression) {case VALUE1 or /REGEXP/: statement1; case VALUE2 or /REGEXP2/: statement2; ...; default: statementn}

	
3.2 循环 while
	语法：
		while (condition) {statement;…}
		
	条件“真”，进入循环；条件“假”，退出循环

	使用场景：
		对一行内的多个字段逐一类似处理时使用
		对数组中的各元素逐一处理时使用
	
	[root@localhost ~]#awk -v i=1 -v sum=0 'BEGIN{while(i<=100){sum+=i;i++};print sum}'
	5050
	
	
	[root@localhost ~]#awk 'BEGIN{print length("abc")}'
	3
	[root@localhost ~]#awk 'BEGIN{print length("广东广州")}'
	4
	
	
	[root@localhost ~]#grep linux16 /etc/grub2.cfg
			linux16 /vmlinuz-5.4.220-1.el7.elrepo.x86_64 root=/dev/mapper/centos-root ro crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 LANG=en_US.UTF-8
			linux16 /vmlinuz-3.10.0-1160.el7.x86_64 root=/dev/mapper/centos-root ro crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0
			linux16 /vmlinuz-0-rescue-1ac11172d2f343c09c155ddd71b49e48 root=/dev/mapper/centos-root ro crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0	
	
	
	[root@localhost ~]#awk '/^[[:space:]]*linux16/{i=1;while(i<=NF){print $i,length($i); i++}}' /etc/grub2.cfg
	linux16 7
	/vmlinuz-5.4.220-1.el7.elrepo.x86_64 36
	root=/dev/mapper/centos-root 28
	ro 2
	......省略
	
	
	[root@localhost ~]#awk '/^[[:space:]]*linux16/{i=1;while(i<=NF){if(length($i)>=10){print $i,length($i)}; i++}}' /etc/grub2.cfg
	/vmlinuz-5.4.220-1.el7.elrepo.x86_64 36
	root=/dev/mapper/centos-root 28
	crashkernel=auto 16
	rd.lvm.lv=centos/root 21
	rd.lvm.lv=centos/swap 21
	......省略
	
	
3.3	循环 do-while
	
	语法：
		do {statement;…}while(condition)
	
	意义：无论真假，至少执行一次循环体
	
	do-while循环
		语法：do {statement;…}while(condition)
		意义：无论真假，至少执行一次循环体
	
3.4	循环 for
	语法：
		for(expr1;expr2;expr3) {statement;…}
	
	常见用法：
		for(variable assignment;condition;iteration process) {for-body}
	
	特殊用法：能够遍历数组中的元素
		for(var in array) {for-body}
	
	
	[root@localhost ~]#awk 'BEGIN{sum=0;for(i=1;i<=100;i++){sum+=i};print sum}'
	5050	
	
	
	// 对比 awk 和 shell 效率：
	[root@localhost ~]#time awk 'BEGIN{sum=0;for(i=1;i<=1000000;i++){sum+=i};print sum}'
	500000500000

	real    0m0.072s			# 总共花费的时间
	user    0m0.071s
	sys     0m0.001s
	
	[root@localhost ~]#time (sum=0;for((i=1;i<=1000000;i++));do let sum+=i;done;echo $sum)
	500000500000

	real    0m6.411s			# 总共花费的时间，说明 awk 的效率大于 shell
	user    0m5.886s
	sys     0m0.524s
	[root@localhost ~]#
	
	
	[root@localhost ~]#time (seq -s+ 1000000 | bc)
	500000500000

	real    0m0.336s			# 总共花费的时间
	user    0m0.279s
	sys     0m0.094s
	
	
3.5 continue 和 break
	continue 中断本次循环
	break 中断整个循环
	
	格式：
		continue [n]
		break [n]
	
	[root@localhost ~]#awk 'BEGIN{for(i=1;i<=100;i++){if(i==50)continue;sum+=i};print sum}'
	5000
	[root@localhost ~]#awk 'BEGIN{for(i=1;i<=100;i++){if(i==50)break;sum+=i};print sum}'
	1225
	
	
3.6 next
	next 可以提前结束对本行处理而直接进入下一行处理（awk自身循环）
	
	[root@localhost ~]#awk -F: '{if($3%2!=0) next; print $1,$3}' /etc/passwd
	root 0
	daemon 2
	lp 4
	shutdown 6	
	......省略
	
	
3.7 数组：awk的数组为关联数组
	
	格式：
		array_name[index-expression]
		
	index-expression
		利用数组，实现 k/v 功能
		可使用任意字符串；字符串要使用双引号括起来
		如果某数组元素事先不存在，在引用时，awk会自动创建此元素，并将其值初始化为“空串”
		若要判断数组中是否存在某元素，要使用“index in array”格式进行遍历	
	
	若要遍历数组中的每个元素，要使用 for 循环
		for(var in array) {for-body}
	
	[root@localhost ~]#awk 'BEGIN{weekdays["mon"]="Monday";weekdays["tue"]="Tuesday";print weekdays["mon"]}'
	Monda
	

例子：
	[root@localhost ~]#cat test.txt
	aaa
	bbb
	ccc
	aaa
	bbb
	ccc
	xxx
	aaa
	bbb
	yyy
	
	// 去重。原理：第一次读一行 line[aaa]的初始值为0，为假，取反为真，++ 后值变为1。当下次再读到line[aaa]，值为1，为真，取反为假，所以不打印
	[root@localhost ~]#awk '!line[$0]++' test.txt
	aaa
	bbb
	ccc
	xxx
	yyy	
	
	
遍历数组：

	// 注意：打印出来的顺序和数组里面的元素的顺序没有关系
	[root@localhost ~]#awk 'BEGIN{config["key1"]="value1";config["key2"]="value2";config["key3"]="value3";for(item in config){print item":"config[item]}}'
	key3:value3
	key1:value1
	key2:value2
	
	[root@localhost ~]#awk 'BEGIN{config[1]="value1";config[2]="value2";config[3]="value3";for(item in config){print item":"config[item]}}'
	1:value1
	2:value2
	3:value3
	
	[root@localhost ~]#ss -nta | awk 'NR!=1 {state[$1]++}END{for(i in state){print state[i],i}}'
	5 LISTEN
	1 ESTAB

	[root@localhost ~]#ss -tan
	State      Recv-Q Send-Q                                Local Address:Port                                               Peer Address:Port
	LISTEN     0      128                                               *:22                                                            *:*
	LISTEN     0      100                                       127.0.0.1:25                                                            *:*
	ESTAB      0      36                                   192.168.32.100:22                                                 192.168.32.1:50930
	LISTEN     0      128                                            [::]:22                                                         [::]:*
	LISTEN     0      100                                           [::1]:25                                                         [::]:*
	LISTEN     0      128                                            [::]:9090                                                       [::]:*	

	
	// 统计连接到服务器的IP
	[ec2-user@ip-172-31-32-113 ~]$ ss -nt | awk -F"[ :]+" 'NR!=1{ip[$(NF-2)]++}END{for(i in ip){print ip[i],i}}' | sort -nr
	4 125.94.201.12
	
	
3.8 awk 函数（了解）	
	awk 的函数分为内置和自定义函数
	
	官方文档：https://www.gnu.org/software/gawk/manual/gawk.html#Functions
	
常见内置函数
	数值处理：
		rand()：返回0和1之间一个随机数
		srand()：配合rand() 函数,生成随机数的种子
		int()：返回整数
	
	字符串处理：
		length([s])：返回指定字符串的长度
		sub(r,s,[t])：对t字符串搜索r表示模式匹配的内容，并将第一个匹配内容替换为s
		gsub(r,s,[t])：对t字符串进行搜索r表示的模式匹配的内容，并全部替换为s所表示的内容
		split(s,array,[r])：以r为分隔符，切割字符串s，并将切割后的结果保存至array所表示的数组中，第一个索引值为1,第二个索引值为2,…
	
	可以awk中调用shell命令
		system('cmd')
		
	时间函数：官方文档 https://www.gnu.org/software/gawk/manual/gawk.html#Time-Functions
		systime() 当前时间到1970年1月1日的秒数
		strftime() 指定时间格式	
	
	
	// 生成随机数
	[root@localhost ~]#awk 'BEGIN{srand();print rand()}'
	0.852831
	[root@localhost ~]#awk 'BEGIN{srand();print rand()}'		
	0.450616
	[root@localhost ~]#awk 'BEGIN{srand();print rand()}'		# 如果敲的太块，随机数来不及生成新的，结果就会和上次一样 ！
	0.450616	
	
	
	// 字符串处理
	[root@localhost ~]#echo "2008:08:08 08:08:08" | awk 'sub(/:/,"-",$1)'
	2008-08:08 08:08:08

	[root@localhost ~]#echo "2008:08:08 08:08:08" | awk 'gsub(/:/,"-",$1)'		# gsub 表示全部替换
	2008-08-08 08:08:08
	
	[root@localhost ~]#echo "2008:08:08 08:08:08" | awk 'gsub(/:/,"-",$0)'		
	2008-08-08 08-08-08
	
	
	// awk中调用shell命令
	[root@localhost ~]#awk 'BEGIN{system("hostname")}'
	localhost.localdomain	
	
	// 时间函数 
	[root@localhost ~]#awk 'BEGIN{print strftime("%Y-%m-%dT%H:%M",systime()-3600)}'		# 显示出当前时间的前一个小时时间
	2022-11-19T21:30	
	
	
	
自定义函数：
	自定义函数格式：
		function name ( parameter, parameter, ... ) {
			statements
			return expression
		}	
	
	// 示例
	[root@localhost ~]#cat func.awk
	function max(x,y) {
			x>y?var=x:var=y
			return var
	}
	BEGIN{print max(a,b)}
	
	[root@localhost ~]#awk -v a=30 -v b=20 -f func.awk
	30
	
	
	
3.9 awk 脚本：将awk程序写成脚本，直接调用或执行
	
示例1：	
	// 这个文件里面的内容其实就是 program (单引号中的pattern和action)，然后通过文件调用
	[root@localhost ~]#cat passwd.awk
	{if($3>=1000)print $1,$3}
	
	[root@localhost ~]#awk -F: -f passwd.awk /etc/passwd
	aaron 1000
	xiaoming 1001
	xiaohong 1002
	
	
示例2：
	[root@localhost ~]#cat test.awk
	#!/bin/awk -f
	#this is a awk script
	{if($3>=1000)print $1,$3}
	
	[root@localhost ~]#chmod +x test.awk
	
	[root@localhost ~]#./test.awk -F: /etc/passwd
	aaron 1000
	xiaoming 1001
	xiaohong 1002
	
	
示例3：向awk脚本传递参数
	格式：
		awkfile var=value var2=value2... Inputfile
		
	注意：
		在BEGIN过程中不可用。直到首行输入完成以后，变量才可用。可以通过-v 参数，让awk在执行BEGIN之前得到变量的值。命令行中每一个指定的变量都需要一个-v参数
		也就是说，被加过-v选项的变量，BEGIN里面的逻辑才能得到变量值，否则得不到 ！

	[root@localhost ~]#cat test2.awk
	#!/bin/awk -f
	{if($3 >=min && $3<=max)print $1,$3}
	
	[root@localhost ~]#chmod +x test2.awk
	
	[root@localhost ~]#./test2.awk -F: min=100 max=200 /etc/passwd
	systemd-network 192	
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
