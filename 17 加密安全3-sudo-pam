6 sudo进行权限委派
  
  在最早之前，一般用户管理系统的方式是利用su切换为超级用户。但是使用su的缺点之一在于必须要先告知超级用户的密码。
  
  sudo 即superuser do，允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如halt，reboot，su等等。
  这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性。所以 sudo 的主要功能就是授权！
  由于不需要超级用户的密码，部分Unix系统甚至利用sudo使一般用户取代超级用户作为管理帐号，例如Ubuntu、Mac OS X等。
  
  原理：
	  (1) 首先超级用户将普通用户的名字、可以执行的特定命令、按照哪种用户或用户组的身份执行等信息，登记在特殊的文件中（通常是/etc/sudoers），
	      即完成对该用户的授权（此时该用户称为“sudoer”）!
	  
	  (2) 在一般用户需要取得特殊权限时，其可在命令前加上“sudo”，此时sudo将会询问该用户自己的密码（以确认终端机前的是该用户本人），
	      回答后系统即会将该命令的进程以超级用户的权限运行。之后的一段时间内（默认为5分钟，可在/etc/sudoers自定义），使用sudo不需要再次输入密码。
  
  sudo特性：
	  sudo能够授权指定用户在指定主机上运行某些命令。如果未授权用户尝试使用 sudo，会提示联系管理员
	  sudo提供了丰富的日志，详细地记录了每个用户干了什么。它能够将日志传到中心主机或者日志服务器
	  sudo使用时间戳文件来执行类似的“检票”系统。当用户调用sudo并且输入它的密码时，用户获得了一张存活期为5分钟的票
	  sudo的配置文件是sudoers文件，它允许系统管理员集中的管理用户的使用权限和使用的主机。它所存放的位置默认是在/etc/sudoers，属性必须为0440  
  

6.1 sudo 组成：
		所在包：sudo
		配置文件：/etc/sudo.conf
		授权规则配置文件：
			/etc/sudoers
			/etc/sudoers.d/
		安全编辑授权规则文件和语法检查工具：
			/usr/sbin/visudo
			也可以使用 vim 编辑配置文件，但是没有语法检查功能，一项语法错误，会影响整个配置，用vim编辑后，需要使用强制保存的方式才能最终修改文件
			
		授权编辑规则文件的工具：/usr/bin/sudoedit
		执行授权命令：/usr/bin/sudo
		时间戳文件：/var/db/sudo
		日志文件：/var/log/secure
		
	示例：
		# 检查语法
		visudo -c
		
		# 检查指定配置文件语法
		visudo -f /etc/sudoers.d/test
		
6.2 sudo 命令
	格式：
		sudo [-u user] COMMAND
	选项：
		-i 以目标用户身份运行登录shell
		-V 显示版本信息等配置信息
		-u user 默认为root
		-l,ll 列出用户在主机上可用的和被禁止的命令
		-v 再延长密码有效期限5分钟,更新时间戳
		-k 清除时间戳（1970-01-01），下次需要重新输密码
		-K 与-k类似，还要删除时间戳文件
		-b 在后台执行指令
		-p 改变询问密码的提示符号
			示例：-p "password on %h for user %p: "
	
	示例：
		// 切换身份功能和 su 相似,但不一样,sudo必须提前授权,而且要输入自已的密码
		sudo -i -u xiaoming
		
		
6.3 sudo 授权规则配置
	配置文件：
		/etc/sudoers				# 这个文件一般不用动
		/etc/sudoers.d/				# 可以把各种授权，分门别类放在这个目录中，适合于复杂环境的授权。比如针对项目、部门等集体单位 或 个人 分别授权
									# "/etc/sudoers.d/"目录下的授权文件应该和sudoers文件的权限保持一致
						
	配置文件中支持使用通配符：
		? 			# 任意单一字符
		* 			# 匹配任意长度字符
		[wxc] 		# 匹配其中一个字符
		[!wxc] 		# 除了这三个字符的其它字符
		\x 			# 转义
		[[alpha]] 	# 字母
	
		示例：
			/bin/ls [[alpha]]*
			
	配置文件规则有两类
		1)、别名定义：不是必须的
		2)、授权规则：必须的
	
	sudoers 授权规则格式：
		user host=(runas) command
		说明：
			user：给user这个用户授权
			host：通过哪些主机登入，这里可以写一个IP，但写了IP就限制了只能在这个IP的主机才能登入，多个IP用逗号隔开
			      这里脚本写好后一般会同步到很多主机上，这里一般写ALL，不限制登入的主机
			runas：以哪个用户的身份，授权用户代表一个具有管理员权限的人，一般root。这里如果是ALL，就代表是root
			command：能运行哪些命令，如果有多个命令，命令之间可以用逗号隔开，也可以写成多行授权的形式
			user、host、runas、command 都可以被定义为别名！
		
		授权字段支持的写法：
			User和runas:
				username				 	# 直接写用户名
				#uid					 	# 写用户的UID，前加 #		
				%group_name				 	# 写组名称，前面加 %
				%#gid					 	# 写组id，前面加 %#
				user_alias|runas_alias		# 用户别名	
			host:
				ip或hostname				# 写主机IP 或 主机的hostname
				network(/netmask)			# 子网掩码
				host_alias					# 主机别名
			command:
				command name				# 命令
				directory					# 写目录，这个目录下的命令都会被授权给用户
				sudoedit					# 授权用户有权限操作"/etc/sudoers"文件和"/etc/sudoers.d/"目录
				Cmnd_Alias					# 命令的别名
		
	sudoers的别名：
		User_Alias
		Runas_Alias
		Host_Alias
		Cmnd_Alias
		
		别名格式：
			[A-Z]([A-Z][0-9]_)*				# 必须是大写字母和数字组合，而且大写字母必须放在前面
			
		别名定义：
			Alias_Type NAME1 = item1,item2,item3 : NAME2 = item4, item5		# 多个的话，中间用冒号隔开
	
实践1：
	// 编辑 "/etc/sudoers" 文件，等价于： visudo /etc/sudoers
	[root@localhost ~]#visudo
	[root@localhost ~]#cat /etc/sudoers
	......省略
	root    ALL=(ALL)       ALL
	xiaoming    ALL=(root)       /usr/bin/mount /dev/cdrom /mnt/,/usr/bin/umount			# 注意：命令要写成绝对路径的形式
	......省略			
	## Allows people in group wheel to run all commands
	%wheel  ALL=(ALL)       ALL							# 如果以"%"开头，表示是对组授权。注意：系统中默认就有 wheel 这个组

	## Same thing without a password
	# %wheel        ALL=(ALL)       NOPASSWD: ALL		# NOPASSWD 表示使用sudo的时候不用输入密码，好处是在脚本中使用sudo，不会被要求输入密码
	......省略
	
	// 用户切换为 xiaoming
	
	// 第一次使用sudo要输入密码，然后在连续的时间段内不用再输第二次，时间间隔大概五分钟！
	[xiaoming@localhost ~]#sudo mount /dev/cdrom /mnt		# 命令运行失败，因为少了一个"/", 一定要和 sudoers 文件中定义的规则完全匹配
	[xiaoming@localhost ~]#sudo mount /dev/cdrom /mnt		# 命令能运行成功
	
	说明：
		如果 sudoers 文件中的规则为"/usr/bin/mount /dev/cdrom", 表示用户可以把"/dev/cdrom"目录挂载到任意目录！
		如果 sudoers 文件中的规则为"/usr/bin/mount", 表示用户可以任意使用 mount 命令！
		
实践2：
	// 编辑 "/etc/sudoers" 文件，等价于： visudo /etc/sudoers
	[root@localhost ~]#visudo
	[root@localhost ~]#cat /etc/sudoers
	......省略
	root    ALL=(ALL)       ALL					# 问题：如果注销这一行，root 是否还有最高权限？注释这一行不影响root权限，这个配置平常用不上
	......省略
	
	注意：
		root 具有最高权限的唯一原因是 uid 为 0，
		所以即使注释掉"/etc/sudoers"中的对root授权的配置, root用户仍然具备管理员权限
		但是在"/etc/sudoers"中的对root授权的配置在特定情景下也有用处.
	
	
	特定场景下，"/etc/sudoers"中的对root授权的配置的使用场景
		// 如果把root的id和xiaoming的id对换，那么xiaoming这个用户就具有了最高权限
		[root@localhost ~]#cat /etc/passwd
		root:x:1000:0:root:/root:/bin/bash
		xiaoming:x:0:1001::/home/xiaoming:/bin/bash
		......
		
		// 退出后再用root登录，可以看到提示符已经变为"$"(普通用户的提示符)，没有权限操作，只有管理员才能操作这个文件
		// 但是在"/etc/sudoers"中root用户有被授权为管理员权限
		sudo -u xiaoming cat /etc/shadown		# -u 指定管理员，不指定默认为root。但现在xiaoming是管理员，所以要显示指定
		
		// 可以看到命令同样运行成功，这个配置相当于给root用户留了一个后门，即使root的uid不为0，还是可以运行任何命令
		
实践3：
	[root@centos8 ~]#vim /etc/sudoers.d/test
	Wang ALL=(ALL) sudoedit									# "ALL=(ALL)"可以省略写为"ALL=", 表示代表root用户
	
	// wang 可以执行下面命令
	[root@centos8 ~]#sudoedit /etc/sudoers
	[root@centos8 ~]#sudoedit /etc/sudoers.d/test


实践4：别名的用法，注意别名的命令规则
	cat /etc/sudoers.d/test
	User_Alias SYSADER=wang,xiaohong,%admins				# User_Alias 表示用户别名，
	User_Alias DISKADER=tom
	Host_Alias SERS=www.abc.com,172.16.0.0/24				# Host_Alias 表示主机别名
	Runas_Alias OP=root										# Runas_Alias 表示要代表的用户的别名
	Cmnd_Alias SYDCMD=/bin/chown,/bin/chmod					# Cmnd_Alias 表示命令别名
	Cmnd_Alias DSKCMD=/sbin/parted,/sbin/fdisk
	SYSADER SERS= SYDCMD,DSKCMD								# 使用别名
	DISKADER ALL=(OP) DSKCMD								# 使用别名

实践5：在命令中使用通配符
	情景1：
		cat /etc/sudoers.d/test
		wang ALL=(ALL) /bin/cat /var/log/messages*				# 这种写法有漏洞
		
		sudo cat /var/log/messages /etc/shadow					# 被授权的用户可以通过这种方式访问被限制的文件
		
		//在官方文档中对这种情况有说明
		[root@centos8 ~]#man sudoers
		will allow command like:
		$ sudo cat /var/log/messages.1
		It will also allow:
		$ sudo cat /var/log/messages /etc/shadow
	
	情景2：
		cat /etc/sudoers.d/test
		xiaoqiang 192.168.1.6,192.168.1.8=(root) /usr/sbin/,!/usr/sbin/useradd 	  # xiaoqiang 可以运行"/usr/sbin/"目录下所有的命令，但是useradd除外，"!"表示否定  
		
实践6：修改验证密码间隔为2分钟，默认间隔为5分钟
	[root@centos8 ~]#visudo /etc/sudoers
	Defaults env_reset , timestamp_timeout=2
	// 查看 sudo 的基本信息
	[root@centos8 ~]#sudo -V					
	......
	Authentication timestamp timeout: 2.0 minutes......
		
实践7：为什么安装 ubuntu 的时候，使用的普通用户具有sudo权限？
	root@ubuntu1804:~# grep %sudo /etc/sudoers
	%sudo ALL=(ALL:ALL) ALL									# "ALL:ALL"表示这个主机上的"任何用户"和"任何组"
	
	// 因为安装ubuntu时使用的账户默认已经加到了sudo组中
	root@ubuntu1804:~# id xiaoming
	uid=1000(xiaoming) gid=1000(xiaoming) groups=1000(wang),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lxd),113(lpadmin),114(sambashare)


实践8：修改ubuntu的visudo的默认编辑器，ubuntu上visudo的默认编辑器是nano
	root@ubuntu1804:~# export EDITOR=vim	   # 把"export EDITOR=vim"写到"/root/.profile"文件中，可以永久生效，修改后使用". .profile"命令使配置马上生效
	root@ubuntu1804:~# visudo
	


实践8：
	
	// 切换为root身份，输自己的密码切换成root，之后命令前不用再加 sudo
	sudo -i 
	
	// 查看被授权了哪些操作
	sudo -l
	
	// 默认是代表root
	sudo cat /etc/shadow		// 等价于 sudo -u root cat /etc/shadow
	
	//  如果是代表非root用户，要用 -u 选项显示指明 
	sudo -u xiaoming cat /etc/shadow


总结：
	在一些安全要求较高的地方通常都需要sudo授权，很多企业为了安全都不让直接用root登录，必须经过sudo授权才能操作，平时管理都是用普通用户，以此来减少误操作
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


7 PAM(Pluggable Authentication Modules，插件式的验证模块)：实现的是认证和安全相关的功能
	Sun公司于1995 年开发的一种与认证相关的通用框架机制。
	PAM 只关注如何为服务验证用户的 API，通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，
	使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序一种认证框架，自身不做认证

	很多服务都有身份认证的需要，比如ssh、telnet,rlogin,fsh,ftp等，既然都需要身份认证，没有必要每个服务都自己独立开发一套认证体系。
	PAM提供了一个服务验证的框架、平台，各种服务就可以把认证相关的功能放到这个平台上，统一实现安全认证的功能！
  
	PAM提供了三种接口，官方站点提供对应的3个手册：
		PAM-API接口：面对应用开发者，应用只要调用PAM的API接口，就能实现对应用的认证
		PAM-SPI接口：面对安全模块开发者，通过PAM的SPI接口来接入认证的具体逻辑
		PAM的配置接口：系统管理员管理PAM的配置，比如让某个服务能够选择性的调用某个模块，用哪种验证方法等
	
	PAM是一个架构，只是一个平台，提供了规范、接口！注意：使用PAM的前提是，应用程序接入了PAM框架！
 

7.1 PAM相关文件
	包名: pam
	模块文件目录：/lib64/security/*.so
		一个so文件就对应一个模块, 每个模块都有自己负责的功能，
	特定模块相关的设置文件：/etc/security/
		pam不会把说有的模块配置文件都放在一起，一个模块对应一个配置文件，但不是所有模块都有配置文件!
		一些复杂的模块才有配置文件，比如时间，会定义一些和时间相关的规则！
		模块比较简单，就不会提供专门的配置文件，如果有参数，参数直接跟在模块名称的后面！
	应用程序调用PAM模块的配置文件
		主配置文件：/etc/pam.conf，默认不存在，一般不使用主配置
		为每种应用模块提供一个专用的配置文件：/etc/pam.d/APP_NAME 。 注意：如/etc/pam.d存在，/etc/pam.conf将失效
	
	// 查看pam模块，lib64代表64位，从centos7开始就没有32位系统了	
	[root@localhost ~]#ll /lib64/security/
	total 1084
	-rwxr-xr-x. 1 root root  19680 Apr  1  2020 pam_access.so
	-rwxr-xr-x. 1 root root  11184 Apr  1  2020 pam_cap.so
	-rwxr-xr-x. 1 root root  19616 Apr  1  2020 pam_limits.so	# 限制使用的资源，比如限制使用的内存大小，最多开多少进程	
	-rwxr-xr-x. 1 root root   7040 Apr  1  2020 pam_shells.so	# 验证使用哪种shell
	-rwxr-xr-x. 1 root root  11248 Apr  1  2020 pam_rootok.so	# 验证是不是root
	-rwxr-xr-x. 1 root root  15368 Apr  1  2020 pam_time.so		# 根据时间访问，什么时候可以访问，什么时候不可以访问
	......省略
	
	// 查看应用程序调用PAM模块的配置文件
	[root@localhost ~]#ll /etc/pam.d
	total 112
	-rw-r--r--  1 root root  272 Oct 31  2018 atd
	-rw-r--r--. 1 root root  796 Oct  1  2020 login			# 配置文件都是以应用程序的名字命名
	-rw-r--r--. 1 root root  154 Apr  1  2020 other
	-rw-r--r--. 1 root root  188 Apr  1  2020 passwd
	-rw-r--r--. 1 root root  904 Aug  9  2019 sshd
	-rw-r--r--. 1 root root  540 Oct  1  2020 su
	-rw-r--r--. 1 root root  200 Oct  1  2020 sudo
	......省略
	
	//查看程序是否支持PAM
	[root@localhost ~]#ldd `which sshd` | grep pam
			libpam.so.0 => /lib64/libpam.so.0 (0x00007fe9f0c44000)	# 主要调用了 libpam.so ，就说明支持pam
			
	[root@localhost ~]#ldd `which nginx` | grep pam	
	[root@localhost ~]#	

7.2 PAM工作原理
	PAM认证一般遵循这样的顺序：Service(服务)→PAM(配置文件)→pam_*.so
	PAM认证首先要确定服务，然后加载相应的PAM的配置文件(位于/etc/pam.d下)，最后调用认证文件(位于/lib64/security下)进行安全认证
	
	PAM认证过程示例：
		1).使用者运行 /usr/bin/passwd 程序，并输入密码
		2).passwd开始调用PAM模块，PAM模块会搜寻passwd程序的PAM相关设置文件，这个设置文件一般是在/etc/pam.d/里边的与程序同名的文件，
		   即PAM会搜寻/etc/pam.d/passwd此设置文件
		3).经由/etc/pam.d/passwd设定文件的数据，取用PAM所提供的相关模块来进行验证
		4).将验证结果回传给passwd这个程序，而passwd这个程序会根据PAM回传的结果决定下一个动作（重新输入密码或者通过验证）
	
	总结：
		只要应用程序支持pam(调用了"libpam.so"),就可以通过配置文件来配置应用程序调用哪一个pam模块
		运维工程师一般关注两个目录：
			应用程序pam的配置目录： /etc/pam.d/ 
			pam的模块配置目录，因为有些模块比较复杂，可能会更改配置：/etc/security/
		
		
7.3 PAM 配置文件格式说明
	
	通用配置文件/etc/pam.conf格式,此格式不使用：
		application type control module-path arguments
	
	专用配置文件 /etc/pam.d/ 格式
		type control module-path arguments
	
	格式字段说明：
		application：指服务名，如：telnet、login、ftp等，服务名字“OTHER”代表所有没有在该文件中明确配置的其它服务
		type：指模块类型，即功能
		control ：PAM库该如何处理与该服务相关的PAM模块的成功或失败情况，一个关健词实现
		module-path： 用来指明本模块对应的程序文件的路径名
		Arguments： 用来传递给该模块的参数
	
	
	模块类型（module-type）	
		Auth 账号的认证和授权
		Account 帐户的有效性，与账号管理相关的非认证类的功能，如：用来限制/允许用户对某个服务的访问时间，
				限制用户的位置(例如：root用户只能从控制台登录)
		Password 用户修改密码时密码复杂度检查机制等功能
		Session 用户会话期间的控制，如：最多打开的文件数，最多的进程数等
		-type 表示因为缺失而不能加载的模块将不记录到系统日志,对于那些不总是安装在系统上的模块有用，写法如：-Auth、-Account、-Password、-Session	
			  如果这个模块没有了或安装的时候没有这个模块文件，-type	表示没有这个模块也不报错，也不记录日志，也就是说模块可有可无！

	Control:
		required：一票否决，表示本模块必须返回成功才能通过认证，但是如果该模块返回失败，失败结果也不会立即通知用户，
				  而是要等到同一type中的所有模块全部执行完毕，再将失败结果返回给应用程序，即为必要条件
		requisite：一票否决，该模块必须返回成功才能通过认证，但是一旦该模块返回失败，将不再执行同一type内的任何模块，
				  而是直接将控制权返回给应用程序。是一个必要条件
		sufficient：一票通过，表明本模块返回成功则通过身份认证的要求，不必再执行同一type内的其它模块，但如果本模块返回失败可忽略，
				  即为充分条件，优先于前面的required和requisite
		optional：表明本模块是可选的，它的成功与否不会对身份认证起关键作用，其返回值一般被忽略
		include： 调用其他的配置文件中定义的配置信息

	module-path
		模块文件所在绝对路径：
		模块文件所在相对路径：/lib64/security目录下的模块可使用相对路径，如：pam_shells.so、pam_limits.so
		有些模块有自已的专有配置文件，在/etc/security/*.conf目 录下
		
	Arguments
		debug ：该模块应当用syslog( )将调试信息写入到系统日志文件中
		no_warn ：表明该模块不应把警告信息发送给应用程序
		use_first_pass ：该模块不能提示用户输入密码，只能从前一个模块得到输入密码
		try_first_pass ：该模块首先用前一个模块从用户得到密码，如果该密码验证不通过，再提示用户输入新密码
		use_mapped_pass 该模块不能提示用户输入密码，而是使用映射过的密码
		expose_account 允许该模块显示用户的帐号名等信息，一般只能在安全的环境下使用，因为泄漏用户名会对安全造成一定程度的威胁	
	
	说明：
		注意：修改PAM配置文件将马上生效(退出重新登录就生效)
		建议：编辑pam规则时，保持至少打开一个root会话，以防止root身份验证错误
	
	[root@localhost ~]#cat /etc/pam.d/sshd
	#%PAM-1.0
	auth       required     pam_sepermit.so 		# 这里auth有多个，表示都和认证相关
	auth       substack     password-auth
	auth       include      postlogin				# 表示引用当前目录下的 postlogin 文件
	# Used with polkit to reauthorize users in remote sessions
	-auth      optional     pam_reauthorize.so prepare
	account    required     pam_nologin.so			# 如果模块在"/lib64/security/"目录下，可以写相对路径，不在可以写绝对路径
	account    include      password-auth
	password   include      password-auth
	# pam_selinux.so close should be the first session rule
	session    required     pam_selinux.so close
	session    required     pam_loginuid.so
	# pam_selinux.so open should only be followed by sessions to be executed in the user context
	session    required     pam_selinux.so open env_params
	session    required     pam_namespace.so
	session    optional     pam_keyinit.so force revoke		# 后面跟的"force revoke"是模块的参数，如果模块很复杂，参数会放在模块专用的配置文件中
	session    include      password-auth
	session    include      postlogin
	# Used with polkit to reauthorize users in remote sessions
	-session   optional     pam_reauthorize.so prepare
	
	[root@localhost ~]#ll /etc/pam.d/ | grep postlogin
	lrwxrwxrwx. 1 root root   12 Aug 20  2021 postlogin -> postlogin-ac
	-rw-r--r--. 1 root root  330 Aug 20  2021 postlogin-ac
	[root@localhost ~]#
	
	
	PAM模块帮助
		官方在线文档：http://www.linux-pam.org/Linux-PAM-html/
		官方离线文档：http://www.linux-pam.org/documentation/
		pam模块文档说明：/user/share/doc/pam-*
		
		rpm -qd pam
		rpm -ql pam
		man -k pam
		// man 模块名
		man 8 nologin
	
	
7.4 常用的PAM模块 - pam_shells 模块
	功能：检查有效shell
	帮助：man pam_shells
	案例：不允许使用/bin/csh的用户本地登录
	
	[root@centos8 ~]#yum -y install csh		# centos7自带 csh ，centos8需要安装
	
	[root@centos8 ~]#vim /etc/pam.d/login
	auth required pam_shells.so			# 给 login 命令增加一个pam认证，"pam_shells.so"只允许用户使用"/etc/shells"文件中列出的shell登录
	......省略
	
	[root@centos8 ~]#vim /etc/shells
	# /bin/csh
	......省略
	
	[root@centos8 ~]#useradd -s /bin/csh testuser
	
	#testuser将不可登录
	[root@centos8 ~]#tail /var/log/secure		# 这里文件中会记录pam验证不过的日志
	......省略	
	
	
7.5 常用的PAM模块 - pam_securetty.so模块
	功能：只允许root用户在/etc/securetty列出的安全终端上登陆
		  注：centos8默认没有"/etc/securetty"这个文件，centos7有
	案例：CentOS 7 允许root在telnet登陆，CentOS7、8都需要安装telnet
		
	// centos7 上 telnet 默认不允许root直接登录，就是因为有 securetty.so 模块校验
	[root@localhost ~]#grep pam_securetty /etc/pam.d/*
	/etc/pam.d/login:auth [user_unknown=ignore success=ok ignore=ignore default=bad] pam_securetty.so
	/etc/pam.d/remote:auth       required     pam_securetty.so     
	
	// remote文件的文件名，虽然没有和telnet这个应用程序的名称保持一致，但是 telnet 仍然内部使用了 remote 的配置
	[root@localhost ~]#cat /etc/pam.d/remote	
	#%PAM-1.0
	auth       required     pam_securetty.so		# centos8 的 remote 文件默认没有这项配置
	auth       substack     password-auth
	auth       include      postlogin
	......省略
	
	
	允许root使用telnet登陆远程主机的两种方法：
		方法1：修改"/etc/securetty"文件，里面加入使用telnet的终端
			vim etc/securetty
			......省略
			pts/0						# 可以使用"tty"命令查看使用的终端
			pts/1
			pts/2
			pts/3
			......省略
			
		方法2：修改"/etc/pam.d/remote" 文件
			vim /etc/pam.d/remote
			#%PAM-1.0
			#auth       required     pam_securetty.so		# 注释和删除这一行
			auth       substack     password-auth
			auth       include      postlogin
			......省略
	
	
7.6 常用的PAM模块 - pam_nologin.so 模块（重要）
	功能：如果/etc/nologin文件存在,将导致非root用户不能登陆,当该用户登陆时，会显示/etc/nologin文件内容，并拒绝登陆
	使用场景：在生产中，这个模块可以临时禁用普通用户登录，比如做系统维护时，希望普通用户不要登录，就可以用这种方式禁用普通用户登录
	
	
范例: 默认此模块可以对ssh等登录有效,但不影响su登录
	
	// 可以看到 login、remote、sshd 都用到了"pam_nologin"模块, 但是 su 命令没有用到
	[root@localhost ~]#grep pam_nologin /etc/pam.d/*
	login:account required pam_nologin.so
	remote:account required pam_nologin.so
	sshd:account required pam_nologin.so

	//创建"/var/run/nologin" 或 "/etc/nologin"就能触发禁止普通用户登录的条件
	[root@localhost ~]#echo pam_nologin deny login > /etc/nologin
	
	// 使用 ssh 登录失败，并且错误信息显示的是"/etc/nologin"文件中的内容
	PS C:\Users\Aaron J WU> ssh -p 22 aaron@192.168.32.100
	aaron@192.168.32.100's password:
	pam_nologin deny login

	Connection closed by 192.168.32.100 port 22
	
	// 使用su命令可以切换为普通用户，因为"/etc/pam.d/su"文件中没有配置"pam_nologin.so"模块
	[root@localhost ~]#su - aaron
	Last login: Tue Nov 22 20:26:23 CST 2022 from 192.168.32.1 on pts/0
	Last failed login: Wed Nov 30 01:26:49 CST 2022 from 192.168.32.1 on ssh:notty
	There was 1 failed login attempt since the last successful login.
	
	
在"/etc/pam.d/su"文件中配置"pam_nologin.so"模块，禁止通过su命令切换为普通用户
	[root@localhost ~]#vim /etc/pam.d/su
	#%PAM-1.0
	account    		required     	pam_nologin.so
	auth            sufficient      pam_rootok.so
	......省略
	
	// 通过 su 命令切换为普通用户失败
	[root@localhost ~]#su - aaron
	pam_nologin deny login

	su: Authentication failure
	[root@localhost ~]#
	
	
删除"/etc/nologin"文件，恢复普通用户登录行为 
	[root@localhost ~]#rm -rf /etc/nologin
	
	// 通过 su 命令成功切换为普通用户
	[root@localhost ~]#su - aaron
	Last login: Wed Nov 30 01:28:01 CST 2022 on pts/0
	Last failed login: Wed Nov 30 01:35:44 CST 2022 on pts/0
	There was 1 failed login attempt since the last successful login.
	[aaron@localhost ~]$
	
	
	// 普通用户通过 ssh 命令成功登录
	PS C:\Users\Aaron J WU> ssh -p 22 aaron@192.168.32.100
	aaron@192.168.32.100's password:
	Last login: Wed Nov 30 01:37:11 2022
	[aaron@localhost ~]$


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


扩展：
	(1)
		// 把某个用户加入到某个组
		gpasswd -a 用户 组
		// 查看当前登录用户信息
		id 用户

	(2) 修改shell的类型
		chsh -s /bin/csh 用户
		getenv passwd 用户
	
	(3) 查找哪些文件包含指定内容
		[root@localhost ~]#grep pam_shells /etc/pam.d/*				
		vmtoolsd:auth       required         pam_shells.so
		vmtoolsd:account    required         pam_shells.so

	(4) 查看当前用户使用的shell
		[root@localhost ~]#echo $SHELL
		/bin/bash
		
	(5)	"/var/log/secure"文件包含了登录失败的日志
		[root@localhost ~]#tail /var/log/secure

	(6) 查看主机支持哪些shell
		[root@localhost ~]#cat /etc/shells
		/bin/sh
		/bin/bash
		/usr/bin/sh
		/usr/bin/bash
		/bin/tcsh
		/bin/csh
		/usr/bin/tmux
		
		
		
		
