
4 shell脚本编程基础知识

4.1 shell 脚本的用途
	将简单的命令组合完成复杂的工作,自动化执行命令,提高工作效率
	减少手工命令的重复输入，一定程度上避免人为错误
	将软件或应用的安装及配置实现标准化
	用于实现日常性的,重复性的运维工作,如:文件打包压缩备份,监控系统运行状态并实现告警等

4.2 shell 脚本基本结构
	shell脚本编程：是基于过程式、解释执行的语言
	
	编程语言的基本结构：
		各种系统命令的组合
		数据存储：变量、数组
		表达式：a + b
		控制语句：if
	
	shell脚本：包含一些命令或声明，并符合一定格式的文本文件
	
	格式要求：首行She-bang机制
		#!/bin/bash
		#!/usr/bin/python
		#!/usr/bin/perl

执行脚本
	方法1: 直接输出文件名运行
		// 加运行权限
		chmod +x hello.sh
	
		// 把 hello.sh 的路径加入到path, 或在已存在的path目录下添加一个软衔接指向  hello.sh
		
		// 直接输入文件名就可以运行
		hello.sh
	
	方法二: 直接加路径运行
		chmod +x hello.sh
		
		// 绝对路径
			/data/hello.sh
		// 相对路径
			./data/hello.sh
	
	方法三: 不加运行权限运行
		
		bash hello.sh
		
		// 这个方法非常有用, bash 能接受前面的标准输出
		cat hello.sh | bash
		
			// 远程的脚本在本机运行, -s 不显示下载信息
			curl -s http://xx.xx.xx/testdir/hello.sh | bash
	
		// 利用计划任务自动运行脚本
		
		
4.3 shell 脚本调试		
	
	挡在运行或调试脚本时, 出现错误时会提示哪一行错误, 但不一定就是提示的那一行出了错误
	    // 打开文件时,直接定位到13行
		vim +13 hello.sh 
	
	
	只检测脚本中的语法错误，但无法检查出命令错误，但不真正执行脚本。有错误会提示哪一行错误,
		bash -n /path/to/some_script
	
	调试并执行
		bash -x /path/to/some_script
		
	
	总结：脚本错误常见的有三种
		语法错误，会导致后续的命令不继续执行，可以用bash -n 检查错误，提示的出错行数不一定是准确的
			语法错误会影响后续命令的运行	
		
		命令错误，默认后续的命令还会继续执行，用bash -n 无法检查出来 ，可以使用 bash -x 进行观察
			命令错误不会影响后续命令的运行
			
		逻辑错误：只能使用 bash -x 进行观察
		
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5 shell脚本编程基础

5.1 变量: 变量表示命名的内存空间，将数据放在内存空间中，通过变量名引用，获取数据
	
变量类型:
	内置变量，如：PS1，PATH，UID，HOSTNAME，$$，BASHPID，PPID，$?，HISTSIZE
	用户自定义变量

不同的变量存放的数据不同，决定了以下
	数据存储方式
	参与的运算
	表示的数据范围

变量数据类型：
	字符
	数值：整型、浮点型,bash 不支持浮点数
	
	
* shell的变量的值默认都当成字符类型存储


5.2 
命名要求
	区分大小写
	不能使程序中的保留字和内置变量：如：if, for
	只能使用数字、字母及下划线，且不能以数字开头，注意：不支持短横线 “ - ”，和主机名相反(主机名支持-，不支持下划线)

命名习惯
	见名知义，用英文单词命名，并体现出实际作用，不要用简写，如：ATM
	变量名大写
	局部变量小写
	函数名小写
	大驼峰	StudentFirstName
	小驼峰	studentFirstName
	下划线: student_name
	
变量定义和引用(变量的生效范围等标准划分变量类型)
		普通变量：生效范围为当前shell进程；对当前shell之外的其它shell进程，包括当前shell的子shell进程均无效
		环境变量：生效范围为当前shell进程及其子进程
		本地变量：生效范围为当前shell进程中某代码片断，通常指函数

变量赋值：
	// 变量赋值的=两边不能有空格,如果写成 name = 'value', 就表示比较
	name='value'
	
	value 可以是以下多种形式
		直接字串：name='root'
		变量引用：name="$USER"
		命令引用：name=`COMMAND` 或者 name=$(COMMAND)
	
	注意：变量赋值是临时生效，当退出终端后，变量会自动删除，无法持久保存，脚本中的变量会随着脚本结束，也会自动删除

删除变量：
	unset 变量
	// 删除name这个变量
	unset name


6 shell脚本编程关于变量

声明变量：
	//自定义变量
	name='xiaoming'
	
	//一个命令运行的结果当做变量值
	name=`whoami`
	
	//把一个命令作为变量的值,这样就可以实现动态命令
	cmd=ls
	$cmd			//运行ls命令
	

变量引用：
	$name
	${name}		//这种写法比较严谨,大部分情况可以省略{}, 有些情况不能省略,示例如下:
		tilte=cto
		name=xiaoming
		echo $tilte_$xiaoming
		echo ${tilte}_${xiaoming}
	
	// 弱引用和强引用
	"$name" 弱引用，其中的变量引用会被替换为变量值
	'$name' 强引用，其中的变量引用不会被替换为变量值，而保持原字符串
	
	// 注意加双引号和不加双引号的区别
	nums=`seq 10`
	echo $nums
	echo "$nums"		//保留原来格式
	echo '$nums'
	

变量追加 += 
		title=cto
		title+=:wang
		
显示所有的变量包括函数 set
	set



环境变量(了解),用的不多,通常都是在shell环境种用,在脚本种很少用，环境变量主要是配置shell环境,也就是交互式运行命令用:

	环境变量：
		可以使子进程（包括孙子进程）继承父进程的变量，但是无法让父进程使用子进程的变量
		一旦子进程修改从父进程继承的变量，会将新的值传递给孙子进程
		一般只在系统配置文件中使用，在脚本中较少使用
	
	
	用户登录后,实际上在一个shell中，查看shell进程编号:
		
		[root@localhost ~]#echo $BASHPID
		1672
		
		[root@localhost ~]#yum -y install psmisc
		
		// 可以看到当前进程的父进程是1668
		// pstree的父进程是当前进程,可以看出, 运行一个命令, 实质上就是在当前shell中开启一个子进程
		[root@localhost ~]#pstree -p
		systemd(1)─┬─NetworkManager(753)─┬─{NetworkManager}(769)
				   │                     └─{NetworkManager}(772)
				   ├─rsyslogd(1060)─┬─{rsyslogd}(1084)
				   │                └─{rsyslogd}(1085)
				   ├─sshd(1059)───sshd(1668)───bash(1672)───pstree(1713)		
		
		
		//运行一个命令,实质上就是在当前shell中开启一个子进程, "&> /dev/null &"表示让命令在后台运行
		[root@localhost ~]#sleep 100 &> /dev/null &
		[1] 1723
		[root@localhost ~]#pstree -p
		systemd(1)─┬─NetworkManager(753)─┬─{NetworkManager}(769)
				   │                     └─{NetworkManager}(772)
				   ├─rsyslogd(1060)─┬─{rsyslogd}(1084)
				   │                └─{rsyslogd}(1085)
				   ├─sshd(1059)───sshd(1668)───bash(1672)─┬─pstree(1875)
				   │                                      └─sleep(1723)
		
		//运行一个bash,也是新开一个子进程
		[root@localhost ~]#bash
		[root@localhost ~]#echo $BASHPID
		1876
		// 可以看到 bash(1876) 是 bash(1672) 的子进程
		[root@localhost ~]#pstree -p
		systemd(1)─┬─NetworkManager(753)─┬─{NetworkManager}(769)
				   │                     └─{NetworkManager}(772)
				   ├─rsyslogd(1060)─┬─{rsyslogd}(1084)
				   │                └─{rsyslogd}(1085)
				   ├─sshd(1059)───sshd(1668)───bash(1672)───bash(1876)───pstree(1891)
		
		// 退出 bash(1876) 这个子进程
		[root@localhost ~]#exit
		exit
		// 退出 bash(1672) 这个子进程, 使用ssh登录后就在这个进程中,所以退出这个进程后也就退出登录了
		[root@localhost ~]#exit
		logout
		Connection to 192.168.32.101 closed.
		PS C:\Users\Aaron J WU>

	
	声明环境变量:
		#声明并赋值,两种写法
			export name=VALUE
			declare -x name=VALUE
		
		#或者分两步实现
			name=VALUE
			export name
		
		
	查看环境变量:
		export
		env
		printenv
		declare -x
	
	删除环境变量
		unset 变量名
		
	
题:查看某一个进程内部的环境变量
	cat  /proc/2156/environ
	

只读变量(常量):
	
	声明只读变量：
		readonly name
		declare -r name
		
	查看只读变量：
		readonly [-p]
		declare -r
	
	unset 不能删除只读变量, 随着程序结束而结束
	

	注意: 取第10个参数要写为 ${10} , $10 会被解析为 $1 和 0
		所以取第10个参数及以上都要加{}
		

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
7 shell脚本编程特殊变量和脚本安全

7.1 位置变量：在bash shell中内置的变量, 在脚本代码中调用通过命令行传递给脚本的参数
	
	$1, $2, ... 		对应第1个、第2个等参数，shift [n]换位置
	$0 					命令本身,包括路径
	$* 					传递给脚本的所有参数，全部参数合为一个字符串
	$@ 					传递给脚本的所有参数，每个参数为独立字符串
	$# 					传递给脚本的参数的个数
	注意：$@ $* 只在被双引号包起来的时候才会有差异
	
	
清空所有位置变量
	set --
	
	
实践1: 实现一个回收站,实现安全 rm
	
	cat /data/scripts/rm.sh
		#!/bin/bash

		WARNING_COLOR="echo -e \E[1;31m"
		END="\E[0m"
		DIR=/tmp/`date +%F_%H-%M-%S`
		mkdir $DIR
		mv $* $DIR
		${WARNING_COLOR}Move $* to $DIR $END

	chmod a+x /data/scripts/rm.sh
	alias rm='/data/scripts/rm.sh'
	#rm *.txt
	
实践2:利用软链接实现同一个脚本不同功能
	
	[root@centos8 ~]#cat test.sh
	#!/bin/bash
	echo $0
	
	[root@centos8 ~]#ln -s test.sh a.sh
	[root@centos8 ~]#ln -s test.sh b.sh
	
	// 在脚本中就可以判断如果是 a.sh 干什么事情, b.sh 干什么事情
	[root@centos8 ~]#./a.sh
	./a.sh
	[root@centos8 ~]#./b.sh
	./b.sh

	
7.2 退出状态码变量，进程执行后，将使用变量 $? 保存状态码的相关数字，不同的值反应成功或失败，$?取值范例 0-255
	
	$?的值为0 			#代表成功
	$?的值是1到255 		#代表失败
	
	可以在脚本中使用以下命令自定义退出状态码:
		exit [n]
	
		// 通过 $? 取出的状态码就是100
		exit 100
		
	注意：
		脚本中一旦遇到exit命令，脚本会立即终止；终止退出状态取决于exit命令后面的数字
		如果exit后面无数字,终止退出状态取决于exit命令前面命令执行结果
		如果没有exit命令, 即未给脚本指定退出状态码，整个脚本的退出状态码取决于脚本中执行的最后一条命令的状态码	


7.3 展开命令

展开命令执行顺序:

	把命令行分成单个命令词
	展开别名
	展开大括号的声明{}
	展开波浪符声明 ~
	命令替换$() 和 ``
	再次把命令行分成命令词
	展开文件通配*、?、[abc]等等
	准备I/0重导向 <、>
	运行命令

防止扩展
	反斜线 \ 会使随后的字符按原意解释	

	
7.4 set 命令实现脚本安全
	-u 在扩展一个没有设置的变量时，显示错误信息， 等同set -o nounset
	-e 如果一个命令返回一个非0退出状态值(失败)就退出， 等同set -o errexit
	-o option 显示，打开或者关闭选项
		显示选项：set -o
		打开选项：set -o 选项
		关闭选项：set +o 选项
	-x 当执行命令时，打印命令及其参数,类似 bash -x

	
在工作中,脚本都要加上 -e 和 -u 参数!!!
	
	
危险示例1:
		
	[root@centos8 ~]#cat test.sh
	#!/bin/bash
	DIR=/opt
	#注意: 如果DIR目录不存在, cd命令就会运行失败。但是下面的rm命令会继续运行,如果是在根目录下运行这个脚本,那就会删除所有文件
	cd $DIR
	rm -rf ./*
	
		
	改进:
	[root@centos8 ~]#cat test.sh
	#!/bin/bash
	# set -e 表示只要又一个命令出现错误就不再往下运行
	# set -e 也就是通过命令状态码判断,但有时候会误判断,比如"grep xiaoming user.txt"没有找到结果,这个命令的状态码就是非0,也会导致脚本exit
	set -e
	DIR=/opt
	cd $DIR
	rm -rf ./*


危险示例2:
		
	[root@centos8 ~]#cat test.sh
	#!/bin/bash
	DIR=/opt
	// 因为没有定义DIr这个变量,也会导致删所有文件
	rm -rf $DIr/*	
	
	改进:
	[root@centos8 ~]#cat test.sh
	// set -u 表示不允许使用没有没有定义的变量
	set -u
	#!/bin/bash
	DIR=/opt
	rm -rf $DIr/*	


(了解) set 命令可以用来定制 shell 环境
	shell环境默认设置有以下选项，变量 $- 记录着当前设置的shell选项，himBH是默认值，5个字母分别有各自含义：
		h：hashall，打开选项后，Shell 会将命令所在的路径hash下来，避免每次都要查询。通过set +h将h选项关闭
		i：interactive-comments，包含这个选项说明当前的 shell 是一个交互式的 shell。所谓的交互式shell,在脚本中，i选项是关闭的
		m：monitor，打开监控模式，就可以通过Job control来控制进程的停止、继续，后台或者前台执行等
		B：braceexpand，大括号扩展
		H：history，H选项打开，可以展开历史列表中的命令，可以通过!感叹号来完成，例如“!!”返回上最近的一个历史命令，“!n”返回第 n 个历史命令
	


	// 打印 $- 变量
	[root@localhost ~]#echo $-
	himBH
	
	// +h表示关闭h选项, 会导致 hash 命令不能使用
	[root@localhost ~]#set +h
	[root@localhost ~]#echo $-
	imBH
	[root@localhost ~]#hash
	-bash: hash: hashing disabled
	// -h表示开启h选项
	[root@localhost ~]#set -h
	[root@localhost ~]#echo $-
	himBH
	[root@localhost ~]#hash
	hits    command
	   1    /usr/bin/man
	   1    /usr/bin/ls

	// 关闭大括号扩展
	[root@localhost ~]#set +B; echo {1..10}
	{1..10}
	// 开启大括号扩展
	[root@localhost ~]#set -B; echo {1..10}
	1 2 3 4 5 6 7 8 9 10

	
	注意: set +h、set +B 都是临时生效, 并不是永久设置！！


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
8 shell脚本编程算术运算


8.1 格式化输出 printf, printf是个内部命令
	echo 输出提示,但是不能做些格式化输出,对齐等
	
	printf "指定的格式" "文本1" ”文本2“……
	
	常用格式替换符:
		%s		字符串
		%d,%i	十进制整数
		%f		浮点格式
		%c		ASCII字符，即显示对应参数的第一个字符
		%b		相对应的参数中包含转义字符时，可以使用此替换符进行替换，对应的转义字符会被转义
		%o		八进制值
		%u		不带正负号的十进制值
		%x		十六进制值（a-f）
		%X		十六进制值（A-F）
		%%		表示%本身
	
	说明:
		%#s 	中的数字代表此替换符中的输出字符宽度，不足补空格，默认是右对齐,%-10s表示10个字符宽，- 表示左对齐
		%03d 	表示3位宽度,不足前面用0补全,超出位数原样输出
		%.2f 	中的2表示小数点后显示的小数位数

	常用转义字符:
		\a		警告字符，通常为ASCII的BEL字符
		\b		后退
		\f		换页
		\n		换行
		\r		回车
		\t		水平制表符
		\v		垂直制表符
		\		表示\本身
	
	// %s 表示以字符串输出，\n 表示以换行符隔开
	[root@localhost ~]#printf '%s\n' 1  2    3
	1
	2
	3
	
	// 右对齐,宽度是3。右对齐是指每行的字符串的右边对齐
	[root@localhost ~]#printf '%3s\n' 1  2    33    111
	  1
	  2
	 33
	111

	// 如果字符串的长度大于对其的宽度,就会出现对不齐的情况
	[root@localhost ~]#printf '%3s\n' 1  2    3    1111
	  1
	  2
	  3
	1111
	
	// 左对齐
	[root@localhost ~]#printf '%-3s\n' 1  2    33    111
	1
	2
	33
	111

	// "%4s %-5s"表示匹配2个字符串,先右对齐,再左对齐
	[root@localhost ~]#printf '%4s %-5s\n' 1  2    33    111
	 1 2
	33 111
	
	// 以浮点数显示,并保留两位小数
	[root@localhost ~]#printf '%.2f\n' 1 2 3.33999999
	1.00
	2.00
	3.34

	[root@localhost ~]#printf "(%s)" 1  2
	(1)(2)
	[root@localhost ~]#printf " (%s)" 1  2
	 (1) (2)
	
	[root@localhost ~]#printf "%-10s %-10s %-4s %s \n" 姓名 性别 年龄 体重 小明 男 20 70 小红 女 18 50
	姓名     性别     年龄 体重
	小明     男        20   70
	小红     女        18   50
	
8.2 算术运算
	Shell允许在某些情况下对算术表达式进行求值，比如：let和declare 内置命令，(( ))复合命令和算术扩展。
	注意：bash 只支持整数运算，不支持小数运算。bc可以支持小数运算
	乘法符号有些场景中需要转义
	
	实现算术运算：
		(1) let var=算术表达式
		(2) ((var=算术表达式)) 和上面等价
		(3) var=$[算术表达式]
		(4) var=$((算术表达式))
		(5) var=$(expr arg1 arg2 arg3 ...)
		(6) declare -i var = 数值
			declare声明变量：https://www.cnblogs.com/gltou/p/15095801.html
		(7) echo '算术表达式' | bc

用let实现算术运算, 支持 ++、 --、+= 等:	
	[root@localhost ~]#x=1
	[root@localhost ~]#y=2
	[root@localhost ~]#let z=x+y
	[root@localhost ~]#echo $z
	3
	
	// j=++i , 先 ++, 再赋值给j
	[root@localhost ~]#i=100; let j=++i; echo i=$i, j=$j
	i=101, j=101
	// j=i++ , 先赋值给j, 再 ++
	[root@localhost ~]#i=100; let j=i++; echo i=$i, j=$j
	i=101, j=100
	
$[] 实现:
	[root@localhost ~]#x=1
	[root@localhost ~]#y=2	
	[root@localhost ~]#z=$[x-y]
	[root@localhost ~]#echo $z
	-1
	
$(()) 实现:
	[root@localhost ~]#x=1
	[root@localhost ~]#y=2	
	[root@localhost ~]#z=$((x-y))
	[root@localhost ~]#echo $z
	-1
	
	// z=$((x-y)) 也可以写成 ((z=x-y))
	[root@localhost ~]#((z=x-y))
	[root@localhost ~]#echo $z
	-1
	
expr 命令实现: 符号左右两边要加空格
	[root@localhost ~]#x=3
	[root@localhost ~]#y=5
	[root@localhost ~]#expr $x + $y
	8
	[root@localhost ~]#expr $x \* $y
	15
	
bc 实现
	[root@localhost ~]#x=3
	[root@localhost ~]#y=5
	[root@localhost ~]#echo $x*$y | bc
	15
	
内置的随机数生成器变量：
	// 生成一个0到32767之间的一个随机数
	[root@localhost ~]#echo $RANDOM
	13507
	
	// 生成1到100之间的数字
	[root@localhost ~]#echo $[RANDOM%100+1]
	42
	
	// 随机字体颜色
	echo -e "\033[1;$[RANDOM%7+31]mhello\033[0m"
	
