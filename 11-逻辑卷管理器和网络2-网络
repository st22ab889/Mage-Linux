
3 网络和OSI分层结构
  有一个专门的职位网络运维工程师，配各种网络设备
  配置固定的IP地址
  多网卡绑定实现负载均衡、容错
  网桥在虚拟化中用的比较多
  centos和Ubuntu的网络配置不一样
  
3.1 作用范围分类
		广域网(WAN,Wide Area Network)：互联网，电信管
		城域网(MAN,Metropolitan Area Network)：企业在城市内部跨地区、跨地域的网络
		局域网(LAN,Local Area Network)：公司内部的网络，这是运维主要负责的
		
	跨地区(比如北京和上海)的网络连接有两个方式：
		拉专线，成本太高
		VPN，通过互联网， 比如出差人员通过VPN连接到公司内部网络,访问某些系统(比如EPR等)。用户通过互联网连到公司的VPN，再通过VPN连接到公司内部网络
		
	为什么企业的宽带比家庭的宽带贵: 因为企业的上行速度和下行速度是一样的！！
	
	RJ-45 就是电脑后面的网络接口！！
	
	
3.2 应用程序对网络的要求
	批处理应用程序
		FTP、TFTP、库存更新
		无需直接人工交互
		带宽很重要，但并非关键性因素
	交互式应用程序
		库存查询、数据库更新
		人机交互
		因为用户需等待响应，所以响应时间很重要，但并非关键性因素，除非要等待很长时间
	实时应用程序
		VoIP、视频
		人与人的交互
		端到端的延时至关重要，多网络要求很高！！
		
		
3.3 网络的特征
		速度：从专业角度来讲，速度和带宽不是同一回事，带宽的单位是频率，速度是每秒传递多少兆数据。但是现在普通人都混为一谈了
		成本
		安全性
		可靠性
		可用性
		可扩展性
		拓扑：
			早期用的更多的是总线拓扑、环形
			网状和半网状拓扑在公共的、关键的网络中才会这么连，因为成本很高，容错性强，坏了一条线，还可以走两外的线
			用的更多的是星型拓扑，比如很多主机连到交换机，就是星型拓扑。缺点是交换机坏了都受影响，如果把一根网线的两端都插在交换机上，就会造成网络风暴，交换机就会瘫痪，连接到交换机上设备都无法联网。
			现在用的更多的是扩展星型拓扑，把主机分为很多批，每一批都连到一个交换机上，然后所有的交换机再连到一个总的交换机上，这个总的交换机接入互联网！！
	
	
3.4 OSI 模型的七层结构
	应用层:为用户提供服务，给用户一个操作
	表示层:编码、格式转换、压缩、加密
	会话层:确定数据是否需要进行网络传递
	传输层:tcp,udp
	网络层:ip地址编码,路由选择(静态路由、动态路由)
	数据链路层：会加校验位，校验位就是把前面的数据通过一个公式进行计算得出的结果。对方收到后，再用同样的公式进行计算，然后和传过来的CRC做比较，如果校验位不一样，说明数据在传输的过程中发生了改变。
	物理层：这里就变成高低电频、光信号发出去。
	
	
3.5 协议数据单元 PDU（Protocol Data Unit），协议数据单元是指对等层次之间传递的数据单位
	物理层的 PDU是数据位 bit
	数据链路层的 PDU是数据帧 frame
	网络层的PDU是数据包 packet
	传输层的 PDU是数据段 segment
	其他更高层次的PDU是消息 message

3.6 三种通讯模式
	unicast: 单播,目标设备是一个
	broadcast: 广播,目标设备是所有
	multicast: 多播,组播,目标设备是多个


	[root@localhost ~]#ifconfig
	eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500						# BROADCAST 指的是广播，MULTICAST指的是多播
			inet 192.168.32.101  netmask 255.255.255.0  broadcast 192.168.32.255
			inet6 fe80::855d:2d56:b31e:41c9  prefixlen 64  scopeid 0x20<link>
			ether 00:0c:29:f9:a9:0f  txqueuelen 1000  (Ethernet)
			RX packets 169  bytes 16360 (15.9 KiB)
			RX errors 0  dropped 0  overruns 0  frame 0
			TX packets 154  bytes 15935 (15.5 KiB)
			TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0	

3.7 冲突域和广播域
	冲突域：两个网络设备同时发送数据,如果发生了冲突,则两个设备处于同一个冲突域,反之,则各自处于不同的冲突域
	广播域：一个网络设备发送广播，另一个设备收到了,则两个设备处于同一个广播域,反之,则各自处于不同的广播域


3.8 三种通讯机制
	单工通信：只有一个方向的通信,比如: 收音机
	半双工通信：通信双方都可以发送和接收信息，但不能同时发送，也不能同时接收,比如:对讲机
	全双工通信：通信双方可以同时发送和同时接收,比如: 手机


查看双工和速度
	// mii-tool 命令显示系统硬件网卡的工作模式
	[root@localhost ~]#mii-tool eth0
	eth0: negotiated 1000baseT-FD flow-control, link ok				# 这里FD就是全双工的意思
	
	[root@localhost ~]#mii-tool -v eth0
	eth0: negotiated 1000baseT-FD flow-control, link ok
	  product info: Yukon 88E1011 rev 3
	  basic mode:   autonegotiation enabled
	  basic status: autonegotiation complete, link ok
	  capabilities: 1000baseT-FD 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD		# FD就是全双工的意思，HD就是半双工
	  advertising:  1000baseT-FD 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD
	  link partner: 1000baseT-HD 1000baseT-FD 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD
	[root@localhost ~]#		
	
	// ethtool这个命令也能看
	[root@localhost ~]#ethtool eth0
	Settings for eth0:
			Supported ports: [ TP ]
			Supported link modes:   10baseT/Half 10baseT/Full				#  当前网卡支持的链路模式： 10兆的半双工，10兆的全双工 
									100baseT/Half 100baseT/Full				#  100兆的半双工，100兆的全双工
									1000baseT/Full							#  1000兆的全双工	
			Supported pause frame use: No
			Supports auto-negotiation: Yes
			Supported FEC modes: Not reported
			Advertised link modes:  10baseT/Half 10baseT/Full				# 10baseT中的T，就是双绞线的缩写
									100baseT/Half 100baseT/Full				# Half 半双工，Full 全双共
									1000baseT/Full
			Advertised pause frame use: No
			Advertised auto-negotiation: Yes
			Advertised FEC modes: Not reported
			Speed: 1000Mb/s													# 速度千兆
			Duplex: Full													# Duplex双工，"Duplex: Full"表示当前是千兆全双工
			Port: Twisted Pair
			PHYAD: 0
			Transceiver: internal
			Auto-negotiation: on
			MDI-X: off (auto)
			Supports Wake-on: d
			Wake-on: d
			Current message level: 0x00000007 (7)
								   drv probe link
			Link detected: yes
	
	
	问题: 有时候打开服务器网卡一看，虽然网卡支持千兆全双工，但是速度(Speed)显示的是100Mb/s，原因是什么？
	原因：因为网卡的工作模式一般是自动协商（Auto）出来的，就是说速度和双工模式是和对端的设备协商出来的，如果交换机或对端的设备只支持百兆，或网线只支持百兆(比如八根网线没有全接或坏了一根),那速度只能是百兆
		
		

如何判断网络断开了：
		// 在VMware中添加一个新网卡，并勾选已连接
		// 查看网卡
		[root@localhost ~]#ip a
		1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
			link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
			inet 127.0.0.1/8 scope host lo
			   valid_lft forever preferred_lft forever
			inet6 ::1/128 scope host
			   valid_lft forever preferred_lft forever
		2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000			# eth就是Ethernet（以太网）的缩写
			link/ether 00:0c:29:f9:a9:0f brd ff:ff:ff:ff:ff:ff
			inet 192.168.32.101/24 brd 192.168.32.255 scope global noprefixroute eth0
			   valid_lft forever preferred_lft forever
			inet6 fe80::855d:2d56:b31e:41c9/64 scope link noprefixroute
			   valid_lft forever preferred_lft forever
		3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000			# 这个是刚刚添加的新网卡
			link/ether 00:0c:29:f9:a9:19 brd ff:ff:ff:ff:ff:ff
			inet6 fe80::6208:93b6:baa9:b832/64 scope link noprefixroute
			   valid_lft forever preferred_lft forever
		
		
		
		// 模拟网络不通，在添加的网卡那里，取消勾线已连接
		[root@localhost ~]#ethtool eth1
		Settings for eth1:
				Supported ports: [ TP ]
				Supported link modes:   10baseT/Half 10baseT/Full
										100baseT/Half 100baseT/Full
										1000baseT/Full
				Supported pause frame use: No
				Supports auto-negotiation: Yes
				Supported FEC modes: Not reported
				Advertised link modes:  10baseT/Half 10baseT/Full
										100baseT/Half 100baseT/Full
										1000baseT/Full
				Advertised pause frame use: No
				Advertised auto-negotiation: Yes
				Advertised FEC modes: Not reported
				Speed: Unknown!
				Duplex: Unknown! (255)
				Port: Twisted Pair
				PHYAD: 0
				Transceiver: internal
				Auto-negotiation: on
				MDI-X: Unknown (auto)
				Supports Wake-on: d
				Wake-on: d
				Current message level: 0x00000007 (7)
									   drv probe link
				Link detected: no										# 没有检测到连接
		
							
							
		[root@localhost ~]#mii-tool eth1
		eth1: no link													# 没有连接
		
		
网络不通可能有各种原因造成，但大体分为两类：
	物理网线坏了
	网络配置问题		
	

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

4 局域网及网络线缆

4.1 局域网 Local Area Network
	
	特点
		网络为一个单位所拥有
		地理范围和站点数目均有限

	主要功能
		资源共享和数据通信

	优点
		能方便地共享昂贵的外部设备、主机以及软件、数据。从一个站点可以访问全网
		便于系统的扩展和逐渐演变，各设备的位置可灵活的调整和改变
		提高系统的可靠性、可用性和易用性
	
	局域网的通信方式非常丰富：
		有线(IEEE 802.3 标准)
		无线(IEEE 802.11 标准):(wifi、蓝牙、红外线)
	
	 
	无线网络:
		WAPI: 中国国家无线网络标准
		Wi-Fi: 无线保真（Wireless Fidelity），是Wi-Fi联盟制造商的商标做为产品的品牌认证，是一个创建于IEEE 802.11标准的无线局域网技术
		
		国内的手机无线网选项显示WLAN (WLAN 无线局域网)：WLAN 就包括 WAPI(国家强制推WAPI) 和 WIFI， 比如苹果的行货手机显示的是"无线局域网"！
		外国的手机显示WIFI：比如苹果的行货手机显示的是"Wi-Fi"！


4.2 局域网的组网设备
	局域网组网也可以用无线，但在关键的服务器环境中，服务器上仍然不会用无线局域网，无线网络不稳定，速度也很难提升！！
	有线网络更稳定，性能更好！！


网线：属于物理层，定义了电气特性（电压、电阻、尺寸规格等）
	双绞线(Twisted-Pair)：两根缠在一起抵消电磁干扰，目前用的最多的是超五类线，接网线时，线的颜色顺序有严格的要求，只有按照正确的顺序接，干扰才会最弱。比如使用超五类线，按照正确的颜色顺序接，才能达到千兆！！
	光纤和接口(Fiber-Optic)：光信号不受电磁干扰，稳定，速度快；如果家用电脑要直接使用光纤上网，需要购买光纤网卡和光纤模块。
	同轴(Cozxial)网线：已被淘汰
	
	
中继器（repeater）：一层设备(工作在物理层)， 放大信号的作用，价格便宜，早期才使用，已被淘汰	
	中继器：标准中继器就两个口 ，只能连接一条线路
	集线器Hub：相当于多端口的中继器。集线器有以下缺点：
		共享带宽，所有的线路共享百兆；
		是个半双工设备，性能比较差；
		不安全，信号发到中继器，中继器会给所有的线路都发信号，不能点对点，网卡虽然会检查数据报文的目标地址，只会接收发给本机的数据包，但是也可以设置网卡接收所有数据包;


网桥（Bridge）和交换机（switch）：二层设备(工作在数据链路层，MAC地址是数据链路层重要标记)，网桥和交换机的工作原理一样，代替了早期的Hub，更加安全高效。网桥和交换机只能隔离冲突域，不能隔离广播域
	
	网桥：网桥是交换机前面的一个设备
		网桥有内存空间，内存里保存端口(连接网线的端口)信息 和 连接到这个端口的设备的mac地址
	
	
	交换机：分为带管理功能和不带管理功能
		有些交换机有镜像端口功能，开启镜像端口后，其它端口的数据都会发一份到镜像端口。这样的交换机都有管理功能！！
		标准的交换机是二层设备
		交换机也有三层设备：三层交换机（也叫汇聚交换机），三层交换机就是具有部分路由器功能的交换机，工作在OSI网络标准模型的第三层(网络层)!!


路由器（router）：解决跨网段的通讯，比如上海和北京的设备连起来，中间需要经过很多网段。路由器有以下
	功能：
		工作在网络层（三层设备）
		分隔广播域和冲突域
		选择路由表中到达目标最好的路径
		维护和检查路由
		
	家用路由器集成了交换机、路由器、无线AP的功能！
	
	
网卡工作在数据链路层，因为网卡有物理连接接口，同时网卡默认带了MAC地址（MAC地址属于数据链路层）
	
	
	

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5 网络设备和局域网技术

5.1 以太网（Ethernet）：目前的局域网标准，IEEE 802.1是国际局域网标准，国际标准和事实标准不一定一样
	以太网在数据链路层和物理层，偏硬件比较多！！

	以太网MAC帧格式，单位 bytes: 
		Preamble(8) + DestinationAddress(6) + SouceAddress(6) + Type(2) + Data(46-1500) + FCS(4)
	
	一帧的字节数范围位：72 --  1526
	前导信息（Preamble）主要作用是检查数据报文是否健康，Wireshark不会显示前导信息，也不会显示校验位（FCS）
	DestinationAddress 是目标主机MAC地址
	SouceAddress 是源主机MAC地址
	Data是真正的数据
	Type里面保存的是上层协议的类型
	
	// 查看ip信息，里面就包含MAC地址
	ip a
	
	
	MAC地址：
		地址字段中的前三个字节(即高位 24 位)是EEE 的注册管理机构 RA 负责向厂家分配
		地址字段中的后三个字节(即低位 24 位)由厂家自行指派，称为扩展标识符，必须保证生产出的适配器没有重复地址
		例如：0e:09:80:55:68:7e
			0e:09:80 是EEE 的注册管理机构分配的，55:68:7e是厂商自定义的
	
	
	(了解)冲突检测的载波侦听多路访问 CSMA/CD ：这是早期局域网通讯的时候以太网的通讯机制
		现在网卡都是工作在交换机环境中，交换机环境中基本上是没有冲突的，以前在hub上连接，经常会冲突。交换机上一个接口就是一个冲突域，不再发生冲突！！！


5.2 虚拟局域网 VLAN （非常常用）：把网络从逻辑上切换成小网络
	
	场景：使用交换机连接设备，假如现在有一个总的交换机，下面接了三台交换机S1、S2、S3，每台交换机下面连着三台主机。S1连接S1A、S1B、S1C，S2连接S2A、S2B、S2C，，S3连接S3A、S3B、S3C。
	弊端: 因为交换机是二层设备，隔离不了广播，所有的交换机连在一起都在一个广播域中，这种场景下，九台主机只要其中一台发一个广播，网络中所有的机器都能收到，不仅性能很差，安全性也不高！！
	以前的解决方法：以前要加路由器（因为隔离广播是路由器的功能），但是在局域网内部部署路由器，成本高，路由器的性能并不是很好，连上路由器会导致两个网络的通讯会比较慢！
	解决思路：为了解决上面的问题，交换机上发明一个新功能 VLAN， VLAN 技术能够实现在一个交换机上把端口按不同的单位（或组织、部门）划分，把一个大的广播域划分为多个虚拟广播域！
	现在的解决方法：
		假如 S1A、S2A、S3A 为一个部门，S1B、S2B、S3B为一个部门，S1C、S2C、S3C为一个部门，VLAN一般用数字表示，假如10，11，12就为划分的三个VLAN，10包括S1A、S2A、S3A，11包括S1B、S2B、S3B，12包括S1C、S2C、S3C
		
	总结：
		实际上就划分VALN，就是把交换机的端口归类	
		一般带管理功能的交换机才有VALN功能

		
5.3 端口汇聚(TRUNK)协议：TRUNK是端口汇聚的意思
	
	场景：两台交换机S1和S2，S1连接S1A、S1B、S1C，S2连接S2A、S2B、S2C，，假如10，11，12为划分的三个VLAN，10包括S1A、S2A，11包括S1B、S2B，12包括S1C、S2C，那么就各要占用三个端口去支撑VLAN!
	问题：如果有很多VLAN，交换机上的端口是有限的，端口被VLAN占用就不能连设备，怎么办？
	解决思路：使用 TRUNK 协议，不管有多少个VLAN，都只使用一个端口！！！
	
	
	TRUNK协议有很多，目前国际上使用的流行协议 IEEE 802.1Q，IEEE 802.1Q帧结构如下，单位 bytes: 
		Preamble(8) + DestinationAddress(6) + SouceAddress(6) + VLAN Tag(4)  + Type(2) + Data(46-1500) + FCS(4)

	VLAN Tag 格式如下:
		TPID(2Byte) + PRI(3bit) + CFI(1bit) + VID(12bit)
	
	VID：VLAN ID（12bit，2的12次方等于4096），表示该数据帧所属VLAN的编号。VLAN ID取值范围是0～4095。由于0和4095为协议保留取值，所以VLAN ID的有效取值范围是1～4094 ！！
	也就是说：只需要一根网线连接两个交换机，共占用两个交换机端口，就可以使交换机支持4094个VLAN！原理就是：因为帧中保存了VLAN的编号，这样就能识别每一帧是属于哪个VLAN！！
	
	

5.4 网络架构，以一个最简单的架构说明：
		运营商
		出口路由器
		出口防火墙
		核心交换机：会连接单位（或组织、部门）的服务器以及相关其它资源，各个设备可以快速连接服务器；连接到核心交换机上的服务器能进行高速的数据访问；核心交换机的速度非常高，能达到10G以上
		汇聚交换机：valan的划分，拿交换机充当路由器的功能
		接入交换机：接入设备
		
	小公司的网络架构可能就两层，接入交换机为一层，汇聚交换机和核心交换机合起来为一层！！


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

6 tcpip协议和tcp详解（重点）
	国际标准是osi模型，但事实上的标准是用的tcpip协议。
	Transmission Control Protocol/Internet Protocol 传输控制协议/因特网互联协议
	TCP/IP是一个Protocol Stack，包括TCP、IP、UDP、ICMP、RIP、TELNET、FTP、SMTP、ARP等许多协议，包含上百个协议，因为tcp和ip协议最重要，所以用这两个协议命名
	
	TCP/IP工作在网络层、传输层、会话层、表示层、应用层，也就是说工作在数据链路层（不包括数据链路层）以上的层
	
	TCP/IP和OSI模型的比较：
		相同点
			两者都是以协议栈的概念为基础
			协议栈中的协议彼此相互独立
			下层对上层提供服务
		不同点
			OSI是先有模型；TCP/IP是先有协议，后有模型
			OSI是国际标准，适用于各种协议栈；TCP/IP实际标准，只适用于TCP/IP网络
			层次数量不同
	
	

6.1 TCP/IP 分层	，RFC官方分为四层:
		Application Layer，应用层
		Transport Layer，传输层
		Internet Layer，互联网层
		Link Layer(media-access)（思科教材里面叫网络接口层。实际叫链路层）
		
	
	TCP/IP和OSI模型的对应关系：
		应用层 		===>> 	应用层、表示层、会话层
		传输层 		===>> 	传输层
		互联网层 	===>> 	网络层
		网络接口层  ===>> 	数据链路层、物理层
		
		注意：但是TCP/IP协议实际上并没有关注网络接口层，网络接口层是用以太网或其他技术！！
	
	
	传输层通过port号（服务器端口固定，客户端端口随机），确定应用层协议，范围0-65535：
		0-1023：系统端口或特权端口(仅管理员可用) ，众所周知，永久的分配给固定的系统应用使用，22/tcp(ssh), 80/tcp(http), 443/tcp(https)
		1024-49151：用户端口或注册端口，但要求并不严格，分配给程序注册为某应用使用，1433/tcp(SqlServer), 1521/tcp(oracle),3306/tcp(mysql),11211/tcp/udp (memcached)
		49152-65535：动态或私有端口，客户端随机使用端口，范围定义：
			/proc/sys/net/ipv4/ip_local_port_range
		
		动态端口范围有点少，但是可以调整：
			// 调整客户端的动态端口范围
			echo 20000 62000 > /proc/sys/net/ipv4/ip_local_port_range
			
			// 列出应用常用的端口号
			cat /etc/services | less
	  

6.2 传输层的两个协议，TCP 和 UDP。TCP特点是可靠通信；UDP特点是高性能，速度快！！
	
TCP(Transmission Control Protocol)
		
	包结构：
		前20个字节固定长度 + 选项和填充（长度可变）  + 数据
		
		"前20个字节固定长度 + 选项和填充（长度可变）" 就是TCP首部！！
		
		选项和填充:
			长度：
				选项和填充部分的长度为4n字节(n是整数)，该部分是根据需要而增加的选项。
				如果不足4n字节，要加填充位，使得选项长度为32位(4字节)的整数倍，具体的做法是在这个字段中加入额外的零，以确保TCP头是32位(4字节)的整数倍。
			
			可选项字段的格式：
				kind(1字节) + length(1字节) + info(length-2字节)
		
			可选项的类型：
				---------------------------------------------------------------------
				/	Kind			Meaning								Reference   /
				/	0				End of Option List					RFC793      /
				/	1				No-Operation						RFC793      /
				/	2				Maximum Segment Size (MSS)			RFC793      /	# 这个选项很重要，最大分段大小
				/	3				WSOPT-Window Scale					RFC1323     /
				/	4				SACK Permitted						RFC2018     /
				/	5				SACK								RFC2018     /
				/	8				TSOPT-Time Stamp Option				RFC1323		/	
				/	30				Multipath TCP(MPTCP)				RFC6824		/
				---------------------------------------------------------------------
				
				重要：MSS（Maximum Segment Size，最大报文长度），是TCP协议定义的一个选项，MSS选项用于在TCP连接建立时，收发双方协商通信时每一个报文段所能承载的最大数据长度
				
				
	TCP首部长度：
		前20个字节的其中4位为"数据偏移"，数据偏移定义了"TCP 报文段的起始处 和 TCP 报文段的数据起始处的距离"，也就是TCP的首部长度
		4位能表示的最大数为15，数据偏移的单位是4个字节（32位）！如果数据偏移等于5，实际偏移为 5 * 4 =20Byte；数据偏移等于6，实际偏移为 6 * 4 =24Byte;......;数据偏移等于15，实际偏移为 15 * 4 = 60Byte
		
		结论：
			TCP首部长度最长为60字节；选项最长为40个字节; 此时数据偏移的十进制值为15；
			TCP首部长度最短为20字节; 选项最短为0个字节；此时数据偏移的十进制值为5；
			
		
	TCP报文段长度可能是TCP首部长度或TCP报文总长度（包括数据部分）: https://blog.csdn.net/m0_52043808/article/details/126729528
		(1) TCP报文段总长度显然有一个最小值，就是当TCP数据字段长度为0的情况。例如TCP的确认报文段，仅仅有一个固定长度（20字节）的首部（假设没有选项字段），其数据字段的长度是0。
		(2) TCP报文段的最大值受两个方面的限制：
			一、IP数据报的总长度有规定的最大长度即65535字节。如果使用20字节的固定长度IP首部，那么TCP报文段的总长度不能超过65515字节。如果超过了这个数值，必须在运输层分割报文段，使每一个TCP报文段不超过65515字节，否则无法封装成IP数据报。
			二、TCP报文段数据的长度不能超过最大报文段长度MSS值。在TCP连接建立阶段，每一方要向对方说明自己所能接受的数据长度是多少（因为收到的数据要先放在TCP的接受缓存中，如果数据太长就会放不下）。通信的双方把自己的接受能力通知对方的TCP，双方根据自己当时的具体条件给出MSS值。
		总结：
			TCP报文段的总长度 <= Min[(对方给出的MSS + TCP 首部)，65515字节]
		
		
	MSS和MTU;
		TCP在三次握手建立连接过程中，会在SYN报文中使用MSS（Maximum Segment Size）选项功能，协商交互双方能够接收的最大段长MSS值。
		MSS是传输层TCP协议范畴内的概念，顾名思义，其标识TCP能够承载的最大的应用数据段长度，因此，MSS=MTU-20字节TCP报头-20字节IP报头，那么在以太网环境下(以太网的MTU值为1500)， MSS值一般就是1500-20-20=1460字节。
		客户端与服务器端分别根据自己发包接口的MTU值计算出相应MSS值，并通过SYN报文告知对方，交互双方会以双方通告的MSS值中取最小值作为发送报文的最大段长。
		
		为什么以太网的MTU为1500？
			由于以太网EthernetII最大的数据帧是1518Bytes这样，刨去以太网帧的帧头14Bytes和帧尾CRC校验部分4Bytes(这部分有时候也叫做FCS)，剩下承载上层协议的地方也就是Data域最大就只能有1500Bytes. 这个值就把它称之为MTU。
		
		MTU TCP-MSS详解: https://zhuanlan.zhihu.com/p/139537936
		TCP/IP协议族的数据链路层基础（1）——MTU: https://www.likecs.com/show-203651381.html
		TCP 的 MTU & MSS: https://blog.csdn.net/u011019726/article/details/94740977
		【TCP协议】MTU和MSS详解: https://www.cnblogs.com/larry-luo/p/11062736.html
		
		
		
	TCP为什么是三次握手，不是两次或四次	？
		TCP是全双工通信，每一端都要确认自己的消息有去有回，二次不够，四次多余！！
		TCP	三次握手是由TCP协议栈自动完成的，不需要应用程序关心
		TCP	三次握手是最简单的情况，如果两台主机同时向对方发起连接，情况又不一样 。TCP同时打开和同时关闭：https://www.dandelioncloud.cn/article/details/1536287037506568194
		
		
		参考资料: 
			TCP/IP：https://www.ietf.org/rfc/rfc1122#section-1.3.3	
			三次握手：https://www.ietf.org/rfc/rfc793
			


sync半连接和accept全连接队列：
	sync半连接：没有完成三次握手之前的连接
	accept全连接：完成三次握手的连接，但是还未被应用调用 accept 取走的连接队列
	
	如果服务服务器有高并发场景，就需要调整半连接和全连接队列的值：
		// 未完成连接队列大小，默认值128,建议调整大小为1024以上
		/proc/sys/net/ipv4/tcp_max_syn_backlog 

		// #完成连接队列大小，默认值128,建议调整大小为1024以上
		/proc/sys/net/core/somaxconn 
	
	
TCP 超时重传：自动重试, 丢包或不能链接
	// 指定在底层IP接管之前TCP最少执行的重传次数，默认值是3
	/proc/sys/net/ipv4/tcp_retries1 
	
	// 指定连接放弃前TCP最多可以执行的重传次数，默认值15（一般对应13～30min）	
	/proc/sys/net/ipv4/tcp_retries2
	
	
TCP 拥塞控制：TCP如果发现网络比较拥堵，可以自动降速，已适应当前的网络状态
	//当前所使用的拥塞控制算法
	/proc/sys/net/ipv4/tcp_congestion_control	
		

TCP 滑动窗口
	TCP每发送一个数据，都需要进行一次应答。当收到了上一个应答，在发下一个数据，但这种方式效率比较低。数据包往返时间越长，通信的效率就越低。
	为了解决这个问题，TCP引入了窗口概念。即在接收窗口范围内的数据，无需等待确认，可以继续发送窗口内数据，直到把发送窗口数据传输完毕。	
	窗口的实现实际上是在操作系统开辟一个缓存空间（空间和序号都是有限的，并且要循环使用，一般为环形队列），发送主机在等到确认应答返回之前，必须在缓冲区保留已发送窗口的数据（超时重传）。收到应答后，将此数据清除。
	参考资料：
		https://blog.csdn.net/ZBraveHeart/article/details/123691305
		https://www.cnblogs.com/Benjious/p/16511217.html
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

7 tcp协议三次握手和四次挥手详解

7.1 TCP四次挥手：正常断开连接，四次挥手是理想状态！！ 如果一端等待超时后自动断开，可能只有三次！！如果网络突然断开， 都没有挥手！！
	
	问题：四次挥手客户端最后一个阶段的状态为"TIME-WAIT", 为什么要等待2MSL(MSL :Maximum Segment Lifetime)？
	回答：
		坚持2MSL时间的TIME_WAIT状态能够确保网络上两个传输方向上尚未被接收到的、迟到的TCP报文段都已经消失(被中转路由器丢弃)。
		因此，一个连接的新的化身可以在2MSL时间之后安全地建立，而绝对不会接收到属于原来连接的应用程序数据，这就是TIME_WAIT状态要持续2MSL时间的原因

	参考资料：
		为什么TCP的TIME_WAIT状态需要维持2MSL：https://www.lofivo.com/posts/40568/
		为什么tcp的TIME_WAIT状态要维持2MSL：https://cloud.tencent.com/developer/article/1450264
		TCP/IP的四元组 五元组 七元组：https://blog.csdn.net/AAA821/article/details/76022315


7.2 有限状态机(FSM:Finite State Machine), tcp协议三次握手和四次挥手过程中的状态变化	
	CLOSED 没有任何连接状态
	LISTEN 侦听状态，等待来自远方TCP端口的连接请求
	SYN-SENT 在发送连接请求后，等待对方确认
	SYN-RECEIVED 在收到和发送一个连接请求后，等待对方确认
	ESTABLISHED 代表传输连接建立，双方进入数据传送状态
	FIN-WAIT-1 主动关闭,主机已发送关闭连接请求，等待对方确认
	FIN-WAIT-2 主动关闭,主机已收到对方关闭传输连接确认，等待对方发送关闭传输连接请求
	TIME-WAIT 完成双向传输连接关闭，等待所有分组消失
	CLOSE-WAIT 被动关闭,收到对方发来的关闭连接请求，并已确认
	LAST-ACK 被动关闭,等待最后一个关闭传输连接确认，并等待所有分组消失
	CLOSING 双方同时尝试关闭传输连接，等待对方确
	

7.3 内核TCP参数优化：上线之前服务器都会先优化：
	
	// 参看帮助
	man 7 tcp

	// 编辑文件/etc/sysctl.conf，加入以下内容：
	net.ipv4.tcp_fin_timeout = 2
	net.ipv4.tcp_tw_reuse = 1
	net.ipv4.tcp_tw_recycle = 1
	net.ipv4.tcp_syncookies = 1
	net.ipv4.tcp_keepalive_time = 600
	net.ipv4.ip_local_port_range = 2000 65000
	net.ipv4.tcp_max_syn_backlog = 16384
	net.ipv4.tcp_max_tw_buckets = 36000
	net.ipv4.route.gc_timeout = 100
	net.ipv4.tcp_syn_retries = 1
	net.ipv4.tcp_synack_retries = 1
	net.ipv4.tcp_max_orphans = 16384
	net.core.somaxconn = 16384
	net.core.netdev_max_backlog = 16384
	
	
	// 让参数生效
	sysctl -p 
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


扩展:

1.模拟服务器不回应某个主机的连接，查看客户端的"SYN-SENT"状态
	
	// -d 匹配目标地址，下面命令表示：禁止本机访问 16.163.80.7
	[root@localhost ~]#iptables -A OUTPUT -d 16.163.80.7 -j DROP
	
	// 本机登录服务器
	[root@localhost ~]# ssh ec2-user@16.163.80.7
	
	// 重新打开一个命令行窗口：客户端运行下面命令，可以查看到"SYN-SENT"状态。
	[root@localhost ~]#ss -nta
	State      Recv-Q Send-Q                                           Local Address:Port                                                          Peer Address:Port
	LISTEN     0      10                                                           *:2222                                                                     *:*
	LISTEN     0      128                                                          *:22                                                                       *:*
	LISTEN     0      100                                                  127.0.0.1:25                                                                       *:*
	ESTAB      0      0                                               192.168.32.101:22                                                            192.168.32.1:51970
	ESTAB      0      36                                              192.168.32.101:22                                                            192.168.32.1:52663
	SYN-SENT   0      1                                               192.168.32.101:55270                                                          16.163.80.7:22			# 这里 SYN-SENT 状态
	ESTAB      0      0                                               192.168.32.101:22                                                            192.168.32.1:51695
	LISTEN     0      10                                                        [::]:2222                                                                  [::]:*
	LISTEN     0      128                                                       [::]:22                                                                    [::]:*
	LISTEN     0      100                                                      [::1]:25
	

2.模拟服务器不回应某个主机的连接，查看客户端的"TCP超时重传"效果
	
下面命令在IP为"192.168.32.101"的主机上运行：

	// tcpdump 是 linux的抓包工具：
	[root@localhost ~]#yum install -y tcpdump
	
	// -s 表示匹配源地址，下面命令表示：拒绝192.168.32.100主机访问本机
	[root@localhost ~]#iptables -A  INPUT -s 192.168.32.100 -j DROP
	
	// 抓包
	[root@localhost ~]#tcpdump -i eth0 -nn port 22 and host 192.168.32.100
	

下面命令在IP为"192.168.32.100"的主机上运行：	
	[root@localhost ~]#ssh 192.168.32.101
	// 新开一个终端连接到"192.168.32.100"主机，运行下面命令可以看到 "192.168.32.100"主机 连接 "192.168.32.101"主机 的连接处于"SYN-SENT"状态
	[root@localhost ~]#ss -nat
	State      Recv-Q Send-Q                                                                   Local Address:Port                                                                                  Peer Address:Port
	LISTEN     0      128                                                                                  *:22                                                                                               *:*
	LISTEN     0      100                                                                          127.0.0.1:25                                                                                               *:*
	ESTAB      0      0                                                                       192.168.32.100:22                                                                                    192.168.32.1:53053
	SYN-SENT   0      1                                                                       192.168.32.100:37506                                                                               192.168.32.101:22
	ESTAB      0      36                                                                      192.168.32.100:22                                                                                    192.168.32.1:53361
	LISTEN     0      128                                                                               [::]:22                                                                                            [::]:*
	LISTEN     0      100                                                                              [::1]:25                                                                                            [::]:*
	

查看IP为"192.168.32.101"的主机的抓包结果：

	//主机"192.168.32.101"抓包结果如下，可以看到"TCP超时重传效果"
	[root@localhost ~]#tcpdump -i eth0 -nn port 22 and host 192.168.32.100
	tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
	listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
	......
	15:56:01.533612 IP 192.168.32.100.37502 > 192.168.32.101.22: Flags [S], seq 710850611, win 29200, options [mss 1460,sackOK,TS val 1074811 ecr 0,nop,wscale 7], length 0			# 客户端连接请求
	15:56:01.571545 IP 192.168.32.1.53053 > 192.168.32.100.22: Flags [.], ack 245, win 508, length 0
	15:56:02.538875 IP 192.168.32.100.37502 > 192.168.32.101.22: Flags [S], seq 710850611, win 29200, options [mss 1460,sackOK,TS val 1075816 ecr 0,nop,wscale 7], length 0			# 客户端连接请求
	15:56:04.545426 IP 192.168.32.100.37502 > 192.168.32.101.22: Flags [S], seq 710850611, win 29200, options [mss 1460,sackOK,TS val 1077823 ecr 0,nop,wscale 7], length 0			# 客户端连接请求
	15:56:08.548914 IP 192.168.32.100.37502 > 192.168.32.101.22: Flags [S], seq 710850611, win 29200, options [mss 1460,sackOK,TS val 1081826 ecr 0,nop,wscale 7], length 0			# 客户端连接请求
	15:56:16.581531 IP 192.168.32.100.37502 > 192.168.32.101.22: Flags [S], seq 710850611, win 29200, options [mss 1460,sackOK,TS val 1089859 ecr 0,nop,wscale 7], length 0			# 客户端连接请求	
	15:56:32.643554 IP 192.168.32.100.37502 > 192.168.32.101.22: Flags [S], seq 710850611, win 29200, options [mss 1460,sackOK,TS val 1105920 ecr 0,nop,wscale 7], length 0			# 客户端连接请求
	15:57:04.708165 IP 192.168.32.100.37502 > 192.168.32.101.22: Flags [S], seq 710850611, win 29200, options [mss 1460,sackOK,TS val 1137984 ecr 0,nop,wscale 7], length 0			# 客户端连接请求
	......
	15:58:09.121105 IP 192.168.32.100.22 > 192.168.32.1.53361: Flags [P.], seq 3617:3709, ack 584, win 317, length 92	# 同时也能抓到 IP为"192.168.32.100"的主机 和 IP为"192.168.32.1"的网关 之间通信的包
	15:58:09.121242 IP 192.168.32.1.53361 > 192.168.32.100.22: Flags [.], ack 3709, win 512, length 0
	^C																													# "ctrl + c" 强制结束
	76 packets captured
	76 packets received by filter
	0 packets dropped by kernel
	[root@localhost ~]#
	
	
3.ss 是 Socket Statistics 的缩写。ss 命令可以用来获取 socket 统计信息，它显示的内容和 netstat 类似。但 ss 的优势在于它能够显示更多更详细的有关 TCP 和连接状态的信息，而且比 netstat 更快。
	当服务器的 socket 连接数量变得非常大时，无论是使用 netstat 命令还是直接 cat /proc/net/tcp，执行速度都会很慢。
	ss 命令利用到了 TCP 协议栈中 tcp_diag。tcp_diag 是一个用于分析统计的模块，可以获得 Linux 内核中第一手的信息，因此 ss 命令的性能会好很多。

	常用选项：
		-V, --version 显示版本号
		-t, --tcp 显示 TCP 协议的 sockets
		-u, --udp 显示 UDP 协议的 sockets
		-x, --unix 显示 unix domain sockets，与 -f 选项相同
		-n, --numeric 不解析服务的名称,如 "22"端口不会显示成"ssh"
		-l, --listening 只显示处于监听状态的端口
		-p, --processes 显示监听端口的进程（Ubuntu 上需要sudo）
		-a, --all 对 TCP 协议来说，既包含监听的端口，也包含建立的连接
		-r, --resolve 把 IP 解释为域名，把端口号解释为协议名称


	// 查看目前主机在和哪个主机通信， -n 表示以数字显示，t表示tcp
	[root@localhost ~]#ss -nt
	State      Recv-Q Send-Q               Local Address:Port                              Peer Address:Port  	
	ESTAB      0      36                  192.168.32.101:22                                192.168.32.1:51695
	
	
	// 查看当前主机上的服务使用的端口
	[root@localhost ~]#ss -ntl
	State      Recv-Q Send-Q               Local Address:Port                              Peer Address:Port
	LISTEN     0      128                              *:22                                           *:*
	LISTEN     0      100                      127.0.0.1:25                                           *:*
	LISTEN     0      128                           [::]:22                                        [::]:*
	LISTEN     0      100                          [::1]:25                                        [::]:*
	
	
	// -t 表示tcp， -p 表示只显示正在使用socket的进程
	[root@localhost ~]#ss -ntp
	State      Recv-Q Send-Q                                           Local Address:Port                                                          Peer Address:Port
	ESTAB      0      36                                              192.168.32.101:22                                                            192.168.32.1:51970               users:(("sshd",pid=1885,fd=3))
	ESTAB      0      0                                               192.168.32.101:22                                                            192.168.32.1:51695               users:(("sshd",pid=1513,fd=3))
	
	注意："Peer"是网络连接另一端机器的常用术语，因为从历史上看，互联网上的所有服务器最初都被认为是平等的对等体，而不是分为"客户端机器"和"服务器机器".
	


4. nc工具可以用来做网络实验、测试，用来监控网络
	
	yum -y install nc
	
	// 模拟一个服务使用端口
	[root@localhost ~]#nc -l 22
	Ncat: bind to :::22: Address already in use. QUITTING.		# 提示端口被占用
	
	// 模拟占用2222端口
	[root@localhost ~]#nc -l 2222
	
	
	// 查看端口被哪个应用程序使用
	[root@localhost ~]#ss -ntlp
	State      Recv-Q Send-Q                                           Local Address:Port                                                          Peer Address:Port
	LISTEN     0      10                                                           *:2222                                                                     *:*                   users:(("nc",pid=1852,fd=4))
	LISTEN     0      128                                                          *:22                                                                       *:*                   users:(("sshd",pid=1006,fd=3))
	LISTEN     0      100                                                  127.0.0.1:25                                                                       *:*                   users:(("master",pid=1169,fd=13))
	LISTEN     0      10                                                        [::]:2222                                                                  [::]:*                   users:(("nc",pid=1852,fd=3))
	LISTEN     0      128                                                       [::]:22                                                                    [::]:*                   users:(("sshd",pid=1006,fd=4))
	LISTEN     0      100                                                      [::1]:25                                                                    [::]:*                   users:(("master",pid=1169,fd=14))
	[root@localhost ~]#
	
	
	// lsof 命令也可以查询端口被哪个应用程序使用
	[root@localhost ~]#lsof -i :2222
	COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
	nc      1852 root    3u  IPv6  23929      0t0  TCP *:EtherNet/IP-1 (LISTEN)
	nc      1852 root    4u  IPv4  23930      0t0  TCP *:EtherNet/IP-1 (LISTEN)
	


5. TCP连接为什么耗费资源：
	浪费内存：比如半连接和全连接队列等资源
	监听端口：一般是轮询机制，相当于就是while循环，浪费CPU资源
	其它IO开销
	
	
6. Wireshark抓包软件的使用：	
	wireshark中"relative sequence number的意思"：https://wiki.wireshark.org/TCP_Relative_Sequence_Numbers
	wireshark抓包新手使用教程：https://www.cnblogs.com/linyfeng/p/9496126.html


7. 在windows上查询某个应用使用的端口
	// tasklist：列出windowns上所有应用程序的经常列表
	PS C:\Users\Aaron J WU> tasklist | findstr ssh
	ssh.exe                       6548 Console                    3      9,100 K

	PS C:\Users\Aaron J WU> netstat -no | findstr 6548
	  TCP    192.168.32.1:64155     192.168.32.101:22      ESTABLISHED     6548


8.其它资料：
	TLS/SSL概述 https://www.cnblogs.com/baihl/p/11967088.html
	iptables 命令基本语法：https://www.cnblogs.com/qinlulu/p/12961628.html
	nat 技术：
		https://blog.csdn.net/weixin_57023347/article/details/120824541
		https://blog.csdn.net/qq_21125183/article/details/86487747
