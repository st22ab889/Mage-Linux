
7 (重点)任务计划管理
	通过任务计划，可以让系统自动的按时间或周期性执行任务
	配置邮件服务，可以实现自动报警！
		// 安装并启动邮件服务
		[root@centos8 ~]#yum -y install postfix
		[root@centos8 ~]#rpm -q postfix
		[root@centos8 ~]#systemctl enable --now postfix

	未来的某时间点执行一次任务
		at	指定时间点，执行一次性任务
		batch 系统自行选择空闲时间去执行此处指定的任务, batch 用的不多！
	
	周期性运行某任务
		cron


7.1 (了解)一次性任务
	at 工具
		由包 at 提供
		依赖于atd服务,需要启动才能实现at任务
		at队列存放在/var/spool/at目录中,ubuntu存放在/var/spool/cron/atjobs目录下
		执行任务时PATH变量的值和当前定义任务的用户身份一致
	
	
	at 命令：at [option] TIME
	
		常用选项：
			-V 显示版本信息
			-t time 时间格式 [[CC]YY]MMDDhhmm[.ss]
			-l 列出指定队列中等待运行的作业；相当于atq
			-d N 删除指定的N号作业；相当于atrm
			-c N 查看具体作业N号任务
			-f file 指定的文件中读取任务
			-m 当任务被完成之后，将给用户发送邮件，即使没有标准输出
		
		TIME：定义出什么时候进行 at 这项任务的时间
			HH:MM [YYYY-mm-dd]
			noon, midnight, teatime（4pm）,tomorrow
			now+#{minutes,hours,days, OR weeks}
			
		注意：
			作业执行命令的结果中的标准输出和错误以执行任务的用户身份发邮件通知给 root
			默认CentOS 8 最小化安装没有安装邮件服务,需要自行安装
	
	
	at 任务执行方式：
		交互式
		输入重定向
		at -f file
	
	
	/etc/at.{allow,deny} 控制用户是否能执行at任务
		白名单：/etc/at.allow 默认不存在，只有该文件中的用户才能执行at命令
		黑名单：/etc/at.deny 默认存在，拒绝该文件中用户执行at命令，而没有在at.deny 文件中的使用者则可执行
		如果两个文件都不存在，只有 root 可以执行 at 命令
		注意："/etc/at.allow"的优先级大于"/etc/at.deny" !
		
			// "/etc/at.deny"文件的用法示例，文件内容就是普通用户的用户名
			cat /etc/at.deny
			xiaoyong
			xiaoqiang
		
	
	// 安装at
	[root@localhost ~]#rpm -ql at
	package at is not installed
	[root@localhost ~]#yum -y install at

实践1：开启计划任务
	[root@localhost ~]#rpm -ql at | grep at
	/usr/bin/at
	/usr/lib/systemd/system/atd.service			# "atd.service"其实就是调用"atd"这个进程，"atd"这个进程始终在后台运行，不断监控计划任务的条件，时间是否到达
	/usr/sbin/atd
	
	[root@localhost ~]#systemctl start atd.service
	[root@localhost ~]#systemctl status atd
	● atd.service - Job spooling tools
	   Loaded: loaded (/usr/lib/systemd/system/atd.service; enabled; vendor preset: enabled)	# enabled 表示下次开机自动启动
	   Active: active (running) since Thu 2022-11-17 17:37:27 CST; 7s ago
	 Main PID: 1623 (atd)
	   CGroup: /system.slice/atd.service
			   └─1623 /usr/sbin/atd -f			# 一直在后台运行的进程

	Nov 17 17:37:27 localhost.localdomain systemd[1]: Started Job spooling tools.

	

实践2：计划任务
	
	[root@localhost ~]#at 18:05
	at> echo at jos is running
	at> touch /data/at.log
	at> <EOT>									# 注意: 输入完成后，按"Ctrl + D"退出，"Ctrl + D"是正在退出
	job 1 at Thu Nov 17 18:05:00 2022

	// 查看已定义的计划任务
	[root@localhost ~]#at -l
	1       Thu Nov 17 18:05:00 2022 a root

	// 如果系统重启这个计划任务不会丢失，因为计划任务写到了磁盘中，
	[root@localhost ~]#ll /var/spool/at/
	total 4
	-rwx------ 1 root root 3172 Nov 17 18:01 a0000101a85dfd
	drwx------ 2 root root    6 Oct 31  2018 spool
	
	[root@localhost ~]#cat /var/spool/at/a0000101a85dfd
	
	[root@localhost ~]#date
	Thu Nov 17 18:6:13 CST 2022	
	
	[root@localhost ~]#ll /data/at.log
	-rw-r--r-- 1 root root 0 Nov 17 18:05 /data/at.log		# 可以看到这个文件生成时间是18:05，和定的计划任务时间一致
	
	// 当计划任务运行完成后会被删除，因为定的这个计划任务是一次性的 
	[root@localhost ~]#ll /var/spool/at/
	total 0
	drwx------ 2 root root 6 Nov 17 18:05 spool
	
	问题：计划任务中有"echo at jos is running",为什么不能看到打印？
	原因：在计划任务中，所有的标准输出，包括标准错误，都不会在屏幕上显示，而是以邮件方式发送。
		  为什么不再屏幕上显示，因为计划任务是未来的时间。未来这个时间可能都没有登录，就算重新登录，终端号也可能变了，就算终端号不变，也不能保证是同一个人登录
	
	
	// 退出终端再重新登陆
	[root@localhost ~]#tty
	/dev/pts/0
	You have mail in /var/spool/mail/root					# echo中的输出以root身份发送了邮件
	
	// 使用mail就可以可看到在计划任务中打印的内容
	[root@localhost ~]#mail
	Heirloom Mail version 12.5 7/5/10. Type Nov 17 18:20:00 2022
	"/var/spool/mail/root": 1 message 1 new
	>N 1 root					THU Nov  17 18:20	14/490	"Output from your job"
	&1																					# 这里输入"1"表示查看标号为1的这封电子邮件			
	Message	1:
	......省略
	& quit																				# 输入"quit"退出
	[root@localhost ~]#
	
	
实践3：删除计划任务
	[root@localhost ~]#at 18:00
	at> rm -rf /data/*
	at> <EOT>
	job 2 at Fri Nov 18 18:00:00 2022
	[root@localhost ~]#at -l						# 如果计划任务设的过期时间，这个计划任务会自动把目标时间设置为明天的这个时间
	2       Fri Nov 18 18:00:00 2022 a root
	[root@localhost ~]#at -d 2						# 根据计划任务编号删除计划任务
	[root@localhost ~]#at -l
	[root@localhost ~]#	
	
	
实践4：用非交互的方式使用计划任务
	
	[root@localhost ~]#echo "wall class is over" | at 18:00
	job 3 at Fri Nov 18 18:00:00 2022
	
	[root@localhost ~]#at -l
	3       Fri Nov 18 18:00:00 2022 a root
	
	// 查看计划任务详情
	[root@localhost ~]#at -c 3  	 # 打印出来的内容前面都是系统变量
	
	[root@localhost ~]#at -d 3


实践5：
	[root@localhost ~]#echo $PATH
	/apps/httpd/bin:/apps/cmatrix/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin	

	[root@localhost ~]#vim /usr/local/bin/test.sh
	[root@localhost ~]#cat /usr/local/bin/test.sh
	#!/bin/bash
	wall at jobs is execute!
	
	[root@localhost ~]#chmod +x /usr/local/bin/test.sh

	// 脚本在path变量路径下，所以可以直接运行
	[root@localhost ~]#test.sh	 

	Broadcast message from root@localhost.localdomain (pts/0) (Thu Nov 17 18:47:38 2022):

	at jobs is execute!
	
	// 通过at计划认为运行
	[root@localhost ~]#at 18:52
	at> test.sh
	at> <EOT>
	job 4 at Thu Nov 17 18:52:00 2022
	[root@localhost ~]#
	Broadcast message from root@localhost.localdomain (Thu Nov 17 18:52:00 2022):		# 这里是到了时间自动运行的结果

	at jobs is execute!
	
	
实践6：
	// 现在的时间加1分钟，但是这个1分钟不是整整1分钟，at 是以分钟为单位的，也就是整分钟的0秒
	[root@localhost ~]#at now+1min
	at> echo test
	at> <EOT>
	job 6 at Thu Nov 17 19:31:00 2022			# 可以看到运行时间是整分钟0秒
	
	[root@localhost ~]#at -l
	6       Thu Nov 17 19:31:00 2022 a root		
	
	

7.2 周期性任务计划 cron	
	周期性任务计划cron相关的程序包：
		cronie：主程序包，提供crond守护进程及相关辅助工具
		crontabs：包含CentOS提供系统维护任务
		cronie-anacron：cronie的补充程序，用于监控cronie任务执行状况，如:cronie中的任务在过去该运行的时间点未能正常运行，则anacron会随后启动一次此任务
	
	
	cron 依赖于crond服务，确保crond守护处于运行状态：
		#CentOS 7 以后版本:
		systemctl status crond
		
		#CentOS 6:
		service crond status
		
		
	cron任务分为
		系统cron任务：系统维护作业，/etc/crontab 主配置文件， /etc/cron.d/ 子配置文件
		用户cron任务：保存在 /var/spool/cron/USERNAME(ubuntu系统存放在/var/spool/cron/crontabs/USERNAME)，利用 crontab 命令管理
	
	计划任务日志：/var/log/cron
	
	
	注意：
		在计划任务中的所有脚本，不要出现类似-v的选项(-v：详细显示命令执行的操作)，因为在计划任务中也看不到运行命令时的输出。反而还会产生大量的垃圾邮件！
			// 在计划任务中避免加上 -v 选项
			[root@localhost test]#cp -v f1.sh /data/test
			‘f1.sh’ -> ‘/data/test/f1.sh’
		事实上，应该把标准输出和标准错误隐藏掉，如下：
			// 把标准输出和标准错误重定向到"/dev/null"，这样即使加上"-v"也不会有输出
			[root@localhost ~]#cp -v f2.sh /data/test > /dev/null
			

	// cron	是常见的服务，crontabs包系统默认自带 
	[root@localhost ~]#rpm -q crontabs
	crontabs-1.11-6.20121102git.el7.noarch
	
	[root@localhost ~]#rpm -q cronie
	cronie-1.4.11-23.el7.x86_64
	
	[root@localhost ~]#rpm -ql cronie
	/etc/cron.d
	/etc/cron.d/0hourly
	/etc/cron.deny
	/etc/pam.d/crond
	/etc/sysconfig/crond
	/usr/bin/crontab
	/usr/lib/systemd/system/crond.service		# 这个server就算实现周期化的一个服务
	/usr/sbin/crond
	/usr/share/doc/cronie-1.4.11
	/usr/share/doc/cronie-1.4.11/AUTHORS
	/usr/share/doc/cronie-1.4.11/COPYING
	/usr/share/doc/cronie-1.4.11/ChangeLog
	/usr/share/doc/cronie-1.4.11/INSTALL
	/usr/share/doc/cronie-1.4.11/README
	/usr/share/man/man1/crontab.1.gz
	/usr/share/man/man5/crontab.5.gz
	/usr/share/man/man8/cron.8.gz
	/usr/share/man/man8/crond.8.gz
	/var/spool/cron	
	
	
	[root@localhost ~]#systemctl status crond.service
	● crond.service - Command Scheduler
	   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)			# enabled 说明开机启动
	   Active: active (running) since Thu 2022-11-17 17:26:35 CST; 2h 20min ago
	 Main PID: 689 (crond)
	   CGroup: /system.slice/crond.service
			   └─689 /usr/sbin/crond -n

	Nov 17 17:26:35 localhost.localdomain systemd[1]: Started Command Scheduler.
	Nov 17 17:26:35 localhost.localdomain crond[689]: (CRON) INFO (RANDOM_DELAY will be scaled with factor 92% if used.)
	Nov 17 17:26:35 localhost.localdomain crond[689]: (CRON) INFO (running with inotify support)	
	
	[root@localhost ~]#crontab --help
	crontab: invalid option -- '-'
	crontab: usage error: unrecognized option
	Usage:
	 crontab [options] file
	 crontab [options]
	 crontab -n [hostname]

	Options:
	 -u <user>  define user
	 -e         edit user's crontab
	 -l         list user's crontab
	 -r         delete user's crontab
	 -i         prompt before deleting
	 -n <host>  set host in cluster to run users' crontabs
	 -c         get host in cluster to run users' crontabs
	 -s         selinux context
	 -x <mask>  enable debugging

	Default operation is replace, per 1003.2
	
	// 这个命令会用vim自动打开一个临时的空白文件，然后就可以在里面按格式添加或删除计划任务
	[root@localhost ~]#crontab -e
	
	// 计划任务的格式说明，注释行以 # 开头。/etc/crontab 格式说明，详情参见 man 5 crontab
	[root@localhost ~]#cat /etc/crontab
	SHELL=/bin/bash								# 默认的SHELL类型
	PATH=/sbin:/bin:/usr/sbin:/usr/bin			# 默认的PATH变量值,可修改为其它路径
	MAILTO=root									# 默认标准输出和错误发邮件给root,可以指向其它用户,应该把标准输出和标准错误隐藏掉，否则crontab会发大量的垃圾邮件

	# For details see man 4 crontabs

	# Example of job definition:
	# .---------------- minute (0 - 59)
	# |  .------------- hour (0 - 23)
	# |  |  .---------- day of month (1 - 31)
	# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
	# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
	# |  |  |  |  |
	# *  *  *  *  * user-name  command to be executed	
	

系统cron计划任务：
	
	[root@localhost ~]#vim /usr/local/bin/test.sh
	[root@localhost ~]#cat /usr/local/bin/test.sh
	#!/bin/bash
	wall cron jobs is execute!

	[root@localhost ~]#crontab -e		# 输入以下内容，保存退出 
	* * * * * test.sh					# 五个 * 表示每分钟都运行一次
	
	[root@localhost ~]#crontab -l
	* * * * * test.sh
	
	// 计划任务重启后仍然有效，因为计划任务写到了文件中
	[root@localhost ~]#cat /var/spool/cron/root
	* * * * * test.sh	
	
	// 发现问题，每分钟的0秒广播没有在屏幕上打印出来。运行"mail"命令发现有了新邮件，显示"command not fount"
	// 因为计划任务的PATH变量和平时的"$PATH"变量不统一，计划任务的PATH变量只有很少的几个。这样就带来了严重的问题，很多命令都不能运行了，比如 useradd 等命令！
	[root@localhost ~]#crontab -e
	* * * * * test.sh
	* * * * * echo $PATH > /data/path.log
	[root@localhost ~]#cat /data/path.log
	/usr/bin:/bin									# 可以看到计划任务的PATH变量只有两个路径，和默认的用户变量相差很大
	
	
	解决方法：
		在脚本前面定义一个path，指定路径，就确保有些环境下path变量没有或不完整，以防止程序运行失败
		对于cron来说，也可以把path添加到corn脚本中
	
	[root@localhost ~]#crontab -e
	PATH=/apps/httpd/bin:/apps/cmatrix/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
	* * * * * test.sh
	                 	
	[root@localhost ~]#
	Broadcast message from root@localhost.localdomain (Thu Nov 17 21:43:01 2022):							# 添加PATH后，广播就能正常收到

	cron jobs is execute!
	
	
	// 删除corn任务，打开后，删除不需要的corn任务就可以了
	[root@localhost ~]#crontab -e		
	
	// 删除所有corn任务
	[root@localhost ~]#crontab -r
	
	[root@localhost ~]#crontab -l
	no crontab for root	
	


指定以用户创建计划任务：
	
	// -u 指定用户
	crontab -u xiaoqiang -e
	
	指定的用户能不能运行，要看用户有没有权限运行这个命令，操作文件或目录的话，也要看是否有权限操作文件或目录！
		

日期格式问题
	0 2 1-5,10,20 1-6 0,6  	意思是，在1到6月的， 1号到5号以及10号或20号，或周六日，每两个小时都会运行！ 天和星期是或的关系 ！ 如果实现天和星期的并且关系？可以在脚本中添加逻辑实现
	30 2-10/2 * * * 		意思是，从2点到10点，每2小时运行一次
	
	// 更多规则，可以查看帮助
	man 5 crontab


crond任务相关文件:
	
	//查看系统中自身带有的计划任务：
	[root@localhost ~]#ll /etc/ | grep cron
	-rw-------.  1 root root      541 Aug  9  2019 anacrontab
	drwxr-xr-x.  2 root root       36 Nov 16 17:33 cron.d				# 这个目录下面放的也是计划任务
	drwxr-xr-x.  2 root root       42 Aug 20  2021 cron.daily			# shell脚本或可执行文件 放到这个目录下，会每天运行一次
	-rw-------.  1 root root        0 Aug  9  2019 cron.deny
	drwxr-xr-x.  2 root root       22 Jun 10  2014 cron.hourly			# shell脚本或可执行文件 放到这个目录下，会每小时运行一次
	drwxr-xr-x.  2 root root        6 Jun 10  2014 cron.monthly			# shell脚本或可执行文件 放到这个目录下，会每月运行一次
	-rw-r--r--.  1 root root      451 Jun 10  2014 crontab
	drwxr-xr-x.  2 root root        6 Jun 10  2014 cron.weekly			# shell脚本或可执行文件 放到这个目录下，会每周运行一次
	
	注意：放到这些目录下，就是由系统来决定具体什么时间运行，这相当于系统调用，用的是系统的功能，还是建议通过"crontab -e"的方式创建计划任务，因为时间可以自己定义！
	
	"/etc/crontab" 文件：
		也可以把计划任务放到系统配置文件"/etc/crontab", 但是这个文件属于系统文件，文件权限是root，普通用户也不能改这个文件，建议还是使用"crontab -e"的方式创建计划任务
	
	"/etc/cron.d/0hourly" 文件：
		[root@localhost cron.daily]#cat /etc/cron.d/0hourly
		# Run the hourly jobs
		SHELL=/bin/bash
		PATH=/sbin:/bin:/usr/sbin:/usr/bin
		MAILTO=root
		01 * * * * root run-parts /etc/cron.hourly	  #"01 * * * * root"表示每小时的01分以root身份运行，"run-parts"实际上是一个脚本，功能就是后面跟一个文件夹，会把文件夹里面的所有内容自定运行！
		
		// "run-parts"使用示例：
		[root@localhost ~]#mkdir /data/test		
		
		[root@localhost ~]#echo echo test1 > /data/test/f1.sh
		[root@localhost ~]#echo echo test2 > /data/test/f2.sh		
		[root@localhost ~]#chmod +x /data/test/*
		
		# run-parts 后面跟文件夹，文件夹里面的可执行文件全部都会被运行
		[root@localhost ~]#run-parts /data/test/
		/data/test/f1.sh:

		test1
		/data/test/f2.sh:

		test2	
		[root@localhost test]#
	
	
	"/etc/cron.daily/", "cron.daily"目录下有日志清理的相关计划任务：
		[root@localhost test]#ll /etc/cron.daily/
		total 8
		-rwx------. 1 root root 219 Apr  1  2020 logrotate				# 自动清理日志，每天运行的清理任务，这是系统自带计划任务。
		-rwxr-xr-x. 1 root root 618 Oct 30  2018 man-db.cron		
		
	 
其它问题：	
	#每3小时echo和wall命令，要运行多个任务，就用分号隔开
	0 */3 * * * wang /bin/echo “howdy”; wall “welcome to Magedu!”
	
	cron任务中不建议使用%，它有特殊用途，它表示换行，且第一个%后的所有字符串会被将成当作命令的标准输入,如果在命令中要使用%，则需要用 \ 转义。注意：将%放置于单引号中是不支持的
		范例：在crontab中%的用法
			30 2 * * * /bin/cp -a /etc/ /data/etc`date +\%F_\%T`
			30 2 * * * /bin/cp -a /etc/ /data/etc`date +'%F_%T'` 	# 有问题
		
		如果计划任务的命令有复杂写法，建议把要运行的命令写在shell脚本中，避免出现问题！
	
	计划任务只能精确到分钟单位，如果要达到秒级别，可以在shell脚本中使用sleep实现，如下写法：
			for min in 0 1 2; do echo "hi"; sleep 20; done
	
	
	
7.3 管理临时文件，比如系统产生的日志文件或其它临时文件
	CentOS 7 使用 systemd-tmpfiles-setup服务实现，这个服务会自动清理垃圾文件
	CentOS 6 使用/etc/cron.daily/tmpwatch定时清除临时文件
	
	管理临时文件用到的配置文件：
		/etc/tmpfiles.d/*.conf
		/run/tmpfiles.d/*.conf
		/usr/lib/tmpfiles/*.conf


	(重要)"/usr/lib/tmpfiles.d/tmp.conf"配置文件说明：
		
		[root@localhost ~]#cat /usr/lib/tmpfiles.d/tmp.conf
		#  This file is part of systemd.
		#
		#  systemd is free software; you can redistribute it and/or modify it
		#  under the terms of the GNU Lesser General Public License as published by
		#  the Free Software Foundation; either version 2.1 of the License, or
		#  (at your option) any later version.

		# See tmpfiles.d(5) for details

		# Clear tmp directories separately, to make them easier to override
		v /tmp 1777 root root 10d													# 每隔10天清理"/tmp"目录下产生的临时文件
		v /var/tmp 1777 root root 30d												# 每隔30天清理"/var/tmp"目录下产生的临时文件

		# Exclude namespace mountpoints created with PrivateTmp=yes
		x /tmp/systemd-private-%b-*
		X /tmp/systemd-private-%b-*/tmp
		x /var/tmp/systemd-private-%b-*
		X /var/tmp/systemd-private-%b-*/tmp
		[root@localhost ~]#		
	
		说明：
			"/tmp"或"/var/tmp"目录是程序运行的时候生成的临时文件，systemd-tmpfiles-setup服务会自动清理这些临时文件！
			生产中的服务产生的大量日志文件如果没有在"/tmp"或"/var/tmp"目录下，将不会自动清理。如果放在其它目录，要按时清理 ！ 
			不管日志放在哪个目录都需要监控磁盘空间的使用，发现磁盘空间满了就要及时删除！
		
		
7.4 (了解)anacron，基本用不上
	对于笔记本/家用电脑来讲，会定期关机，系统中有一些周期性的计划任务，比如"/etc/cron.daily/"下就是每天要运行的任务，这种周期性任务是系统来决定什么时候运行，通常都是半夜(凌晨2或3点)运行！
	如果是家用电脑，这个时间基本上都是关机状态，如果天天都关机，如果长时间如此，计划任务就永远没有时间运行。所以系统中有个"anacron"服务，这个任务的作用是在电脑开机的时候把关机后没有运行的计划任务运行一遍。
	对于服务器来说，服务器不需要关机，所以不存在这个问题 ！ 
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

扩展：

echo和wall：
	问题：为什么echo打印的消息就发送邮件，wall 广播就在屏幕上打印出来？
	原因：因为wall广播不属于标准输出，也不属于标准错误


ubuntu 修改默认的cron的文本编辑工具
	// ubuntu 使用"crontab -e"会询问使用什么工具编辑计划任务
	root@ubuntu1804:~# crontab -e
	no crontab for root - using an empty one
	Select an editor. To change later, run 'select-editor'.
		1. /bin/nano <---- easiest
		2. /usr/bin/vim.basic
		3. /usr/bin/vim.tiny
		4. /bin/ed
		Choose 1-4 [1]:

	// 可以指定一个默认工作，之后编写计划任务时就不会再询问
	root@ubuntu1804:~# cat /etc/profile.d/env.sh
	export EDITOR=vim	


linux中查看周几：
	// 星期(0-6), 0表示周日
	[root@localhost cron.daily]#date +%w
	4


windows也有任务计划管理，打开"计算机管理"就能看到!!
	在Windows 10中打开计算机管理的6种方法：https://jingyan.baidu.com/article/c910274b977e7a8c361d2da6.html
	


