
1 rsyslog日志服务管理

	1)日志可以用来追溯问题、解决问题，还可以分析日志挖掘有价值的信息，以供作为商业分析参考，日志管理很关键！
	
	2)通过Linux的日志管理功能可以把不同的服务统筹的利用Linux的日志管理服务进行管理，可以分门别类把各种服务生成的日志统一用不同的文件或不同的方式进行管理，
	  比如把日志存放在数据库，通过图形化工具(web界面)把数据库记录的日志展示出来！

	3)日志记录的是历史发生的事件，如果不加以约束，日志所占用的空间会越来越大，直到撑满整个硬盘空间。 为了避免日志过于庞大，需要做日志的转储功能，
	  同时还需要控制日志，比如只记录多少日志，特别老的日志可能会删除，或其他处理，从而保证日志既能记录下来，又不至于过于陈旧，造成磁盘空间紧张!
	
	4)loganalyzer是用 php 语言实现的日志管理系统，可将MySQL数据库的日志用丰富的WEB方式进行展示。这实际上就是LAMP架构！
	
	5)数据库、dns、apache、php 等服务自身的日志可以用来判断服务自身的情况，Linux自身有自己的独有日志服务，它记录了操作系统自身的各种事件，
	  也可以把应用程序的事件借助于Linux日志服务统一管理
	
	6)日志记录的内容包括：
		历史事件：时间，地点，人物，事件
		日志级别：事件的关键性程度，Loglevel
	
	7)CentOS 5 之前版本采用的日志管理系统服务
		syslogd: system application 记录应用(应用程序)日志
		klogd: linux kernel 记录内核日志
		
		事件记录格式：
			日期时间 主机 进程[pid]: 事件内容
			C/S架构：通过TCP或UDP协议的服务完成日志记录传送，将分布在不同主机的日志实现集中管理

	8)从CentOS 6 开始，rsyslog是系统中用来管理日志的关键服务。官方网站: https://www.rsyslog.com/
		rsyslog是CentOS 6 以后版本的系统管理服务.它提供了高性能，出色的安全性和模块化设计。
		尽管rsyslog最初是常规的syslogd，但已发展成为一种瑞士军刀式的记录工具，能够接受来自各种来源的输入，并将其转换，然后输出到不同的目的地。
		当应用有限的处理时，RSYSLOG每秒可以将超过一百万的消息传递到本地目的地。 即使在远程的目的地和更精细的处理中，性能通常也被认为是“惊人的”。
		
		rsyslog 特性：
			多线程
			UDP, TCP, SSL, TLS, RELP
			MySQL, PGSQL, Oracle实现日志存储
			强大的过滤器，可实现过滤记录日志信息中任意部分
			自定义输出格式
			适用于企业级中继链
		总结：
			性能更好，支持的日志来源和输出目的地更加丰富，sysklogd支持各种形式的日志数据，功能更加全面！
			rsyslog运行在单机上，收集和管理主机上的相关日志，通常适合于单机日志的管理，适合于单机小环境。
			传统的 rsyslog 存放的日志是分散的，每个主机、每个应用程序都有自己的日志！
			rsyslog 也支持网络，可以通过网络来发送日志！
			rsyslog 的日志来源可能来自本机或本机上的应用程序，也可以来自网络！
		
	9) 日志服务其它解决方案
		ELK：由Elasticsearch, Logstash, Kibana三个软件组成
			非关系型分布式数据库
			基于apache软件基金会jakarta项目组的项目lucene
			Elasticsearch是个开源分布式搜索引擎，可以处理大规模日志数据，比如：Nginx、Tomcat、系统日志等功能
				ES可以用来存放各种日志以及其它数据！
			Logstash对日志进行收集、分析，过滤，并将其存储供以后使用
				Logstash可以把网络中的各种主机上的应用程序、包括各个主机上的日志统一进行收集、过滤，然后发送给ES！
			Kibana 可以提供的日志分析友好的 Web 界面
				Kibana可以把ES中存储的日志用web界面的方式展示出来
		总结：	
			ELK是更为强大的、分布式的日志管理系统！
			ELK系统可以把分散在各个主机上的、各个应用上的日志统一收集起来，汇总到一个集中的服务器，统一管理，统筹分析、过滤，然后在web界面上显示出来！
			ELK是大型企业、或需要集中日志管理的时候经常用到的一种技术！
	
1.1 系统日志术语
	
	facility：设施，从功能或程序上对日志进行归类。比如约定不同的日志存在不同的文件中。
	
		内置分类
			auth, authpriv, cron, daemon, ftp, kern, lpr, mail, news, security(auth),user, uucp, syslog
			说明：
				auth：验证
				authpriv：验证和授权(权限)
				daemon：守护进程
				lpr：打印服务
				news：新闻组，实际上就是早期的bbs
				uucp：是传统的unix打印服务
				
		自定义的分类：如果某个服务的日志不适合内置分类，可以放到自定义分类中
			local0-local7

	Priority 优先级别，从低到高排序
		debug, info, notice, warn(warning), err(error), crit(critical), alert, emerg(panic)
		说明：
			debug：普通信息，详细显示
			info：重要事件
	
	设施和优先级可以参看帮助： man 3 syslog，man logger
		[root@centos8 ~]#yum -y install man-pages
		[root@centos8 ~]#man 3 syslog
	
	
1.2 rsyslog 初步

rsyslog 相关文件
	程序包：rsyslog
	主程序：/usr/sbin/rsyslogd
	CentOS 6：/etc/rc.d/init.d/rsyslog {start|stop|restart|status}
	CentOS 7,8：/usr/lib/systemd/system/rsyslog.service
	配置文件：/etc/rsyslog.conf，/etc/rsyslog.d/*.conf
	库文件： /lib64/rsyslog/*.so

	示例
		[root@localhost ~]# yum install -y rsyslog
	
		[root@localhost ~]# rpm -qi rsyslog
		Name        : rsyslog
		Version     : 8.2102.0
		Release     : 10.el8
		Architecture: x86_64
		......省略
		
		[root@localhost ~]# rpm -ql rsyslog
		/etc/logrotate.d/syslog
		/etc/pki/rsyslog
		/etc/rsyslog.conf							# rsyslog 配置文件
		/usr/lib/systemd/system/rsyslog.service		# service文件
		/usr/lib64/rsyslog/mmanon.so		# 有很多so文件，说明是模块化，很多功能由模块来提供。"apache httpd"也是使用模块化的方式提供功能！
		/usr/lib64/rsyslog/mmcount.so	
		......省略
		/usr/sbin/rsyslogd							# 程序名
		......省略

	
rsyslog配置文件
	
	/etc/rsyslog.conf 配置文件格式：由三部分组成
		MODULES：相关模块配置，到底加载哪些模块，和"apache httpd"一样，用到这个功能的时候才加载到内存中
		GLOBAL： DIRECTIVES：全局配置
		RULES：	日志记录相关的规则配置
	
	RULES配置格式：
		facility.priority; facility.priority… target
		
	facility格式：
		* 									#所有的facility
		facility1,facility2,facility3,... 	#指定的facility列表
	
	priority格式：
		*: 			所有级别
		none：		没有级别，即不记录
		PRIORITY：	指定级别（含）以上的所有级别
		=PRIORITY：	仅记录指定级别的日志信息
	
	target格式：
		文件路径：通常在/var/log/，文件路径前的-表示异步写入
		用户：将日志事件通知给指定的用户，* 表示登录的所有用户
		日志服务器：@host，把日志送往至指定的远程UDP日志服务器 @@host 将日志发送到远程TCP日志服务器
		管道： | COMMAND，转发给其它命令处理
	
	通常的日志文件的格式：
		日志文件有很多，如： /var/log/messages,cron,secure等，基本格式都是类似的。格式如下：
			事件产生的日期时间 主机 进程(pid)：事件内容
	
	centos7和centos8的rsyslog配置文件的格式有点区别，但是区别不大。Ubuntu使用的也是rsyslog服务：
	

	示例1：查看centos8的rsyslog服务的配置文件
		[root@localhost ~]# cat /etc/rsyslog.conf
		......省略
		#### MODULES ####

		module(load="imuxsock"    # provides support for local system logging (e.g. via logger command)
			   SysSock.Use="off") # Turn off message reception via local log socket;
								  # local messages are retrieved through imjournal now.
		module(load="imjournal"             # provides access to the systemd journal
		......省略
		
		#### GLOBAL DIRECTIVES ####
		
		# Where to place auxiliary files
		global(workDirectory="/var/lib/rsyslog")

		# Use default timestamp format
		module(load="builtin:omfile" Template="RSYSLOG_TraditionalFileFormat")

		# Include all config files in /etc/rsyslog.d/
		include(file="/etc/rsyslog.d/*.conf" mode="optional")
		......省略
		
		#### RULES ####

		# Log all kernel messages to the console.
		# Logging much else clutters up the screen.
		#kern.*                                                 /dev/console

		# Log anything (except mail) of level info or higher.
		# Don't log private authentication messages!
		// "*.info"中的*表示表示所有类别，info表示info以及比info级别更高的日志都包含在内
		// "mail.none;authpriv.none;cron.none"表示不包含mail、authpriv、cron服务，none 表示排除，排除的原因是在下面对这些服务有单独的规则定义
		// 下面的规则表示除了mail、authpriv、cron服务，所有服务的info以及info以上级别的日志都写进"/var/log/messages"文件中
		*.info;mail.none;authpriv.none;cron.none                /var/log/messages	

		# The authpriv file has restricted access.
		authpriv.*                                              /var/log/secure		// "authpriv.*"中的*表示所有日志级别

		# Log all the mail messages in one place.
		// "-/var/"中的"-"表示异步写入(不立即写磁盘，先放缓冲区，累积一段时间日志后一起写磁盘，这样多次IO合并为1次IO，速度快，安全性差，有丢失数据的风险)
		mail.*                                                  -/var/log/maillog	


		# Log cron stuff
		cron.*                                                  /var/log/cron

		# Everybody gets emergency messages
		// "omusrmsg"是一个模块，这个模块的功能是，当前登录到这个机器的每个人，都将收到emerg这个级别的日志。比如系统要重启，可能就会群发emerg消息
		// 注意：使用多个账户登录同一主机，然后重启，但没有模拟出效果，可能方法不对，也可能是重启不算emerg级别事件！ 
		*.emerg                                                 :omusrmsg:*		
		
		# Save news errors of level crit and higher in a special file.
		uucp,news.crit                                          /var/log/spooler	// uucp 是传统的unix打印服务；news是新闻组，实际上就是早期的bbs

		# Save boot messages also to boot.log
		// "local7"是自定义分类，将和本地系统启动相关的信息记录到/var/log/boot.log文件中
		local7.*                                                /var/log/boot.log
		
		......省略
	
	
	示例2：查看Ubuntu1804的rsyslog服务的配置文件
		dpkg -l rsyslog				// 查看包信息
		/lib/systemd/system/rsyslog.service
		/etc/rsyslog.conf
		.......省略
		
		cat /etc/rsyslog.conf
		.......省略
		$IncludeConfig /etc/rsyslog.d/*.conf			// 规则放在了"/etc/rsyslog.d/"目录下的配置文件中
		.......省略
		
		cd /etc/rsyslog.d; ls
		50-default.conf
		
		cat 50-default.conf
		.......省略
		*.*;auth,authpriv.none		-/var/log/syslog	//在Ubuntu上记录日志的主要文件是"syslog"，相当于centos7、8的 messages 文件
		.......省略


1.3 日志格式
	[root@centos8 ~]#tail /var/log/messages
	Nov 12 08:34:18 centos8 dnf[14114]: Metadata cache created.
	......省略
	
	说明：
		"Nov 12 08:34:18"是事件产生的日期时间
		"centos8"是主机名最前面的部分
		"dnf[14114]"是进程名称和进程ID
		"Metadata cache created."是事件内容	
	

1.4 rsyslog 的日志来源可能来自本机或本机上的应用程序，也可以来自网络
	如果来自本地应用程序，就要求本地应用程序支持 rsyslog，比如 ssh 服务就可以基于 rsyslog 保存日志，但不是所有日志都会用到 rsyslog，
	有些服务有自己的日志，比如：
		mysql有慢查询日志、二进制日志、通用日志、事务日志等，这些日志文件都是MySQL自己管理；
		"apache httpd"有自己的访问日志、错误日志，也是"apache httpd"自己管理，不用rsyslog；	
	但有些小服务没有必要自己开发一套日志管理系统，所有就采用 rsyslog 服务来管理日志！
		
	
	查看ssh配置文件中的日志部分：
	
		[root@localhost ~]# cat /etc/ssh/sshd_config
		.......省略
		# Logging
		#SyslogFacility AUTH
		SyslogFacility AUTHPRIV			// 指定设施，AUTHPRIV 就是 rsyslog 指定的一个分类
		#LogLevel INFO
		.......省略
		
		[root@localhost ~]# cat /etc/rsyslog.conf
		.......省略
		# The authpriv file has restricted access.
		authpriv.*                                              /var/log/secure		// AUTHPRIV 分类的日志记录在这个文件
		.......省略
		
		[root@localhost ~]# tail -f -n0 /var/log/secure			// 使用 ssh 登录就可以看到日志信息	
		.......省略
	
	
	示例：将ssh服务的日志记录至自定义的local的日志设备
		[root@localhost ~]# cat /etc/ssh/sshd_config
		.......省略
		# Logging
		#SyslogFacility AUTH
		#SyslogFacility AUTHPRIV
		SyslogFacility LOCAL6				// local0到local7为自定义日志分类
		#LogLevel INFO
		.......省略	

		[root@localhost ~]# cat /etc/rsyslog.conf
		.......省略
		local7.*                                                /var/log/boot.log
		local6.*                                                /var/log/sshd.log		// 这样就可以用一个独立的文件专门记录ssh服务的日志
		.......省略
		
		// 当 sshd 服务一重启，就会生成"/var/log/sshd.log"文件
		[root@localhost ~]# systemctl restart rsyslog sshd
		
		[root@localhost ~]# tail -f -n0 /var/log/sshd.log
		.......省略
		
		// logger是一个测试日志的工具，下面命令表示往 local6 这个分类写一个info级别的日志
		logger -p local6.info "hello sshd"		// local6分类对应的日志文件是"/var/log/sshd.log"，所以"hello sshd"将会写到 sshd.log 文件中
		
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 

2 rsyslog实现网络日志和MySQL存储日志
	
2.1 rsyslog实现网络日志
	启用网络日志服务功能，利用 rsyslog 协议，可以将多个远程主机的日志，发送到集中的日志服务器，方便统一管理。
	514端口是rsyslog支持远程连接的默认端口，
	
	
实践：10.0.0.8主机上的日志发往10.0.0.18主机

	10.0.0.18 主机配置:
	
		// 514端口是由rsyslog的tcp模块和udp模块提供
		[root@centos8 ~]# rpm -ql rsyslog | grep im
		/usr/lib64/rsyslog/imtcp.so			// tcp 模块
		/usr/lib64/rsyslog/imudp.so			// udp 模块，tcp模块 和 udp模块功能就是让 rsyslog 具有远程接收日志服务的功能
		......省略

		[root@centos8 ~]#vim /etc/rsyslog.conf
		## MODULES ####
		...省略...
		# Provides UDP syslog reception
		# for parameters see http://www.rsyslog.com/doc/imudp.html
		module(load="imudp") # needs to be done just once
		input(type="imudp" port="514")
		# Provides TCP syslog reception
		# for parameters see http://www.rsyslog.com/doc/imtcp.html
		module(load="imtcp") # needs to be done just once				 // 开启TCP模块
		input(type="imtcp" port="514")	
		
		[root@centos8 ~]#systemctl restart rsyslog
	
	
	10.0.0.8 主机配置:
		
		// 在客户端指定将日志发送到远程的TCP、UDP的日志服务器。下面的配置表示日志既保存在本机，也发到远程主机！TCP协议和UDP协议可以同时用！
		[root@centos7 ~]#vim /etc/rsyslog.conf
		*.info;mail.none;authpriv.none;cron.none /var/log/messages	// 保存在本机
		*.info;mail.none;authpriv.none;cron.none @@10.0.0.18:514	// 使用TCP协议把日志发到远程主机，如果跨公网使用tcp协议，因为公网不稳定
		*.info;mail.none;authpriv.none;cron.none @10.0.0.18:514		// 使用UDP协议把日志发到远程主机，udp在局域网中使用没有问题
		......省略
		
		说明：
			rsyslog服务端口默认为514，可以不用指明端口，如果使用非默认端口，需要指明
			客户端发过去的日志根据服务器rsyslog的配置将日志保存在对应的文件中。比如服务器配置将日志保存在messages文件，那么客户端发过去的日志也保存在messages文件中
			客户端的主机名不要和其它客户端的主机名、以及服务端的主机名一样，如果主机名一样就不能区分出日志的来源
			
		
		[root@centos7 ~]#hostnamectl set-hostname client-1.localhost	
		
		// 退出重新登录
		[root@centos7 ~]#exit
		
		// 重启服务
		[root@client-1 ~]#systemctl restart rsyslog
		
		[root@client-1 ~]#logger "this is a test log on 10.0.0.8"	
	
	验证：	
		// 在 10.0.0.8 主机上查看 message 文件 
		[root@client-1 ~]#cat /var/log/message	
		
		// 在 10.0.0.18 主机上查看 message 文件 
		[root@centos8 ~]#cat /var/log/message	
		
		
2.2 常见日志文件
	/var/log/secure：系统安全日志，文本格式，应周期性分析。比如用户账号登录的日志，可以判断系统是否有安全风险
	/var/log/btmp：当前系统上，用户的失败尝试登录相关的日志信息，二进制格式，lastb 命令进行查看，运行命令就自动读取btmp文件中的内容
	/var/log/wtmp：当前系统上，用户正常登录系统以及重启的相关日志信息，二进制格式，last 命令可以查看，运行命令就自动读取wtmp文件中的内容
	/var/log/lastlog:每一个用户最近一次的登录信息，二进制格式，lastlog 命令可以查看，运行命令就自动读取lastlog文件中的内容
	/var/log/dmesg：
		CentOS7 之前版本系统引导过程中的日志信息(包括硬件信息)，文本格式，开机后的硬件变化将不再记录
		CentOS8 已经没有这个文件，使用专用命令 dmesg 查看，可持续记录硬件变化的情况，centos7也支持 dmesg 命令  
	/var/log/boot.log 系统服务启动的相关信息，文本格式。可以看到就是开机启动打印出来的信息！
	/var/log/messages ：系统中大部分的信息，包含主机日记以及很多服务的日志
	/var/log/anaconda : 记录的是操作系统安装过程中发生的各种事件日志
		/var/log/anaconda/packaging.log ：	 
		/var/log/anaconda/storage.log ： 划分存储的相关信息，包括 grub 的安装信息

2.3 日志管理工具 journalctl
	CentOS 7 以后版，利用Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用 journalctl一个命令，查看所有日志（内核日志和应用日志）
	journalctl 工具非常强大，本身就带有丰富的过滤日志功能
	
	
	journalctl 选项：
		详见 PDF 文档
	
范例：journalctl用法
	#查看所有日志（默认情况下 ，只保存本次启动的日志）
	journalctl			// 直接运行 journalctl 命令，会把系统中所有日志信息全都显示出来
	
	#查看内核日志（不显示应用日志）
	journalctl -k
	
	#查看系统本次启动的日志
	journalctl -b
	journalctl -b -0
	
	#查看上一次启动的日志（需更改设置）
	journalctl -b -1
	
	#查看指定时间的日志
	journalctl --since="2017-10-30 18:10:30"						// 开始的时间
	journalctl --since "20 min ago"
	journalctl --since yesterday
	journalctl --since "2017-01-10" --until "2017-01-11 03:00"		// 日期区间
	journalctl --since 09:00 --until "1 hour ago"					// 从9点开始的前一个小时，也就是9点到10点的日志
	
	#显示尾部的最新10行日志
	journalctl -n
	
	#显示尾部指定行数的日志
	journalctl -n 20
	
	#实时滚动显示最新日志
	journalctl -f
	
	#查看指定服务的日志
	journalctl /usr/lib/systemd/systemd
	
	#查看指定进程的日志
	journalctl _PID=1
	
	#查看某个路径的脚本的日志
	journalctl /usr/bin/bash
	
	#查看指定用户的日志
	journalctl _UID=33 --since today
	
	#查看某个 Unit 的日志，就是查看某个应用的日志
	journalctl -u nginx.service
	journalctl -u nginx.service --since today
	
	#实时滚动显示某个 Unit 的最新日志
	journalctl -u nginx.service -f
	
	#合并显示多个 Unit 的日志
	journalctl -u nginx.service -u php-fpm.service --since today
	
	#查看指定优先级（及其以上级别）的日志，共有8级
	journalctl -p err -b			// 0: emerg , 1: alert , 2: crit , 3: err , 4: warning , 5: notice , 6: info , 7: debug

	#日志默认分页输出，--no-pager 改为正常的标准输出
	journalctl --no-pager
	
	#日志管理journalctl
	#以 JSON 格式（单行）输出
	journalctl -b -u nginx.service -o json
	
	#以 JSON 格式（多行）输出，可读性更好
	journalctl -b -u nginx.serviceqq -o json-pretty
	
	#显示日志占据的硬盘空间
	journalctl --disk-usage
	
	#指定日志文件占据的最大空间
	journalctl --vacuum-size=1G
	
	#指定日志文件保存多久
	journalctl --vacuum-time=1years		
	

2.4 把日志数据存储到MySQL数据库
	php要连接MySQL数据库需要用到 php-mysql(新版本为mysqlnd)包
	rsyslog的日志记录要存储到MySQL数据库需要用到 rsyslog-mysql


实践：
	环境准备：两台主机
		一台：rsyslog日志服务器，IP：10.0.0.18
		一台：MySQL数据库服务器，IP：10.0.0.28
		
		
	配置 rsyslog 日志服务器：
		
		// "yum info"命令用来查看软件(这个软件不用提前安装)的信息，如软件来源于哪个源，软件介绍等
		yum info rsyslog-mysql
		
		yum -y install rsyslog-mysql
		
		// "rpm -qi"查看rpm包信息，只有安装了包，才能查看到该包信息
		rpm -qi rsyslog-mysql			
	
		rpm -ql rsyslog-mysql
		/usr/lib/.build-id
		/usr/lib/.build-id/d7
		/usr/lib/.build-id/d7/77fc839aa07e92f0a8858cf3f122996436c7df
		/usr/lib64/rsyslog/ommysql.so				// 增加了一个库文件，其实就是扩展了 rsyslog 功能，这个库文件可以让 rsyslog 基于 MySQL 存储数据 
		/usr/share/doc/rsyslog/mysql-createDB.sql	// 这个SQL语句用来创建存rsyslog日志的数据库和表

		//查看sql脚本文件内容
		cat /usr/share/doc/rsyslog/mysql-createDB.sql
		CREATE DATABASE Syslog;
		USE Syslog;
		CREATE TABLE SystemEvents
		(
			......省略
		);

		CREATE TABLE SystemEventsProperties
		(
			......省略
		);
		
		// 将 sql 脚本文件复制到 MySQL数据库服务器
		scp /usr/share/doc/rsyslog/mysql-createDB.sql 10.0.0.28:		 # 如果没有指定远程主机存放文件的目录，默认存放在根目录
	
		// 配置rsyslog将日志保存到mysql中
		[root@centos8 ~]#vim /etc/rsyslog.conf
		#
		####MODULES####
		module(load="ommysql")			#在 MODULES 语言下面，如果是 CentOS 8 加此行
		#$ModLoad ommysql				#在 MODULES 语言下面，如果是 CentOS 7，6 加此行
		#在RULES语句块加下面行的格式
		#facility.priority :ommysql:DBHOST,DBNAME,DBUSER, PASSWORD
		*.info :ommysql:10.0.0.28,Syslog,rsyslog,123456
		......省略
		
		说明："*.info :ommysql:10.0.0.28,Syslog,rsyslog,123456" 格式说明:
			ommysql 	是模块名，使用此模块才能连接到MySQL服务
			10.0.0.28	是MySQL服务器的远程地址
			Syslog		是MySQL服务的用户名
			123456		是MySQL服务的用户密码
			
			
	配置 MySQL 日志服务器：
		yum -y install mysql-server
		
		systemctl enable --now mysqld
	
		// mysql运行SQL脚本，创建存rsyslog日志的数据库和表
		mysql < mysql-createDB.sql				# "<"表示标准输入重定向
		
		// 查看 mysql 数据库中的数据库、表，以及创建账户和授权，其中的打印信息省略
		mysql
		mysql> show databases;
		mysql> use Syslog;
		mysql> show tables;
		mysql> create user rsyslog@'10.0.0.%' identified by '123456';	// 创建 MySQL普通账户
		mysql> grant all on Syslog.* to rsyslog@'10.0.0.%';				// 给 MySQL 普通账户授权，MySQL客户端就可以通过指定的主机以及账户连接到数据库


	测试：
		// rsyslog日志服务器重启rsyslog服务
		systemctl restart rsyslog.service
	
		// 在日志服务器上生成日志
		logger "this is a test log from 10.0.0.18"
		
		// 在数据库上查询到上面的测试日志
		mysql> select * from SystemEvents\G;				// "\G"表示垂直顺序显示结果(表中每条记录的每个字段名和其值放在单独一行显示)
		


示例：为了方便阅读，在mysql中，sql语句后面加"\G"表示将查询结果按列打印(也称为"垂直顺序显示")
	
	mysql> select * from product\G；
	*************************** 1. row ***************************
	id: 1
	title: apple
	price: 10
	*************************** 2. row ***************************
	id: 2
	title: grape
	price: 20


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3 基于loganalyzer实现日志的web展示
	loganalyzer是用 php 语言实现的日志管理系统，可将MySQL数据库的日志用丰富的WEB方式进行展示
	官网：https://loganalyzer.adiscon.com


3.1 通过 loganalyzer 展示数据库中的日志
	
实践：
	
	环境准备：三台主机
		一台：rsyslog日志服务器，IP：10.0.0.18
		一台：MySQL数据库服务器，IP：10.0.0.28
		一台：httpd + php 服务器，并安装loganalyzer展示web图形，IP：10.0.0.38

	
	
	在 10.0.0.38 主机上安装httpd, php和相关软件包
		
		// centos8上php默认就是"php-fpm"模式，centos7上默认是模块模式；centos8上装 php-mysqlnd，centos7上装 php-mysql；
		yum -y install httpd php-fpm php-mysqlnd php-gd				// "php-gd"是用来处理图片，可以用饼状图、柱状图等展示一些统计信息
		
		// yum -y install php		// centos7安装php是模块模式，centos8安装php，也实际上也是"php-fpm"模式
		// yum -y install php-fpm	// centos7安装"php-fpm"模式，需要显示指明
		
		// 因为把"apache httpd"和"php"安装在同一台机器上，所以不需要配置，默认可以直接访问
		监听httpd监听的端口80，以及php监听的9000端口都已经有了
		systemctl enable --now httpd php-fpm
		
		
		// 只看到httpd的默认80端口，但是没有php的默认9000端口，因为都在本机，所以走的是unix套接字，unix套接字是一个文件
		ss -ntl
		
		vi /etc/php-fpm.d/www.conf
		......省略
		listen = /run/php-fpm/www.sock		// 可以看到，监听的不是一个端口，而是一个套接字文件
		......省略
		
		说明：	
			unix套接字意味着，如果是本机可以直接使用，因为"Apache httpd"和php安装在同一台机器上，所以它们之间通讯可以不走端口号，而走unix套接字！
			unix套接字相当于连接了两个应用程序，两个应用程序之间的通讯通过一个unix套接字文件来实现
		
		// 在httpd的配置文件了调用了"www.sock"这个sock文件，也就是说"Apache httpd"知道收到php请求应该使用"www.sock"这个文件和php进行通讯
		grep www.sock /etc/httpd/conf.d/php.conf
			SetHandler "proxy:unix:/run/php-fpm/www.sock|fcgi://localhost"
			
	
		// "php.conf"文件来自于"php-fpm"包，也就是说这个配置文件在安装"php-fpm"时会自动生成
		rpm -qf /etc/httpd/conf.d/php.conf/php.conf
		php-fpm-7.2.24-1.module_e18.2.0+313+b04d0a66.x86_64
	 
		
		// 测试PHP服务
		echo "<?php phpinfo(); ?>" > /var/www/html/info.php			// phpinfo()是个php函数，当访问"info.php"时，PHP会自动调用这个函数
		
		// 如果能出现这个界面，说明服务运行成功
		http://10.0.0.38/info.php
		
		
		// 安装 LogAnalyzer
		#从http://loganalyzer.adiscon.com/downloads/ 下载loganalyzer-4.1.10.tar.gz，然后拷贝到主机
		tar xvf loganalyzer-4.1.10.tar.gz
		
		mv loganalyzer-4.1.10/src/ /var/www/html/log		// "loganalyzer-4.1.10/src/"这个目录下才是真正的php程序
		
	
		// 创建配置文件以及修改配置文件权限
		touch /var/www/html/log/config.php					// "config.php"这个配置文件就是用来保存数据库的连接信息
		chmod 666 /var/www/html/log/config.php
		
		// 实际上"LogAnalyzer"已经提供了脚本来实现创建配置文件以及修改配置文件权限
		ls loganalyzer-4.1.10/contrib/
		configure.sh	secure.sh
		
		// 也可以直接通过这个脚本创建配置文件以及修改配置文件权限
		cat loganalyzer-4.1.10/contrib/configure.sh
		#!/bin/sh
		
		touch config.php
		chmod 666 config.php
		
		// 配置完成后可以运行这个脚本，回收配置文件权限，防止被其他人更改 
		cat loganalyzer-4.1.10/contrib/secure.sh
		#!/bin/sh
		chmod 644 config.php
	
	
		// 在浏览器中打开以下连接
		http://10.0.0.38/log
		根据页面提示点击，一直到配置数据库连接信息页面，在这个页面配置数据库连接相关参数(这些配置会写到"/var/www/html/log/config.php"文件中)，如下：
			Name of the Source：My Syslog Source		
			Source Type:		MYSQL Native
			Select View：		Syslog Fields
			Table type：		MonitorWare
			Database Host：		10.0.0.28
			Database Name：		Syslog
			Database Tablename：SystemEvents
			Database User：		rsyslog
			Database Password：	123456
		然后下一步，直到完成，界面自动刷新，跳转到"http://10.0.0.38/index.php"，正常情况下会显示出日志！
		
		
	测试：
	
		// 在日志服务器上生成日志
		logger "this is a test loganalyzer log from 10.0.0.18"
		
		//刷新界面，正常情况下可以看到刚刚添加的测试日志记录
		http://10.0.0.38/index.php
		
		// 查看日志的统计信息
		http://10.0.0.38/statistics.php
	
	
	安全加强:
	
		// 打开这个连接可以重新配置
		http://10.0.0.38/install.php
		
		
		// 为了防止配置被修改，需要修改配置文件权限
		chmod 644 /var/www/html/log/config.php
		
		
3.2 logrotate 日志转储
	日志转储就是对日志做一些约定，不做约定日志可能会越来越多，最终导致日志文件占满整个硬盘空间。比如 nginx 和 Apache httpd 都有访问日志，
	这些访问日志如果不做限制，占用的空间会越来越大，直到占满硬盘。为了避免这种情况，可以写计划任务，删除超过一定时间的日志，保留最近的日志。
	
	系统中自带 logrotate 服务管理日志，它可以自动做日志转储(也称为日志滚动)，能实现以下功能：
		(1)每隔一个时间周期或满足了其它限制条件，就生成一个新的空日志文件用来保存新生成的文件，旧的日志文件会被重命名(在原文件名上加序号或时间后缀)保存！
		(2)可以根据定义的规则自动删除过期的日志文件！
		(3)因为历史日志文件的后缀都是序号或时间戳为后缀，所以可以很方便进行过滤、筛选
	logrotate 服务已经实现了这些功能，所以没有必要自己写脚本实现！
 
 
	logrotate 介绍	
		logrotate 程序是一个日志文件管理工具。用来把旧的日志文件删除，并创建新的日志文件，称为日志转储或滚动。
		可以根据日志文件的大小，也可以根据其天数来转储，这个过程一般通过 cron 程序来执行
	
	
	logrotate 配置
		软件包：logrotate
		相关文件
			计划任务：/etc/cron.daily/logrotate
			程序文件：/usr/sbin/logrotate
			配置文件：/etc/logrotate.conf
			日志文件：/var/lib/logrotate/logrotate.status
	

logrotate 初步：
	 
	// logrotate 包系统自带
	[root@localhost ~]#rpm -qi logrotate
	Name        : logrotate
	Version     : 3.8.6
	......省略
	URL         : https://github.com/logrotate/logrotate
	Summary     : Rotates, compresses, removes and mails system log files
	Description :																// 描述信息说明了 logrotate 程序的功能
	The logrotate utility is designed to simplify the administration of
	log files on a system which generates a lot of log files.  Logrotate
	allows for the automatic rotation compression, removal and mailing of
	log files.  Logrotate can be set to handle a log file daily, weekly,
	monthly or when the log file gets to a certain size.  Normally,
	logrotate runs as a daily cron job.

	Install the logrotate package if you need a utility to deal with the
	log files on your system.
	
	
	// 系统中很多服务都有自己的日志文件，利用 logrotate 可以让日志的大小不会过于庞大，可以定义周期生成新日志和删除旧日志
	[root@localhost ~]#rpm -ql logrotate
	/etc/cron.daily/logrotate					# logrotate 实现基于计划任务，"/etc/cron.daily/"目录下的计划任务会每天运行一次
	/etc/logrotate.conf
	/etc/logrotate.d
	/etc/rwtab.d/logrotate
	/usr/sbin/logrotate							# logrotate 程序，可以自动做日志转储
	......省略
	
	
	// 可以发现 logrotate 程序本身被计划任务调用
	[root@localhost ~]#cat /etc/cron.daily/logrotate
	#!/bin/sh

	/usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf		// logrotate 会根据"logrotate.conf"文件定义的规则对日志做转储
	EXITVALUE=$?
	if [ $EXITVALUE != 0 ]; then
		/usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
	fi
	exit 0
	
	// "/etc/logrotate.conf"文件定义了日志转储的规则，
	[root@localhost ~]#cat /etc/logrotate.conf
	# see "man logrotate" for details
	# rotate log files weekly
	weekly							// 表示每周做一次日志的滚动(转储)，也就是每周会生成一个新日志文件，新日志文件的文件名和原来一样

	# keep 4 weeks worth of backlogs
	rotate 4						// 表示保证最近4个版本，其余更早的日志文件会被删除

	# create new (empty) log files after rotating old ones
	create							// 表示旧日志滚动之后，会生成一个空的新日志文件，用来存放新日志

	# use date as a suffix of the rotated file
	dateext							// 表示旧日志的文件名会添加时间后缀，如果没有配置此项，后缀默认为数字序号

	# uncomment this if you want your log files compressed
	#compress

	# RPM packages drop log rotation information into this directory
	include /etc/logrotate.d		//针对每个服务可以单独指定日志转储规则。上面都是全局性配置(也就是说只要没有特殊约定，都按照上面的规则)。

	# system-specific logs may be also be configured here.
	
	
	// "/etc/logrotate.d/"目录下是每个服务自己的日志转储配置文件，也就是说每个服务想实现自己的日志转储，需要单独创建一个配置文件放在此目录下
	[root@localhost ~]#ls  /etc/logrotate.d/
	bootlog  btmp  chrony  nginx  psacct  syslog  yum	
	
	
	// btmp 就是 "/var/log/btmp" 日志文件的转储规则，没有定义的规则参数，就继承"/etc/logrotate.conf"文件中的配置参数
	[root@localhost ~]#cat /etc/logrotate.d/btmp
	# no packages own btmp -- we'll rotate them here
	/var/log/btmp {					// "/var/log/btmp"是转储的目标文件
		missingok					// "missingok"表示，如果"/var/log/btmp"这个文件丢了，不会影响当前的日志记录，也不会报严重的错误
		monthly						// 一个月转储一次
		create 0600 root utmp		// 转储后创建的新文件权限，以及所有者和所属组
		rotate 1					// 保留最后一个版本
	}	
	
	
	说明：
		"/etc/logrotate.d/"目录下是每个服务自己的日志转储配置文件，相当于 logrotate 的子配置文件，对于子配置文件来说，
		子配置文件没有指定的配置参数会继承总配置文件中的参数(如果总配置文件中也没有定义，将使用 logrotate 的默认参数)，
		指定的子配置参数会覆盖总配置文件中的参数。也就是说子配置文件的配置参数的优先级大于总配置文件的配置参数！
		
	

logrotate 的配置规则：
	
	配置文件主要参数如下：
		-------------------------------------------------------------------------------------------------------------------------------	
		配置参数				|	说明
		-------------------------------------------------------------------------------------------------------------------------------	
		compress				|	通过gzip压缩转储以后的日志
		-------------------------------------------------------------------------------------------------------------------------------
		nocompress				|	不压缩
		-------------------------------------------------------------------------------------------------------------------------------
		copytruncate			|	用于还在打开中的日志文件，把当前日志备份并截断
		-------------------------------------------------------------------------------------------------------------------------------
		nocopytruncate			|	备份日志文件但是不截断
		-------------------------------------------------------------------------------------------------------------------------------
		create mode owner group	|	转储文件，使用指定的权限，所有者，所属组创建新的日志文件
		-------------------------------------------------------------------------------------------------------------------------------
		nocreate				|	不建立新的日志文件
		-------------------------------------------------------------------------------------------------------------------------------
		delaycompress			|	和 compress 一起使用时，转储的日志文件到下一次转储时才压缩
		-------------------------------------------------------------------------------------------------------------------------------
		nodelaycompress			|	覆盖 delaycompress 选项，转储同时压缩
		-------------------------------------------------------------------------------------------------------------------------------
		errors address			|	专储时的错误信息发送到指定的Email 地址
		-------------------------------------------------------------------------------------------------------------------------------
		ifempty					|	即使是空文件也转储，此为默认选项
		-------------------------------------------------------------------------------------------------------------------------------
		notifempty				|	如果是空文件的话，不转储
		-------------------------------------------------------------------------------------------------------------------------------
		mail address			|	把转储的日志文件发送到指定的E-mail 地址
		-------------------------------------------------------------------------------------------------------------------------------
		nomail					|	转储时不发送日志文件
		-------------------------------------------------------------------------------------------------------------------------------
		olddir directory		|	转储后的日志文件放入指定目录，必须和当前日志文件在同一个文件系统
		-------------------------------------------------------------------------------------------------------------------------------
		noolddir				|	转储后的日志文件和当前日志文件放在同一个目录下
		-------------------------------------------------------------------------------------------------------------------------------
		prerotate/endscript		|	在转储以前需要执行的命令，这两个关键字必须单独成行
		-------------------------------------------------------------------------------------------------------------------------------
		postrotate/endscript	|	在转储以后需要执行的命令，这两个关键字必须单独成行
		-------------------------------------------------------------------------------------------------------------------------------
		daily					|	指定转储周期为每天
		-------------------------------------------------------------------------------------------------------------------------------
		weekly					|	指定转储周期为每周
		-------------------------------------------------------------------------------------------------------------------------------
		monthly					|	指定转储周期为每月
		-------------------------------------------------------------------------------------------------------------------------------
		hourly					|	定转储周期为每小时
		-------------------------------------------------------------------------------------------------------------------------------
		rotate count			|	指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份
		-------------------------------------------------------------------------------------------------------------------------------
		tabooext [+] list		|	让logrotate不转储指定扩展名的文件，缺省的扩展名是：.rpm-orig, .rpmsave, v, 和 ~
		-------------------------------------------------------------------------------------------------------------------------------
		size size				|	当日志文件到达指定的大小时才转储，bytes(缺省)及KB或MB
		-------------------------------------------------------------------------------------------------------------------------------
								|	默认，对每个转储日志运行prerotate和postrotate脚本，日志文件的绝对路径作为第一个参数传递给脚本。 
		sharedscripts			|	这意味着单个脚本可以针对与多个文件匹配的日志文件条目多次运行（例如/ var / log / news /*.example）。
								|    如果指定此项sharedscripts，则无论有多少个日志与通配符模式匹配，脚本都只会运行一次
		-------------------------------------------------------------------------------------------------------------------------------
		nosharedscripts			|	针对每一个转储的日志文件，都执行一次prerotate 和 postrotate脚本，此为默认值	
		-------------------------------------------------------------------------------------------------------------------------------
		missingok				|	如果日志不存在，不提示错误，继续处理下一个
		-------------------------------------------------------------------------------------------------------------------------------
		nomissingok				|	如果日志不存在，提示错误，此为默认值
		-------------------------------------------------------------------------------------------------------------------------------
	
	
	范例： 设置nginx的日志转储规则
		cat /etc/logrotate.d/nginx
		/var/log/nginx/*.log {			# 对"/var/log/nginx/"目录下所有以".log"结尾的日志文件做转储
			daily
			rotate 100
			missingok
			notifempty					# 如果是空文件的话，不转储
			nocompress					# 不压缩，但压缩后占用的空间少一些
			delaycompress				# 延迟压缩, 第一次转储的时候不压缩，第一次之后的转储就开始压缩
			create 644 ngnix nginx		# 生成的新日志文件的权限为644，文件所有者为ngnix, 所属组为ngnix
			postrotate					# 在转储以后需要执行的命令，相当于命令开始标记
				// nginx 日志转储存在一个问题，当新的空日志文件生成后，它仍然会把日志往旧的日志文件中写入
				// "USR1" 是nginx自定义信号，表示重新打开日志文件，当发送USR1信号给nginx，nginx就会打开新的日志文件，并将日志写到新日志文件
				if [ -f /apps/nginx/logs/nginx.pid ]; then		# "nginx.pid"保存的是nginx进程的进程编号，如果这个文件存在才运行下面的命令
					kill -USR1 `cat /app/nginx/logs/nginx.pid`
				fi
			endscript					# 命令结束标记
		}
		
		
		问题：nginx的日志转储，为什么不能直接将日志写到新的日志文件中，要发信号重新打开日志文件？
		回答：虽然新的日志文件名和路径和原来的一样，但Linux根据文件路径最终拿到的是文件描述符，文件在使用过程中虽然被改名，
			 但是文件重命名不影响文件的描述符。所以即使新的文件保持和原来一样的文件名和路径，日志也无法写到新的日志文件中。
			 所以需要打开新的日志文件，拿到新的日志文件的文件描述符，才能将日志写到新的日志文件中！
		
		
		注意点：
			
			(1)"/apps/nginx/logs/nginx.pid"这个文件需要在nginx的配置文件中配置，配置后才会生成
				参考资料：https://blog.csdn.net/qq_42606357/article/details/117484813
			
			(2)查看nginx帮助：
				nginx -h
				
				man nginx
				......省略
				SIGUSR1          Reopen log files.							# nginx自定义的 USR1 信号，使用时可以省略"SIG"
				SIGUSR2          Upgrade the nginx executable on the fly.	# nginx自定义的 USR2 信号，使用时可以省略"SIG"
				......省略
	
	
实践：对指定日志手动执行日志转储

	#生成测试日志
	[root@centos8 ~]#dd if=/dev/zero of=/var/log/test1.log bs=2M count=1	
	[root@centos8 ~]#dd if=/dev/zero of=/var/log/test2.log bs=2M count=1


	#针对不同的日志创建转储配置文件，通过日志转储规则实现日志转储效果。
	[root@centos8 ~]#cat /etc/logrotate.d/test1
	/var/log/test1.log {
		daily											# 每天转储
		rotate 5
		compress
		delaycompress									# 延迟压缩
		missingok
		size 1M											# 当日志大小满1M时转储。注意：这里转储有两个条件，只要满足其中一个条件就开始转储
		notifempty
		create 640 bin nobody
		postrotate
			echo `date +%F_%T` >> /data/test1.log		# 将日志转储的时间记录到指定的文件中，这样就可以看到转储记录
		endscript
	}
	
	[root@centos8 ~]#cat /etc/logrotate.d/test2
	/var/log/test2.log {
		daily												
		rotate 5
		compress
		delaycompress
		missingok
		size 1M							
		notifempty
		create 644 root root
		postrotate
			echo `date +%F_%T` >> /data/test2.log
		endscript
	}	
	
	
	# 针对一个测试日志，手动执行日志转储，也就是手工触发日志转储，如果日志满足了转储条件，就会马上转储
	[root@centos8 ~]#logrotate /etc/logrotate.d/test1
	
	# 因为是针对的某一个配置触发，所以不会继承总配置文件中的参数，这个配置也没有自己定义历史日志文件的文件名后缀，所以默认以数字序号为后缀
	[root@centos8 ~]#ll /var/log/test*
	-rw-r----- 1 root root 0 Dec 14 16:38 /var/log/test1.log
	-rw-r--r-- 1 root root 2097152 Dec 14 16:35 /var/log/test1.log.1	# 以数字序号为后缀。因为定义了延迟压缩，所以下一次转储后的文件名为 test1.log.2.gz	
	-rw-r--r-- 1 root root 2097152 Dec 14 16:36 /var/log/test2.log	
	
	
	[root@centos8 ~]#ls /data
	test1.log
	[root@centos8 ~]#cat /data/test1.log			# 记录了转储的时间
	2019-11-12_14:00:14
	
	
	# 对所有日志进行手动转储，也就是手动触发总配置文件，子配置文件会继承总配置文件的参数, 所以即使子配置文件没有定义转储日志文件的文件名的后缀形式，也会从总配置文件继承
	[root@centos8 ~]#logrotate /etc/logrotate.conf		# 总配置文件会调用子配置文件(子配置文件必须在指定的目录下)，所以能够实现 test1.log 和 test2.log 的日志转储		
	[root@centos8 ~]#ll /var/log/test*
	-rw-r--r-- 1 bin nobody 0 Nov 12 14:00 /var/log/test1.log					# 因为"test1.log"不满足转储条件，所以即使触发总配置文件，也不会转储
	-rw-r--r-- 1 root root 2097152 Nov 12 13:59 /var/log/test1.log.1
	-rw-r--r-- 1 root root 0 Nov 12 14:01 /var/log/test2.log
	-rw-r--r-- 1 root root 2097152 Nov 12 13:59 /var/log/test2.log-20191112		# 因为总配置文件定义了加时间格式，所以历史日志的文件名后缀为日期 
	
	
	[root@centos8 ~]#ls /data
	test1.log test2.log
	[root@centos8 ~]#cat /data/test1.log
	2019-11-12_14:01:51								# 记录了转储的时间
	
	
	说明：
		虽然定义了日志大小达到 1M 就转储，但是仍然是一天只检查一次，因为计划任务是每天运行一次，主要取决于任务计划的运行周期！
		每天运行一次的计划任务，一般是半夜两点到四点之间运行计划任务，时间并不固定，由系统自动调度！
		工作中需要做日志定时转储，不用写脚本，直接写子配置文件，然后放在指定的目录下就能实现！
	
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

扩展：

	LAMP 架构，它指一组通常一起使用来运行动态网站或者服务器的自由软件：
		Linux，操作系统；
		Apache，网页服务器；https://httpd.apache.org/	
		MySQL，数据库管理系统（或者数据库服务器）；
		PHP 和有時 Perl 或 Python，脚本语言。
	
	wordpress与discuz 都需要连接数据库
		WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站
		Discuz是一个开源论坛程序，通过该程序可以搭建、论坛。
