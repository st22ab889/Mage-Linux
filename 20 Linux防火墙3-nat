6 iptables实现网络防火墙
	工作中防火墙更多应用在保护整个网络
	iptables/netfilter 利用filter表的FORWARD链,可以充当网络防火墙。
	
	注意的问题：
		(1) 请求-响应报文均会经由FORWARD链，要注意规则的方向性
		(2) 如果要启用conntrack机制，建议将双方向的状态为ESTABLISHED的报文直接放行
	
范例：实现内网可以访问外网,但外网禁止访问内网

	架构：
		外部主机(eth0 仅主机) <<==========>> (eth1 仅主机)防火墙(eth0 NAT) <<==========>> (NAT)公司内部网络(主机1 eth0、主机2 eth0、......)
	
	
	环境：
		防火墙，两块网卡：
			eth0：NAT 	 10.0.0.8/24	 		接公司内部网络
			eth1：仅主机 192.168.10.8/24		接公司外部网络
			注意：
				可以配网关，也可以不配网关
				VMware 可以添加网卡，然后和 VMware 提供的网络模式进行绑定，这是在 VMware 上操作！
		
		外部主机：模拟外部网络的主机
			eth0：仅主机 192.168.10.100/24   	GW: 192.168.10.8	提供HTTP服务
		
		内部(Local)主机
			主机1：eth0：NAT 10.0.0.7/24 	GW: 10.0.0.8	 提供http服务
			主机2：eth0：NAT 10.0.0.17/24 	GW: 10.0.0.8		
	
	
	
	防火墙配置：
	
		sysctl -a | grep ip_forward		# 列出所有的内核选项
		
		vim /etc/sysctl.conf
		net.ipv4.ip_forward=1			# 开启 ipforward	
	
		sysctl -p						# 生效，因为直连网段路由自动生成，这时候外部主机和内部主机就能互联互通
		
		// 添加规则，实现内网可以访问外网，外网不能访问内网
		iptables -A FORWARD ! -s 10.0.0.0/24 -d 10.0.0.0/24  -m state --state NEW -j REJECT
			说明：
				"-A FORWARD" 表示使用 FORWARD 链，因为这里相当于转发，把数据从一个网络转到另一个网络
				"! -s 10.0.0.0/24" 表示除了这个网段的地址，"!"表示取反
				"-d 10.0.0.0/24" 表示目标网段
			
		curl 192.168.10.100 		# 内部网络主机 访问 外部网络主机，成功
		curl 10.0.0.7				# 外部网络主机 访问 内部网络主机，失败
		

		// 追加规则，实现外部主机可以访问内部网络中的某一台主机
		iptables -I FORWARD ! -s 10.0.0.0/24 -d 10.0.0.7  -m state --state NEW -p tcp --dport 80 -j ACCEPT
		
		curl 10.0.0.7 		# 外部网络主机 访问 内部网络"10.0.0.7"这台主机，成功
		ping 10.0.0.17		# 外部网络主机 访问 内部网络"10.0.0.17"这台主机，失败
		
		
		说明：
			"外部主机访问内部网络"这种架构在生产中基本用不上，因为企业内部用的地址都不是真正能被互联网直接访问的地址，企业内部用的都是私网地址，如下：
				A类一个  10.0.0.0/8
				B类一个  172.[16-31].0.0/16 , 	总共16个网段, 用合并超网的方式合成一个大网来表示  172.16.0.0/12
				C类一个  192.168.[0-255].0/24, 	总共256个网段，用合并超网的方式合成一个大网来表示	192.168.0.0/16
			这些网段是私有网络的原因是：这种地址都是在局域网中使用，互联网上不会有这种地址，也就是说互联网上根本就没有到达这些私有网络的路由！
			
	总结：	
		这里的防火墙相当于具有了路由器功能，因为实现了把数据从一个网络转到另一个网络！所以这台模拟防火墙的主机相当于"路由器+防火墙"功能!	
		
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

7 iptables实现NAT原理和实战

	NAT(network address translation，网络地址转换): 支持PREROUTING，INPUT，OUTPUT，POSTROUTING四个链！
		请求报文：修改源/目标IP，由定义如何修改
		响应报文：修改源/目标IP，根据跟踪机制自动实现

	NAT的实现分为下面类型：
		SNAT：source NAT ，支持POSTROUTING, INPUT，让本地网络中的主机通过某一特定地址访问外部网络，实现地址伪装,请求报文：修改源IP
		DNAT：destination NAT 支持PREROUTING , OUTPUT，把本地网络中的主机上的某服务开放给外部网络访问(发布服务和端口映射)，但隐藏真实IP,请求报文：修改目标IP
	
	PNAT: port nat，端口转换，也称为"端口映射"，

	
NAT应用：
	互联网上根本没有到达私有网络的路由，但是在企业和家庭中，用的都是私网地址，私有如何实现访问互联网？互联网如何访问私有地址？
	
	前提：
		要实现私有网络和互联网访问，前提是自己也需要有公网地址，对于企业来讲，一般都是专线宽带，有固定的公网IP；
		家庭宽带使用的是拨号网络，拨号网络不是专线，IP地址虽然是公网，但不固定，每次拨号地址会发生变化；
	
	私有网络中的主机访问互联网上的主机：
		1) 对于发出去的请求，源地址(私网中的主机地址)会替换为自己的公网地址，如果端口在NAT表中已经被使用，会进行端口的转换，然后请求发给互联网
		2) 当响应请求回来后，目标地址(自己的公网地址)和目标端口会根据NAT表的记录转换为私网中的主机地址和端口，请求回到主机
		说明：
			此过程就是通过"NAT(SNAT+DNAT) + PNAT"实现，NAT实现源地址和目标地址的伪装，PNAT是端口的伪装,端口的伪装是为了区分私有网络中的主机!
		
	互联网上的主机访问私有网络中的主机：
		1) 需要将公网地址和私有网络中提供服务的主机的IP进行映射，并且提供服务的主机的端口要固定映射！
		2) 互联网过来的请求访问到自己的公网IP,这时请求的目标地址(自己的公网地址)和目标端口会根据NAT表的记录转换为私网中的主机地址和端口，主机就能接收请求
		3) 私网中的主机响应请求，这时响应的目标地址(自己的公网地址)和目标端口会根据NAT表的记录转换为互联网主机的地址和端口，这样响应包就能回到公网主机
		说明：
			此过程也是通过"NAT(SNAT+DNAT) + PNAT"实现，其实就是把访问公网地址的请求转发给私有网络中的主机，这个过程相当于代理！
		

防火墙和NAT：
	内网要访问外网，需要在防火墙上配置 SNAT
	外网要访问内网，需要在防火墙上配置 DNAT
		
		
现实生活中的网络通讯：
	架构：
		|--------------------NAT网络-------------------|------------------公网------------------|-------------------NAT网络-------------------|
		|					                           |										|											  |
		|<------私有网络------>|<-----NAT加IP转发----->|--------------公网路由转发--------------|<-----NAT加IP转发----->|<-----私有网络------>|
		|                      |                       |                                        |                       |                     |
		|私网主机<=======>(eth0私有地址)路由器(eth1公网地址)<=======>公网<***>公网<=======>(eth0公网地址)路由器(eth1私有地址)<=======>私网主机|
		---------------------------------------------------------------------------------------------------------------------------------------
	说明：
		在现实生活中，不管是客户端还是服务端，都在NAT网络中，都是通过NAT的方式在和对端互联网远程主机通讯！
		防火墙就具有路由功能！
	参考资料：
		防火墙的三种工作模式介绍（路由模式、透明模式（网桥）、混合模式）：https://blog.csdn.net/a_island/article/details/120491826

总结：
	NAT 实现的是IP转换，包括源地址转换(请求包)和目标地址转换(相应包)
	PNAT 实现端口转换


7.1 SNAT，配置SNAT,实现的是内网访问外网
	
	SNAT：基于nat表的target，适用于固定的公网IP
		SNAT选项：
			--to-source [ipaddr[-ipaddr]][:port[-port]]
			--random
	MASQUERADE：基于nat表的target，适用于动态的公网IP，如：拨号网络
		MASQUERADE选项：
			--to-ports port[-port]
			--random
	格式：
		如果是专线(公网IP固定)：
			iptables -t nat -A POSTROUTING -s LocalNET ! -d LocalNet -j SNAT --to-source ExtIP
			说明：
				" -s LocalNET" 表示把局域网源地址替换为公网地址
				"! -d LocalNet" 表示目标地址是非局域网地址，才将源地址替换为公网地址
				"ExtIP" 表示公网地址
		如果是拨号网络(公网IP不固定)：
			iptables -t nat -A POSTROUTING -s LocalNET ! -d LocalNet -j MASQUERADE
			说明：
				MASQUERADE 表示当时拨号网络的公网地址是什么，就替换为什么。专线也可以用这个
			
	注意: 需要开启 ip_forward
	
	
	// 当"10.0.0.0/24"网段访问非"10.0.0.0/24"网段的时候，就将源地址替换为公网地址，公网地址可能有多个，多个用"-"连起来
	iptables -t nat -A POSTROUTING -s 10.0.0.0/24 ! –d 10.0.0.0/24 -j SNAT --to-source 172.18.1.6-172.18.1.9
	说明:
		" 172.18.1.6-172.18.1.9" 表示 172.18.1.6 到 172.18.1.9 连续4个IP！
		

7.2 DNAT，配置DNAT,实现的是外网访问内网
	DNAT：nat表的target，适用于端口映射，即可重定向到本机，也可以支持重定向至不同主机的不同端口，但不支持多目标，即不支持负载均衡功能
	DNAT选项：
		--to-destination [ipaddr[-ipaddr]][:port[-port]]
	DNAT 格式:
		iptables -t nat -A PREROUTING -d ExtIP -p tcp|udp --dport PORT -j DNAT --to-destination InterSeverIP[:PORT]
		说明：
			"-d ExtIP" 表示访问的哪个公网地址，这里必需是专线固定的公网地址，拨号网络的公网IP是动态的，不固定的，所以不能写在这里
			"--dport PORT" 表示访问的哪个端口
			"--to-destination InterSeverIP[:PORT]"表示转发给内网的某个地址，如果不写端口，默认和"--dport"指定的端口一样
			
	注意: 需要开启 ip_forward
	

7.3 REDIRECT 转发
	REDIRECT，是NAT表的 target，通过改变目标IP和端口，将接收的包转发至同一个主机的不同端口，可用于PREROUTING、OUTPUT链
	REDIRECT选项：
		--to-ports port[-port]
	
	注意: 无需开启 ip_forward
	
	示例：
		// 表示把"172.16.100.10"主机的80端口重定向到8080端口
		iptables -t nat -A PREROUTING -d 172.16.100.10 -p tcp --dport 80 -j REDIR  ECT --to-ports 8080
	
	使用场景：当用户访问本地主机的某一个端口，如果这个端口不存在就重定向到存在的端口上，这就是端口重定向
	
	
实践：SNAT、DNAT、REDIRECT

	
	环境：
		防火墙，两块网卡：
			eth0：NAT 	 10.0.0.8/24	 		接公司内部网络
			eth1：仅主机 192.168.10.8/24		接公司外部网络
			注意：
				可以配网关，也可以不配网关
				VMware 可以添加网卡，然后和 VMware 提供的网络模式进行绑定，这是在 VMware 上操作！
		
		外部主机：模拟外部网络的主机
			eth0：仅主机 192.168.10.100/24
		
		内部(Local)主机
			主机1：eth0：NAT 10.0.0.7/24 	GW: 10.0.0.8	 提供http服务，80端口
			主机2：eth0：NAT 10.0.0.17/24 	GW: 10.0.0.8	
	
	// "10.0.0.7"主机ping "192.168.10.100"，ping不通，因为没有路由，外部主机没有配置网关
	ping 192.168.10.100		# 数据包可以到达"192.168.10.100"，但是响应的数据包回不来，因为没有配置网关，没有网关就没有路由
	
	// 防火墙上运行：
	iptables -t nat -A POSTROUTING -s 10.0.0.0/24 ! -d 10.0.0.0/24 -j MASQUERADE		#实现SNAT
	iptables -t nat -A PREROUTING -d 192.168.10.8 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.7  #实现DNAT,如果不指定端口，默认和"--dport"指定的端口一样
	iptables -t nat -nvL
	
	
	测试 SNAT：
		// 10.0.0.7"主机ping "192.168.10.100" 
		ping 192.168.10.100			# 成功ping通
		
		// 在"192.168.10.100" 主机上抓包，可以发现请求来自"10.0.0.8"，这是因为防火墙做了地址转换
		tcpdump -i eth0 -nn icmp	# 做了地址转换后，"192.168.10.8"和"192.168.10.100"就在同一网段内，所以不需要路由也能ping通
	
	测试 DNAT：
		// 在"192.168.10.100"主机上访问内网主机，但不能直接访问 
		curl 192.168.10.8 		# 当访问"192.168.10.8"时，会将请求转发给"10.0.0.7"
		
		// 在"10.0.0.7"主机上查看日志，可以看到请求来自"192.168.10.100"，因为DNAT可以看到客户端的真实地址
		tail /var/log/httpd/access_log -f
		
		// 如果"10.0.0.7"主机的http服务端口变为8080，这时防火墙上的 DNAT 也要跟着变。#"-R 1"表示替换第一条规则，因为DNAT这条规则当前次序为1
		iptables -t nat -R PREROUTING 1 -d 192.168.10.8 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.7:8080  
		
		// 当访问"192.168.10.8"的80端口，请求就会转发给内网"10.0.0.7"主机的8080端口
		curl 192.168.10.8 
		
	测试 REDIRECT：
		// 如果"10.0.0.7"主机的http服务端口变为9090，这时不能老改防火墙，因为防火墙一般由专业的网络工程师管理，不是想怎么改就怎么改
		// 在"10.0.0.7"主机上添加如下规则：
		iptables -t nat -A PREROUTING -d 10.0.0.7 -p tcp --dport 8080 -j REDIRECT --to-ports 9090		#本地主机端口重定向
		
		//当访问"192.168.10.8"的80端口，请求就会转发给内网"10.0.0.7"主机的8080端口，根据规则，内网主机又会把8080端口重定向到9090端口，最终成功访问 
		curl 192.168.10.8 
		
	注意：
		"192.168.10.8"主机并不监听80端口，因为 iptables 本质上用的是内核的功能，内核没有监听端口的说法，只有用户空间的应用程序才监听端口，
		内核虽然没有监听端口，但确实也能处理请求


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

扩展：

	centos中主要的日志"/var/log/message"

	// 抓eth0网卡上的icmp包， -n表示数字化显示
	tcpdump -i eth0 icmp -nn  

	// telnet可用于测试连接
	[root@localhost ~]#telnet 192.168.32.100 3306
	Trying 192.168.32.100...
	Connected to 192.168.32.100.
	Escape character is '^]'.			telnet 中括号能出来，说明能连
	......省略


	"0.0.0.0" 地址说明： 
		1)通常情况下，网络中所说的0.0.0.0的ip地址表示整个网络，即网络中的所有主机。
		2)但在一些老的软件中，他们可能将0.0.0.0做为广播地址使用，即他们发送广播数据包时，目标地址址不是255.255.255.255，而是0.0.0.0。
		  所以，当协议分析软件抓到ip是0.0.0.0的主机时，表示网络存在将0.0.0.0做为广播地址进行通讯的情况，而不是代表整个网络。
		3)中出现0.0.0.0时，我们需要检查该数据包的源主机，检查其是否是人为手动使用某些老的软件产生的这种数据包，或者是由于某些非法攻击产生的该数据包。
		注意：0.0.0.0做为广播地址已经基本上被废弃，当前的网络程序或设备一般都不会将0.0.0.0做为广播地址。
